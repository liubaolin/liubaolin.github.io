<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Richey&#39;s Blog</title>
  
  <subtitle>吾生也有涯，而知也无涯。以有涯随无涯，殆已。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://10000hours.top/"/>
  <updated>2021-06-01T16:09:48.247Z</updated>
  <id>http://10000hours.top/</id>
  
  <author>
    <name>Richey Liu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux速查备忘</title>
    <link href="http://10000hours.top/2021/06/01/Linux%E9%80%9F%E6%9F%A5%E5%A4%87%E5%BF%98/"/>
    <id>http://10000hours.top/2021/06/01/Linux%E9%80%9F%E6%9F%A5%E5%A4%87%E5%BF%98/</id>
    <published>2021-05-31T16:00:00.000Z</published>
    <updated>2021-06-01T16:09:48.247Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关机、重启、注销"><a href="#关机、重启、注销" class="headerlink" title="关机、重启、注销"></a>关机、重启、注销</h1><table><thead><tr><th>常用命令</th><th>作用</th></tr></thead><tbody><tr><td>shutdown -h now</td><td>即刻关机</td></tr><tr><td>shutdown -h 10</td><td>10分钟后关机</td></tr><tr><td>shutdown -h 11:00</td><td>11:00关机</td></tr><tr><td>shutdown -h +10</td><td>预定时间关机(10分钟后)</td></tr><tr><td>shutdown -c</td><td>取消指定时间关机</td></tr><tr><td>shutdown -r now</td><td>重启</td></tr><tr><td>shutdown -r 10</td><td>10分钟之后重启</td></tr><tr><td>shutdown -r 11:00</td><td>定时重启</td></tr><tr><td>reboot</td><td>重启</td></tr><tr><td>init 6</td><td>重启</td></tr><tr><td>init 0 立刻关机</td><td></td></tr><tr><td>telinit 0</td><td>关机</td></tr><tr><td>poweroff</td><td>立刻关机</td></tr><tr><td>halt</td><td>关机</td></tr><tr><td>sync</td><td>buff数据同步到磁盘</td></tr><tr><td>logout</td><td>退出登录Shell</td></tr></tbody></table><h1 id="系统信息和性能查看"><a href="#系统信息和性能查看" class="headerlink" title="系统信息和性能查看"></a>系统信息和性能查看</h1><table><thead><tr><th>常用命令</th><th>作用</th></tr></thead><tbody><tr><td>uname -a</td><td>查看内核/OS/CPU信息</td></tr><tr><td>uname -r</td><td>查看内核版本</td></tr><tr><td>uname -m</td><td>查看处理器架构</td></tr><tr><td>arch</td><td>查看处理器架构</td></tr><tr><td>hostname</td><td>查看计算机名</td></tr><tr><td>who</td><td>显示当前登录系统的用户</td></tr><tr><td>who am i</td><td>显示登录时的用户名</td></tr><tr><td>whoami</td><td>显示当前用户名</td></tr><tr><td>cat /proc/version</td><td>查看linux版本信息</td></tr><tr><td>cat /proc/cpuinfo</td><td>查看CPU信息</td></tr><tr><td>cat /proc/interrupts</td><td>查看中断</td></tr><tr><td>cat /proc/loadavg</td><td>查看系统负载</td></tr><tr><td>uptime</td><td>查看系统运行时间、用户数、负载</td></tr><tr><td>env</td><td>查看系统的环境变量</td></tr><tr><td>lsusb -tv</td><td>查看系统USB设备信息</td></tr><tr><td>lspci -tv</td><td>查看系统PCI设备信息</td></tr><tr><td>lsmod</td><td>查看已加载的系统模块</td></tr><tr><td>grep MemTotal /proc/meminfo</td><td>查看内存总量</td></tr><tr><td>grep MemFree /proc/meminfo</td><td>查看空闲内存量</td></tr><tr><td>free -m</td><td>查看内存用量和交换区用量</td></tr><tr><td>date</td><td>显示系统日期时间</td></tr><tr><td>cal 2021</td><td>显示2021日历表</td></tr><tr><td>top</td><td>动态显示cpu/内存/进程等情况</td></tr><tr><td>vmstat 1 20</td><td>每1秒采一次系统状态,采20次</td></tr><tr><td>iostat</td><td>查看io读写/cpu使用情况</td></tr><tr><td>sar -u 1 10</td><td>查询cpu使用情况(1秒一次,共10次)</td></tr><tr><td>sar -d 1 10</td><td>查询磁盘性能</td></tr></tbody></table><h1 id="磁盘和分区"><a href="#磁盘和分区" class="headerlink" title="磁盘和分区"></a>磁盘和分区</h1><table><thead><tr><th>常用命令</th><th>作用</th></tr></thead><tbody><tr><td>fdisk -l</td><td>查看所有磁盘分区</td></tr><tr><td>swapon -s</td><td>查看所有交换分区</td></tr><tr><td>df -h</td><td>查看磁盘使用情况及挂载点</td></tr><tr><td>df -hl</td><td>同上</td></tr><tr><td>du -sh /dir</td><td>查看指定某个目录的大小</td></tr><tr><td>du -sk * | sort -rn</td><td>从高到低依次显示文件和目录大小</td></tr><tr><td>mount /dev/hda2 /mnt/hda2</td><td>挂载hda2盘</td></tr><tr><td>mount -t ntfs /dev/sdc1 /mnt/usbhd1</td><td>指定文件系统类型挂载(如ntfs)</td></tr><tr><td>mount -o loop xxx.iso /mnt/cdrom</td><td>挂载iso文件</td></tr><tr><td>mount /dev/sda1 /mnt/usbdisk</td><td>挂载usb盘/闪存设备</td></tr><tr><td>umount -v /dev/sda1</td><td>通过设备名卸载</td></tr><tr><td>umount -v /mnt/mymnt</td><td>通过挂载点卸载</td></tr><tr><td>fuser -km /mnt/hda1</td><td>强制卸载(慎用)</td></tr></tbody></table><h1 id="用户和用户组"><a href="#用户和用户组" class="headerlink" title="用户和用户组"></a>用户和用户组</h1><table><thead><tr><th>常用命令</th><th>作用</th></tr></thead><tbody><tr><td>useradd richey</td><td>创建用户</td></tr><tr><td>userdel -r richey</td><td>删除用户</td></tr><tr><td>usermod -g group_name user_name</td><td>修改用户的组</td></tr><tr><td>usermod -aG group_name user_name</td><td>将用户添加到组</td></tr><tr><td>usermod -s</td><td>/bin/ksh -d /home/codepig</td></tr><tr><td>–g dev richey</td><td>修改用户richey的登录Shell、主目录以及用户组</td></tr><tr><td>groups test</td><td>查看test用户所在的组</td></tr><tr><td>groupadd group_name</td><td>创建用户组</td></tr><tr><td>groupdel group_name</td><td>删除用户组</td></tr><tr><td>groupmod -n new_name old_name</td><td>重命名用户组</td></tr><tr><td>su - user_name</td><td>完整切换到一个用户环境</td></tr><tr><td>passwd</td><td>修改口令</td></tr><tr><td>passwd richey</td><td>修改某用户的口令</td></tr><tr><td>w</td><td>查看活动用户</td></tr><tr><td>id richey</td><td>查看指定用户richey信息</td></tr><tr><td>last</td><td>查看用户登录日志</td></tr><tr><td>crontab -l</td><td>查看当前用户的计划任务</td></tr><tr><td>cut -d: -f1 /etc/passwd</td><td>查看系统所有用户</td></tr><tr><td>cut -d: -f1 /etc/group</td><td>查看系统所有组</td></tr></tbody></table><h1 id="网络和进程管理"><a href="#网络和进程管理" class="headerlink" title="网络和进程管理"></a>网络和进程管理</h1><table><thead><tr><th>常用命令</th><th>作用</th></tr></thead><tbody><tr><td>ifconfig</td><td>查看网络接口属性</td></tr><tr><td>ifconfig eth0</td><td>查看某网卡的配置</td></tr><tr><td>route -n</td><td>查看路由表</td></tr><tr><td>netstat -lntp</td><td>查看所有监听端口</td></tr><tr><td>netstat -antp</td><td>查看已经建立的TCP连接</td></tr><tr><td>netstat -lutp</td><td>查看TCP/UDP的状态信息</td></tr><tr><td>ifup eth0</td><td>启用eth0网络设备</td></tr><tr><td>ifdown eth0</td><td>禁用eth0网络设备</td></tr><tr><td>iptables -L</td><td>查看iptables规则</td></tr><tr><td>ifconfig eth0 192.168.1.1 netmask 255.255.255.0</td><td>配置ip地址</td></tr><tr><td>dhclient eth0</td><td>以dhcp模式启用eth0</td></tr><tr><td>route add -net 0/0 gw Gateway_IP</td><td>配置默认网关</td></tr><tr><td>route add -net 192.168.0.0 netmask 255.255.0.0 gw 192.168.1.1</td><td>配置静态路由到达网络’192.168.0.0/16’</td></tr><tr><td>route del 0/0 gw Gateway_IP</td><td>删除静态路由</td></tr><tr><td>hostname 查看主机名host 10000hours.top</td><td>解析主机名</td></tr><tr><td>nslookup 10000hours.top</td><td>查询DNS记录,查看域名解析是否正常</td></tr><tr><td>ps -ef</td><td>查看所有进程</td></tr><tr><td>ps -ef | grep richey</td><td>过滤出你需要的进程</td></tr><tr><td>kill -s name</td><td>kill指定名称的进程</td></tr><tr><td>kill -s pid</td><td>kill指定pid的进程</td></tr><tr><td>top</td><td>实时显示进程状态</td></tr><tr><td>vmstat 1 20</td><td>每1秒采一次系统状态,采20次</td></tr><tr><td>iostat</td><td>查看io读写/cpu使用情况</td></tr><tr><td>sar -u 1 10</td><td>查询cpu使用情况(1秒一次,共10次)</td></tr><tr><td>sar -d 1 10</td><td>查询磁盘性能</td></tr></tbody></table><h1 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;关机、重启、注销&quot;&gt;&lt;a href=&quot;#关机、重启、注销&quot; class=&quot;headerlink&quot; title=&quot;关机、重启、注销&quot;&gt;&lt;/a&gt;关机、重启、注销&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;常用命令&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://10000hours.top/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://10000hours.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes03-集群搭建</title>
    <link href="http://10000hours.top/2021/05/24/Kubernetes03-%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    <id>http://10000hours.top/2021/05/24/Kubernetes03-%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</id>
    <published>2021-05-23T16:00:00.000Z</published>
    <updated>2021-05-24T15:25:20.282Z</updated>
    
    <content type="html"><![CDATA[<h1 id="准备3台服务器"><a href="#准备3台服务器" class="headerlink" title="准备3台服务器"></a>准备3台服务器</h1><p>这里我们用虚拟机装3个节点：node1,node2,node3</p><p>如果安装的时候没有设置好主机名，可以手动再设置一下，给个名字方便操作：</p><p>hostnamectl set-hostname node1  //node2 node3</p><h2 id="设置静态ip"><a href="#设置静态ip" class="headerlink" title="设置静态ip"></a>设置静态ip</h2><p>最好将节点的ip设置成静态的（不能随便变）,这里3个节点装的是ubuntu 20.04 server,设置方法如下：</p><p>ifconfig //列出系统中所有连接的网络接口</p><p><img src="https://blog-pic-1254088127.picsh.myqcloud.com/ifconfig-20210523.png" alt="ifconfig"></p><p>我们将ens33以太网网络接口配置一个静态IP</p><p>vim /etc/netplan/xxx-yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">network:</span><br><span class="line">  ethernets:</span><br><span class="line">    ens33:</span><br><span class="line">      addresses:</span><br><span class="line">      - 172.16.250.128&#x2F;24</span><br><span class="line">      dhcp4: false</span><br><span class="line">      gateway4: 172.16.250.2</span><br><span class="line">      nameservers:</span><br><span class="line">        addresses:</span><br><span class="line">          - 8.8.8.8</span><br><span class="line">  version: 2</span><br></pre></td></tr></table></figure><p>如果YAML文件不是由发行版安装程序创建的，则可以使用此命令为渲染器生成所需的配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo netplan generate</span><br></pre></td></tr></table></figure><p>保存该文件并退出。然后使用以下netplan命令应用最近的网络更改。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo netplan apply</span><br></pre></td></tr></table></figure><p>将3个节点全部设置成静态ip</p><h2 id="修改域名文件"><a href="#修改域名文件" class="headerlink" title="修改域名文件"></a>修改域名文件</h2><p>vim /etc/hosts</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">172.16.250.128 node1</span><br><span class="line">172.16.250.129 node2</span><br><span class="line">172.16.250.131 node3</span><br></pre></td></tr></table></figure><p>scp /etc/hosts <a href="mailto:root@172.16.250.129">root@172.16.250.129</a>:/etc/hosts<br>scp /etc/hosts <a href="mailto:root@172.16.250.131">root@172.16.250.131</a>:/etc/hosts</p><h1 id="时区"><a href="#时区" class="headerlink" title="时区"></a>时区</h1><p>务必保证3台服务器的时区是一样的，强制更改时区为上海，执行以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -snf &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;Asia&#x2F;Shanghai &#x2F;etc&#x2F;localtime</span><br><span class="line">bash -c &quot;echo &#39;Asia&#x2F;Shanghai&#39; &gt; &#x2F;etc&#x2F;timezone&quot;</span><br></pre></td></tr></table></figure><p>安装ntpdate</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install -y ntpdate</span><br></pre></td></tr></table></figure><p>如果出现以下错误：</p><p>E: Could not get lock /var/lib/dpkg/lock - open (11: Resource temporarily unavailable)<br>E: Unable to lock the administration directory (/var/lib/dpkg/), is another process using it?</p><p>执行2个命令解决</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo rm &#x2F;var&#x2F;cache&#x2F;apt&#x2F;archives&#x2F;lock</span><br><span class="line">sudo rm &#x2F;var&#x2F;lib&#x2F;dpkg&#x2F;lock</span><br></pre></td></tr></table></figure><p>使用阿里云的时间服务器更新</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ntpdate ntp1.aliyun.com</span><br><span class="line">i</span><br></pre></td></tr></table></figure><p>3台服务器都执行一下，确保时间一致.</p><h1 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h1><p>所有节点都要安装。<br>如果使用docker作为k8s容器，则docker是必须要安装的。</p><p>更新apt源并添加https支持</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update &amp;&amp; sudo apt-get install apt-transport-https ca-certificates curl software-properties-common -y</span><br></pre></td></tr></table></figure><p>使用utc源添加GPG Key</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;docker-ce&#x2F;linux&#x2F;ubuntu&#x2F;gpg | sudo apt-key add</span><br></pre></td></tr></table></figure><p>添加Docker-ce稳定版源地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository &quot;deb [arch&#x3D;amd64] https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;docker-ce&#x2F;linux&#x2F;ubuntu $(lsb_release -cs) stable&quot;</span><br></pre></td></tr></table></figure><p>安装docker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">apt-cache madison docker-ce &#x2F;&#x2F; List the versions available in your repo</span><br><span class="line">sudo apt install docker-ce&#x3D;5:19.03.9~3-0~ubuntu-focal</span><br></pre></td></tr></table></figure><p>3个节点都要安装</p><h1 id="安装kubernetes组件"><a href="#安装kubernetes组件" class="headerlink" title="安装kubernetes组件"></a>安装kubernetes组件</h1><ul><li>kubeadm：引导集群的命令。</li><li>kubelet：在群集中所有计算机上运行的组件，它执行诸如启动Pod和容器之类的操作。</li><li>kubectl：用于与您的集群通信的命令行工具。</li></ul><p>所有节点都需要安装：</p><p>添加apt key及源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update &amp;&amp; sudo apt install -y apt-transport-https curl</span><br><span class="line"></span><br><span class="line">curl -s https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;apt&#x2F;doc&#x2F;apt-key.gpg | sudo apt-key add -</span><br><span class="line"></span><br><span class="line">echo &quot;deb https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;apt&#x2F; kubernetes-xenial main&quot; &gt;&gt;&#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;kubernetes.list</span><br></pre></td></tr></table></figure><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install -y kubelet&#x3D;1.15.2-00 kubeadm&#x3D;1.15.2-00 kubectl&#x3D;1.15.2-00</span><br><span class="line">sudo apt-mark hold kubelet&#x3D;1.15.2-00 kubeadm&#x3D;1.15.2-00 kubectl&#x3D;1.15.2-00</span><br></pre></td></tr></table></figure><h1 id="禁用swap"><a href="#禁用swap" class="headerlink" title="禁用swap"></a>禁用swap</h1><p>所有节点都要操作（这里node1，node2，node3）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo sed -i &#39;&#x2F;swap&#x2F; s&#x2F;^&#x2F;#&#x2F;&#39; &#x2F;etc&#x2F;fstab</span><br><span class="line">sudo swapoff -a</span><br></pre></td></tr></table></figure><h1 id="安装kubernetes集群"><a href="#安装kubernetes集群" class="headerlink" title="安装kubernetes集群"></a>安装kubernetes集群</h1><p>只在master节点安装即可，这里我们用node1做master节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">sudo kubeadm init --image-repository registry.aliyuncs.com&#x2F;google_containers --kubernetes-version v1.15.2 --pod-network-cidr&#x3D;192.169.0.0&#x2F;16</span><br><span class="line"></span><br><span class="line">[init] Using Kubernetes version: v1.15.2</span><br><span class="line">[preflight] Running pre-flight checks</span><br><span class="line">[WARNING IsDockerSystemdCheck]: detected &quot;cgroupfs&quot; as the Docker cgroup driver. The recommended driver is &quot;systemd&quot;. Please follow the guide at https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;setup&#x2F;cri&#x2F;</span><br><span class="line">[WARNING SystemVerification]: this Docker version is not on the list of validated versions: 19.03.9. Latest validated version: 18.09</span><br><span class="line">[preflight] Pulling images required for setting up a Kubernetes cluster</span><br><span class="line">[preflight] This might take a minute or two, depending on the speed of your internet connection</span><br><span class="line">[preflight] You can also perform this action in beforehand using &#39;kubeadm config images pull&#39;</span><br><span class="line">[kubelet-start] Writing kubelet environment file with flags to file &quot;&#x2F;var&#x2F;lib&#x2F;kubelet&#x2F;kubeadm-flags.env&quot;</span><br><span class="line">[kubelet-start] Writing kubelet configuration to file &quot;&#x2F;var&#x2F;lib&#x2F;kubelet&#x2F;config.yaml&quot;</span><br><span class="line">[kubelet-start] Activating the kubelet service</span><br><span class="line">[certs] Using certificateDir folder &quot;&#x2F;etc&#x2F;kubernetes&#x2F;pki&quot;</span><br><span class="line">[certs] Generating &quot;etcd&#x2F;ca&quot; certificate and key</span><br><span class="line">[certs] Generating &quot;etcd&#x2F;server&quot; certificate and key</span><br><span class="line">[certs] etcd&#x2F;server serving cert is signed for DNS names [node1 localhost] and IPs [172.16.250.128 127.0.0.1 ::1]</span><br><span class="line">[certs] Generating &quot;etcd&#x2F;peer&quot; certificate and key</span><br><span class="line">[certs] etcd&#x2F;peer serving cert is signed for DNS names [node1 localhost] and IPs [172.16.250.128 127.0.0.1 ::1]</span><br><span class="line">[certs] Generating &quot;etcd&#x2F;healthcheck-client&quot; certificate and key</span><br><span class="line">[certs] Generating &quot;apiserver-etcd-client&quot; certificate and key</span><br><span class="line">[certs] Generating &quot;ca&quot; certificate and key</span><br><span class="line">[certs] Generating &quot;apiserver-kubelet-client&quot; certificate and key</span><br><span class="line">[certs] Generating &quot;apiserver&quot; certificate and key</span><br><span class="line">[certs] apiserver serving cert is signed for DNS names [node1 kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 172.16.250.128]</span><br><span class="line">[certs] Generating &quot;front-proxy-ca&quot; certificate and key</span><br><span class="line">[certs] Generating &quot;front-proxy-client&quot; certificate and key</span><br><span class="line">[certs] Generating &quot;sa&quot; key and public key</span><br><span class="line">[kubeconfig] Using kubeconfig folder &quot;&#x2F;etc&#x2F;kubernetes&quot;</span><br><span class="line">[kubeconfig] Writing &quot;admin.conf&quot; kubeconfig file</span><br><span class="line">[kubeconfig] Writing &quot;kubelet.conf&quot; kubeconfig file</span><br><span class="line">[kubeconfig] Writing &quot;controller-manager.conf&quot; kubeconfig file</span><br><span class="line">[kubeconfig] Writing &quot;scheduler.conf&quot; kubeconfig file</span><br><span class="line">[control-plane] Using manifest folder &quot;&#x2F;etc&#x2F;kubernetes&#x2F;manifests&quot;</span><br><span class="line">[control-plane] Creating static Pod manifest for &quot;kube-apiserver&quot;</span><br><span class="line">[control-plane] Creating static Pod manifest for &quot;kube-controller-manager&quot;</span><br><span class="line">[control-plane] Creating static Pod manifest for &quot;kube-scheduler&quot;</span><br><span class="line">[etcd] Creating static Pod manifest for local etcd in &quot;&#x2F;etc&#x2F;kubernetes&#x2F;manifests&quot;</span><br><span class="line">[wait-control-plane] Waiting for the kubelet to boot up the control plane as static Pods from directory &quot;&#x2F;etc&#x2F;kubernetes&#x2F;manifests&quot;. This can take up to 4m0s</span><br><span class="line">[apiclient] All control plane components are healthy after 16.004480 seconds</span><br><span class="line">[upload-config] Storing the configuration used in ConfigMap &quot;kubeadm-config&quot; in the &quot;kube-system&quot; Namespace</span><br><span class="line">[kubelet] Creating a ConfigMap &quot;kubelet-config-1.15&quot; in namespace kube-system with the configuration for the kubelets in the cluster</span><br><span class="line">[upload-certs] Skipping phase. Please see --upload-certs</span><br><span class="line">[mark-control-plane] Marking the node node1 as control-plane by adding the label &quot;node-role.kubernetes.io&#x2F;master&#x3D;&#39;&#39;&quot;</span><br><span class="line">[mark-control-plane] Marking the node node1 as control-plane by adding the taints [node-role.kubernetes.io&#x2F;master:NoSchedule]</span><br><span class="line">[bootstrap-token] Using token: yq1qjo.00jrgi61fik1rnuc</span><br><span class="line">[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles</span><br><span class="line">[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials</span><br><span class="line">[bootstrap-token] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token</span><br><span class="line">[bootstrap-token] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster</span><br><span class="line">[bootstrap-token] Creating the &quot;cluster-info&quot; ConfigMap in the &quot;kube-public&quot; namespace</span><br><span class="line">[addons] Applied essential addon: CoreDNS</span><br><span class="line">[addons] Applied essential addon: kube-proxy</span><br><span class="line"></span><br><span class="line">Your Kubernetes control-plane has initialized successfully!</span><br><span class="line"></span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line"></span><br><span class="line">  mkdir -p $HOME&#x2F;.kube</span><br><span class="line">  sudo cp -i &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf $HOME&#x2F;.kube&#x2F;config</span><br><span class="line">  sudo chown $(id -u):$(id -g) $HOME&#x2F;.kube&#x2F;config</span><br><span class="line"></span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:</span><br><span class="line">  https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;cluster-administration&#x2F;addons&#x2F;</span><br><span class="line"></span><br><span class="line">Then you can join any number of worker nodes by running the following on each as root:</span><br><span class="line"></span><br><span class="line">kubeadm join 172.16.250.128:6443 --token yq1qjo.00jrgi61fik1rnuc \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:fcb73171bb839f6dc6701880d9b863258f62992530aa04695e150798e56ef6ed</span><br></pre></td></tr></table></figure><p>这样就初始化成功了，注意警告信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[WARNING IsDockerSystemdCheck]: detected &quot;cgroupfs&quot; as the Docker cgroup driver. The recommended driver is &quot;systemd&quot;. Please follow the guide at https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;setup&#x2F;cri&#x2F;</span><br></pre></td></tr></table></figure><p>可以忽略，解决方法：</p><p>修改或者创建 vim /etc/docker/daemon.json</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver&#x3D;systemd&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="拷贝kubeconfig文件到家目录的-kube目录"><a href="#拷贝kubeconfig文件到家目录的-kube目录" class="headerlink" title="拷贝kubeconfig文件到家目录的.kube目录"></a>拷贝kubeconfig文件到家目录的.kube目录</h1><p>只需要在master节点（这里我们是node1节点）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@node1:&#x2F;home&#x2F;richey# mkdir -p $HOME&#x2F;.kube</span><br><span class="line">root@node1:&#x2F;home&#x2F;richey# sudo cp -i &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf $HOME&#x2F;.kube&#x2F;config</span><br><span class="line">root@node1:&#x2F;home&#x2F;richey# sudo chown $(id -u):$(id -g) $HOME&#x2F;.kube&#x2F;config</span><br></pre></td></tr></table></figure><h1 id="安装网络插件，让pod之间通信"><a href="#安装网络插件，让pod之间通信" class="headerlink" title="安装网络插件，让pod之间通信"></a>安装网络插件，让pod之间通信</h1><p>只需要在master节点（这里我们是node1节点）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;coreos&#x2F;flannel&#x2F;master&#x2F;Documentation&#x2F;kube-flannel.yml</span><br><span class="line"></span><br><span class="line">kubectl apply -f kube-flannel.yml</span><br></pre></td></tr></table></figure><h1 id="查看kube-system命名空间下的pod状态"><a href="#查看kube-system命名空间下的pod状态" class="headerlink" title="查看kube-system命名空间下的pod状态"></a>查看kube-system命名空间下的pod状态</h1><p>kubectl get pod -n kube-system</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">root@node1:&#x2F;home&#x2F;richey# kubectl get pod -n kube-system</span><br><span class="line">NAME                            READY   STATUS    RESTARTS   AGE</span><br><span class="line">coredns-bccdc95cf-6khq2         1&#x2F;1     Running   0          30m</span><br><span class="line">coredns-bccdc95cf-lk8j6         1&#x2F;1     Running   0          30m</span><br><span class="line">etcd-node1                      1&#x2F;1     Running   0          30m</span><br><span class="line">kube-apiserver-node1            1&#x2F;1     Running   0          30m</span><br><span class="line">kube-controller-manager-node1   1&#x2F;1     Running   0          29m</span><br><span class="line">kube-flannel-ds-cxt98           1&#x2F;1     Running   0          78s</span><br><span class="line">kube-proxy-56nt6                1&#x2F;1     Running   0          30m</span><br><span class="line">kube-scheduler-node1            1&#x2F;1     Running   0          29m</span><br></pre></td></tr></table></figure><h1 id="加入node节点"><a href="#加入node节点" class="headerlink" title="加入node节点"></a>加入node节点</h1><p>仅在node节点操作，在master节点执行kubeadm init时，最后会打印出加入node节点的命令，在每个node节点执行此命令，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubeadm join 172.16.250.128:6443 --token yq1qjo.00jrgi61fik1rnuc \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:fcb73171bb839f6dc6701880d9b863258f62992530aa04695e150798e56ef6ed</span><br></pre></td></tr></table></figure><p>操作完后可以在主节点查看节点信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@node1:&#x2F;home&#x2F;richey# kubectl get nodes</span><br><span class="line">NAME    STATUS     ROLES    AGE   VERSION</span><br><span class="line">node1   Ready      master   34m   v1.15.2</span><br><span class="line">node2   NotReady   &lt;none&gt;   31s   v1.15.2</span><br><span class="line">node3   NotReady   &lt;none&gt;   25s   v1.15.2</span><br></pre></td></tr></table></figure><h1 id="命令补全"><a href="#命令补全" class="headerlink" title="命令补全"></a>命令补全</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apt-get install bash-completion</span><br><span class="line"></span><br><span class="line">source &lt;(kubectl completion bash)</span><br><span class="line">echo &quot;source &lt;(kubectl completion bash)&quot; &gt;&gt; ~&#x2F;.bashrc</span><br><span class="line">source  ~&#x2F;.bashrc</span><br></pre></td></tr></table></figure><h1 id="部署dashboard可视化插件"><a href="#部署dashboard可视化插件" class="headerlink" title="部署dashboard可视化插件"></a>部署dashboard可视化插件</h1><p><a href="https://github.com/kubernetes/dashboard" target="_blank" rel="noopener">https://github.com/kubernetes/dashboard</a></p><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f http:&#x2F;&#x2F;mirror.faasx.com&#x2F;kubernetes&#x2F;dashboard&#x2F;master&#x2F;src&#x2F;deploy&#x2F;recommended&#x2F;kubernetes-dashboard.yaml</span><br></pre></td></tr></table></figure><p>查看service、pod</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root@node1:&#x2F;home&#x2F;richey# kubectl -n&#x3D;kube-system get deployment kubernetes-dashboard</span><br><span class="line">NAME                   READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">kubernetes-dashboard   0&#x2F;1     1            0           83s</span><br><span class="line">root@node1:&#x2F;home&#x2F;richey# kubectl -n&#x3D;kube-system get service kubernetes-dashboard</span><br><span class="line">NAME                   TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE</span><br><span class="line">kubernetes-dashboard   ClusterIP   10.99.233.149   &lt;none&gt;        443&#x2F;TCP   2m12s</span><br><span class="line"></span><br><span class="line">root@node1:&#x2F;home&#x2F;richey# kubectl get pod -n&#x3D;kube-system -o wide | grep dashboard</span><br><span class="line">kubernetes-dashboard-8594bd9565-4t9tr   0&#x2F;1     ContainerCreating   0          2m58s   &lt;none&gt;           node3   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure><p>允许外部访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl proxy --address&#x3D;&#39;0.0.0.0&#39;  --accept-hosts&#x3D;&#39;^*$&#39;</span><br></pre></td></tr></table></figure><p>通过浏览器访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;172.16.250.128:8001&#x2F;api&#x2F;v1&#x2F;namespaces&#x2F;kube-system&#x2F;services&#x2F;https:kubernetes-dashboard:&#x2F;proxy&#x2F;</span><br><span class="line"></span><br><span class="line">172.16.250.128为master节点ip</span><br></pre></td></tr></table></figure><p>配置登录权限</p><p>Dashboard 支持 Kubeconfig 和 Token 两种认证方式，为了简化配置，我们通过配置文件 dashboard-admin.yaml 为 Dashboard 默认用户赋予 admin 权限。</p><p>vim dashboard-admin.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">metadata:</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line">  labels: </span><br><span class="line">     k8s-app: kubernetes-dashboard</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: cluster-admin</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line">  namespace: kube-system</span><br><span class="line">~</span><br></pre></td></tr></table></figure><p>kubectl apply -f dashboard-admin.yml</p><h1 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h1><p>这里将3个节点都重启一下演示重启k8s</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">systemctl start kubelet &#x2F;&#x2F;启动kubelet</span><br><span class="line">systemctl status kubelet &#x2F;&#x2F;查看kubelet状态</span><br><span class="line"></span><br><span class="line">root@node1:&#x2F;home&#x2F;richey# systemctl status kubelet</span><br><span class="line">● kubelet.service - kubelet: The Kubernetes Node Agent</span><br><span class="line">     Loaded: loaded (&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;kubelet.service; enabled; vendor preset: enabled)</span><br><span class="line">    Drop-In: &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;kubelet.service.d</span><br><span class="line">             └─10-kubeadm.conf</span><br><span class="line">     Active: activating (auto-restart) (Result: exit-code) since Mon 2021-05-24 14:14:08 UTC; 3s ago</span><br><span class="line">       Docs: https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;home&#x2F;</span><br><span class="line">    Process: 10669 ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;kubelet $KUBELET_KUBECONFIG_ARGS $KUBELET_CONFIG_ARGS $KUBELET_KUBEADM_ARGS $KUBELET_EXTRA_ARGS (code&#x3D;exited, status&#x3D;255&#x2F;EXCEPTION)</span><br><span class="line">   Main PID: 10669 (code&#x3D;exited, status&#x3D;255&#x2F;EXCEPTION)</span><br></pre></td></tr></table></figure><p>查看详细报错日志</p><p>root@node1:/home/richey# journalctl _PID=10669 |vim -</p><h1 id="重置"><a href="#重置" class="headerlink" title="重置"></a>重置</h1><p>执行kubeadm reset后可以重新搭建k8s集群</p><p>kubeadm reset </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The reset process does not clean your kubeconfig files and you must remove them manually.</span><br><span class="line">Please, check the contents of the $HOME&#x2F;.kube&#x2F;config file.</span><br></pre></td></tr></table></figure><p>需要手动删除$HOME/.kube/config</p><p>注意要在3个节点都执行kubeadm reset</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;准备3台服务器&quot;&gt;&lt;a href=&quot;#准备3台服务器&quot; class=&quot;headerlink&quot; title=&quot;准备3台服务器&quot;&gt;&lt;/a&gt;准备3台服务器&lt;/h1&gt;&lt;p&gt;这里我们用虚拟机装3个节点：node1,node2,node3&lt;/p&gt;
&lt;p&gt;如果安装的时候没有设置
      
    
    </summary>
    
    
      <category term="SRE" scheme="http://10000hours.top/categories/SRE/"/>
    
    
      <category term="K8s" scheme="http://10000hours.top/tags/K8s/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes02-核心概念</title>
    <link href="http://10000hours.top/2021/05/12/Kubernetes02-%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/"/>
    <id>http://10000hours.top/2021/05/12/Kubernetes02-%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/</id>
    <published>2021-05-11T16:00:00.000Z</published>
    <updated>2021-06-06T09:10:21.233Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://assets.processon.com/chart_image/5c75503fe4b0f9fba693aa6b.png" alt="k8s集群架构"></p><h1 id="比较容器和虚拟机"><a href="#比较容器和虚拟机" class="headerlink" title="比较容器和虚拟机"></a>比较容器和虚拟机</h1><p>和虚拟机相比容器更加轻量级，因为每个虚拟机需要运行自己的一组系统进程，而容器只是运行在宿主机上被隔离的单个进程。</p><p>虚拟机的好处是它们提供完全隔离的环境，因为每个虚拟机都运行在它们自己的Linux内核上，而容器则是调用同一个内核。</p><p>那容器是如何实现隔离的呢？有两个机制可用：</p><ol><li>Linux命名空间<br>它使每个进程只看到自己的系统视图（文件、进程、网络端口、主机名等）</li><li>Linux控制组（cgroups）<br>它限制了进程能使用的资源（cpu、内存、网络带宽等）</li></ol><h1 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a>Pod</h1><p>Kubernetes中的基本构成模块,基本操作单元。<br>一个pod就是一组紧密管理的容器（也可能是一个）,它们一起运行在一个工作节点上，及同一个Linux命名空间中。<br>一个pod就像一个独立的逻辑机器，它有独立的IP、主机名、进程等。</p><h2 id="区别于容器"><a href="#区别于容器" class="headerlink" title="区别于容器"></a>区别于容器</h2><p>容器被设计成每个容器中只能运行一个进程，pod中可以运行多个容器（便于相关服务部署在一起）。</p><p>容器间彼此完全隔离，pod中的容器可以共享相同的命名空间，可以共享相同的主机名和端口,同样的这些容器在相同的IPC命名空间下运行，因此可以使用IPC进行通信。</p><p>可以通过localhost与同一个pod中的其它容器进行通讯。</p><h2 id="平坦pod间网络"><a href="#平坦pod间网络" class="headerlink" title="平坦pod间网络"></a>平坦pod间网络</h2><p>Kubernetes集群中的所有pod都是在同一个共享网络地址空间中。所以每个pod都可以通过访问其它pod 的ip地址实现相互访问。（它们之间没有NAT）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods &#x2F;&#x2F;列出pod</span><br><span class="line">kubectl describe pod pod-name &#x2F;&#x2F;查看具体pod的详细信息</span><br><span class="line">kubectl get pod my-pode-name -o yaml &#x2F;&#x2F; 查看pod的当前yaml配置</span><br></pre></td></tr></table></figure><h2 id="yaml文件重要参数"><a href="#yaml文件重要参数" class="headerlink" title="yaml文件重要参数"></a>yaml文件重要参数</h2><ul><li>metadata<br>包括名称、命名空间、标签和关于容器的其它信息</li><li>spec<br>包括pod的实际说明， 例如pod的容器、卷和其它数据</li><li>status<br>运行中的pod的当前信息，例如pod所处的条件、每个容器的描述和状态，以及内部ip和其它信息</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl explain pod. &#x2F;&#x2F; 查看可能的api字段</span><br><span class="line">kubectl explain pod.spec</span><br></pre></td></tr></table></figure><h2 id="以YAML或JSON描述文件船舰pod"><a href="#以YAML或JSON描述文件船舰pod" class="headerlink" title="以YAML或JSON描述文件船舰pod"></a>以YAML或JSON描述文件船舰pod</h2><p>查看现有pod的yaml描述文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@node1:&#x2F;home&#x2F;richey# kubectl get pod kubia-6wgzj -o yaml</span><br></pre></td></tr></table></figure><p><img src="https://blog-pic-1254088127.picsh.myqcloud.com/k8s-yaml-metadata.png" alt="k8s-yaml-metadata"></p><p><img src="https://blog-pic-1254088127.picsh.myqcloud.com/k8s-yaml-spec01.png" alt="k8s-yaml-spec01"></p><h2 id="访问pod"><a href="#访问pod" class="headerlink" title="访问pod"></a>访问pod</h2><p>pod有自己的IP，但是这个ip是集群内部的，不能从集群外部访问。</p><p>需要创建服务对象公开pod，服务对象是一个特殊的LoadBalanceer类型的服务，可以通过服务对外共该的ip访问pod。</p><h1 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h1><p>pod通常需要对来自集群内部的其它pod，以及来自集群外部的http请求作出响应。</p><p>pod需要一种寻找其它pod的方法来使用其它pod提供的服务，service就是用来做这件事的。</p><p>service服务是一种为一组功能相同的pod提供单一不变接入点的资源，当服务存在时它的ip和端口不会变。</p><p>服务对pod的请求是负载均衡的。</p><h2 id="列出所有服务"><a href="#列出所有服务" class="headerlink" title="列出所有服务"></a>列出所有服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl get svc &#x2F;&#x2F;列出所有服务，-o wide 可查看详细数据</span><br><span class="line">&#x2F;&#x2F; 详细数据中的EXTERNAL-IP 是对外开放的ip</span><br></pre></td></tr></table></figure><h2 id="通过kubectl-expose创建服务"><a href="#通过kubectl-expose创建服务" class="headerlink" title="通过kubectl expose创建服务"></a>通过kubectl expose创建服务</h2><h2 id="通过YAML描述文件创建服务"><a href="#通过YAML描述文件创建服务" class="headerlink" title="通过YAML描述文件创建服务"></a>通过YAML描述文件创建服务</h2><p>创建kubia-svc.yaml文件</p><p><img src="https://blog-pic-1254088127.picsh.myqcloud.com/k8s-svc-yaml.png" alt="k8s-svc-yaml"></p><p>使用kubectl create 创建service</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f kubia-svc.yaml</span><br><span class="line">service&#x2F;kubia created</span><br><span class="line">root@node1:&#x2F;opt&#x2F;yaml&#x2F;demo# kubectl get svc</span><br><span class="line">NAME         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE</span><br><span class="line">kubernetes   ClusterIP   10.96.0.1       &lt;none&gt;        443&#x2F;TCP   4d16h</span><br><span class="line">kubia        ClusterIP   10.111.170.56   &lt;none&gt;        80&#x2F;TCP    6s</span><br></pre></td></tr></table></figure><p>可以发现新的kubia服务已经被分配了一个内部的集群ip，因为只有集群内部ip，所以只能在集群内被访问。</p><h2 id="在已有的pod中运行命令请求service"><a href="#在已有的pod中运行命令请求service" class="headerlink" title="在已有的pod中运行命令请求service"></a>在已有的pod中运行命令请求service</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@node1:&#x2F;opt&#x2F;yaml&#x2F;demo# kubectl exec kubia-6wgzj -- curl -s http:&#x2F;&#x2F;10.111.170.56</span><br><span class="line">You&#39;ve hit kubia-6wgzj</span><br></pre></td></tr></table></figure><blockquote><p>– 代表kubectl命令的结束。两个横杠之后是要要pod内部执行的命令，如果要执行的命令没有以横杠开始的参数，双横杠也不是必须的</p></blockquote><h2 id="设置服务上的会话亲和性"><a href="#设置服务上的会话亲和性" class="headerlink" title="设置服务上的会话亲和性"></a>设置服务上的会话亲和性</h2><p>默认情况下服务会将请求随机执行pod中任意一个，即使请求来自同一个客户端。</p><p>如果我们希望特定客户端的请求每次都指向同一个pod，可以设置服务的sessionAffinity属性为ClientIP（而不是None，None是默认值）。</p><p>Kubernetes仅支持None和ClientIP两种形式的会话亲和性，不支持cookie的会话亲和性选项，因为Kubernetes的服务基于4层网络协议，不在HTTP层面工作。</p><h2 id="同一个服务暴露多个端口"><a href="#同一个服务暴露多个端口" class="headerlink" title="同一个服务暴露多个端口"></a>同一个服务暴露多个端口</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">    name: kubia</span><br><span class="line">spec:</span><br><span class="line">    #sessionAffinity: ClientIP</span><br><span class="line">    ports:</span><br><span class="line">    - name: http</span><br><span class="line">      port: 80</span><br><span class="line">      targetPort: 8080</span><br><span class="line">    - name: https</span><br><span class="line">      port: 443</span><br><span class="line">      targetPort: 8443</span><br><span class="line">    selector:</span><br><span class="line">      run: kubia</span><br></pre></td></tr></table></figure><p>在创建一个有多个端口的服务时，必须给端口指定名字。</p><h2 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h2><h3 id="通过环境变量发现服务"><a href="#通过环境变量发现服务" class="headerlink" title="通过环境变量发现服务"></a>通过环境变量发现服务</h3><p>pod启动时Kubernetes会初始化一系列的环境变量指向现在存在的服务，如果service早于pod创建，则pod上的<br>进程可以根据环境变量获得服务的ip和port</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">root@node1:&#x2F;opt&#x2F;yaml&#x2F;demo# kubectl get pods</span><br><span class="line">NAME          READY   STATUS    RESTARTS   AGE</span><br><span class="line">kubia-6wgzj   1&#x2F;1     Running   1          3d16h</span><br><span class="line">kubia-j7q4s   1&#x2F;1     Running   0          167m</span><br><span class="line">kubia-rxndz   1&#x2F;1     Running   0          167m</span><br><span class="line">root@node1:&#x2F;opt&#x2F;yaml&#x2F;demo# kubectl delete pod --all</span><br><span class="line">pod &quot;kubia-6wgzj&quot; deleted</span><br><span class="line">pod &quot;kubia-j7q4s&quot; deleted</span><br><span class="line">pod &quot;kubia-rxndz&quot; deleted</span><br><span class="line">root@node1:&#x2F;opt&#x2F;yaml&#x2F;demo# kubectl get pod</span><br><span class="line">NAME          READY   STATUS        RESTARTS   AGE</span><br><span class="line">kubia-6vf4l   1&#x2F;1     Running       0          32s</span><br><span class="line">kubia-97c5t   1&#x2F;1     Running       0          32s</span><br><span class="line">kubia-wk7b4   1&#x2F;1     Running       0          32s</span><br><span class="line">root@node1:&#x2F;opt&#x2F;yaml&#x2F;demo# kubectl exec kubia-6vf4l env</span><br><span class="line">...</span><br><span class="line">KUBIA_SERVICE_PORT&#x3D;80</span><br><span class="line">KUBIA_SERVICE_HOST&#x3D;10.99.41.214</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="通过DNS发现服务"><a href="#通过DNS发现服务" class="headerlink" title="通过DNS发现服务"></a>通过DNS发现服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@node1:&#x2F;opt&#x2F;yaml&#x2F;demo# kubectl get pods -n kube-system |grep coredns</span><br><span class="line">coredns-bccdc95cf-2jznl         0&#x2F;1     Running       137        3d16h</span><br><span class="line">coredns-bccdc95cf-zv7vs         1&#x2F;1     Running       1          3d16h</span><br></pre></td></tr></table></figure><p>k8s集群的系统命名空间下默认启动了运行dns服务的pod，在集群中的其它pod都会默认你使用其作为dns（Kubeernetes通过修改每个容器的/etc/resolv.conf文件实现）。</p><p>运行在pod上的进程DNS查询都会在K8s自身的DNF服务响应，该服务知道系统中运行的所有服务.</p><p>pod是否使用内部的DNS服务器是根据pod中spec的dnsPolicy属性决定的</p><h3 id="通过FQDN（全限定域名）连接服务"><a href="#通过FQDN（全限定域名）连接服务" class="headerlink" title="通过FQDN（全限定域名）连接服务"></a>通过FQDN（全限定域名）连接服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl exec kubia-6vf4l -- curl -s http:&#x2F;&#x2F;kubia.default.svc.cluster.local</span><br></pre></td></tr></table></figure><p>kubia是服务名，default是命名空间，svc.cluster.local是在所有集群本地服务名称中使用的可配置集群域后缀。</p><h3 id="无法ping通服务ip"><a href="#无法ping通服务ip" class="headerlink" title="无法ping通服务ip"></a>无法ping通服务ip</h3><p>服务的ip是一个虚拟ip，只有与服务端口结合时才有意义，这个ip是无法ping通的。</p><h2 id="endpoint-可解决访问集群外服务"><a href="#endpoint-可解决访问集群外服务" class="headerlink" title="endpoint(可解决访问集群外服务)"></a>endpoint(可解决访问集群外服务)</h2><p>服务并不是和pod直接相连的，有一种资源介于两者之间，它就是Endpoint资源。</p><p>运行kubectl describe svc kubia，可以看到endpoint维护了一个ip和端口的列表，当客户端连接到服务时，服务代理选择这些ip端口中的一个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">root@node1:&#x2F;opt&#x2F;yaml&#x2F;demo# kubectl get svc</span><br><span class="line">NAME         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE</span><br><span class="line">kubernetes   ClusterIP   10.96.0.1       &lt;none&gt;        443&#x2F;TCP          18h</span><br><span class="line">kubia        ClusterIP   10.111.206.98   &lt;none&gt;        80&#x2F;TCP,443&#x2F;TCP   19m</span><br><span class="line">root@node1:&#x2F;opt&#x2F;yaml&#x2F;demo# kubectl describe svc kubia</span><br><span class="line">Name:              kubia</span><br><span class="line">Namespace:         default</span><br><span class="line">Labels:            &lt;none&gt;</span><br><span class="line">Annotations:       &lt;none&gt;</span><br><span class="line">Selector:          run&#x3D;kubia</span><br><span class="line">Type:              ClusterIP</span><br><span class="line">IP:                10.111.206.98</span><br><span class="line">Port:              http  80&#x2F;TCP</span><br><span class="line">TargetPort:        8080&#x2F;TCP</span><br><span class="line">Endpoints:         192.169.1.21:8080,192.169.1.22:8080,192.169.2.50:8080</span><br><span class="line">Port:              https  443&#x2F;TCP</span><br><span class="line">TargetPort:        8443&#x2F;TCP</span><br><span class="line">Endpoints:         192.169.1.21:8443,192.169.1.22:8443,192.169.2.50:8443</span><br><span class="line">Session Affinity:  None</span><br><span class="line">Events:            &lt;none&gt;</span><br><span class="line">root@node1:&#x2F;opt&#x2F;yaml&#x2F;demo# kubectl get pod -o wide</span><br><span class="line">NAME          READY   STATUS    RESTARTS   AGE   IP             NODE    NOMINATED NODE   READINESS GATES</span><br><span class="line">kubia-v29qq   1&#x2F;1     Running   0          25m   192.169.1.21   node2   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kubia-xdlzm   1&#x2F;1     Running   0          25m   192.169.2.50   node3   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kubia-zblws   1&#x2F;1     Running   0          25m   192.169.1.22   node2   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure><p>查看endpoints资源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@node1:&#x2F;opt&#x2F;yaml&#x2F;demo# kubectl get endpoints</span><br><span class="line">NAME         ENDPOINTS                                                           AGE</span><br><span class="line">kubernetes   172.16.250.128:6443                                                 18h</span><br><span class="line">kubia        192.169.1.21:8443,192.169.1.22:8443,192.169.2.50:8443 + 3 more...   24m</span><br></pre></td></tr></table></figure><h3 id="手动配置endpoint（访问外部服务的方法1）"><a href="#手动配置endpoint（访问外部服务的方法1）" class="headerlink" title="手动配置endpoint（访问外部服务的方法1）"></a>手动配置endpoint（访问外部服务的方法1）</h3><p>思考一个问题：为什么要有有一个独立的endpoint去维护ip端口列表？</p><p>enpoint与服务解耦后，可以分别手动配置和更新它们。</p><p>如果创建了不含pod选择器的服务，Kubernetes将不会创建endpoint资源，因为缺少选择器，服务也不知道应该访问哪些pod，<br>也就不知道如何创建endpoint。这种情况下可以手动创建Endpoint资源来指定服务的enpoint列表。</p><ol><li>创建没有选择器的服务</li></ol><p>external-service.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: external-service</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 80</span><br></pre></td></tr></table></figure><p>创建svc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@node1:&#x2F;opt&#x2F;yaml&#x2F;demo# kubectl create -f external-service.yaml</span><br><span class="line">service&#x2F;external-service created</span><br></pre></td></tr></table></figure><ol start="2"><li>创建Endpoint资源</li></ol><p>external-service-endpoints.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Endpoints</span><br><span class="line">metadata:</span><br><span class="line">  name: external-service</span><br><span class="line">subsets:</span><br><span class="line">  - addresses:</span><br><span class="line">    - ip: 11.11.11.11</span><br><span class="line">    - ip: 22.22.22.22</span><br><span class="line">    ports:</span><br><span class="line">    - port: 80</span><br></pre></td></tr></table></figure><p>创建Endpoints</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@node1:&#x2F;opt&#x2F;yaml&#x2F;demo# kubectl create -f external-service-endpoints.yaml </span><br><span class="line">endpoints&#x2F;external-service created</span><br><span class="line">root@node1:&#x2F;opt&#x2F;yaml&#x2F;demo# kubectl get endpoints external-service</span><br><span class="line">NAME               ENDPOINTS                       AGE</span><br><span class="line">external-service   11.11.11.11:80,22.22.22.22:80   55s</span><br></pre></td></tr></table></figure><p><img src="https://blog-pic-1254088127.picsh.myqcloud.com/k8s-endpoints.png" alt="k8s-endpoints"></p><p>我们可以在不改变服务ip的情况下，去掉服务的标签选择器，修改endpoint资源，从而改变服务的实际访问。</p><h3 id="为外部服务创建别名（访问外部服务的方法2）"><a href="#为外部服务创建别名（访问外部服务的方法2）" class="headerlink" title="为外部服务创建别名（访问外部服务的方法2）"></a>为外部服务创建别名（访问外部服务的方法2）</h3><p>修改service的spec.type和spec.externalName后通过FQDN的方式访问服务将被代理到externalName指定的域名</p><p>external-service-externalname.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">appVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: external-service</span><br><span class="line">spec:</span><br><span class="line">  type: ExternalName</span><br><span class="line">  externalName: 10000hour.top&#x2F;api</span><br><span class="line">  ports:</span><br><span class="line">  - port: 80</span><br></pre></td></tr></table></figure><p>如上修改后pod可以通过external-service.default.svc.cluster.local域名连接到外部服务，而不是使用实际的FQDN.</p><p>ExternalName服务仅在DNS级别实施，其为服务创建了简单的CNAME DNS记录，注意CNAME指向完全限定名的域名而不是数字ip地址。</p><h2 id="Service-type类型"><a href="#Service-type类型" class="headerlink" title="Service type类型"></a>Service type类型</h2><h3 id="ClusterIP"><a href="#ClusterIP" class="headerlink" title="ClusterIP"></a>ClusterIP</h3><p>Kubernetes 的默认服务类型。通过集群的内部 IP 暴露服务，选择该值，服务只能够在集群内部可以访问。使用ClusterIP时，如果想要对外暴露服务可以使用kube-proxy</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">    name: kubia</span><br><span class="line">spec:</span><br><span class="line">    #sessionAffinity: ClientIP</span><br><span class="line">    type: ClusterIP</span><br><span class="line">    ports:</span><br><span class="line">    - name: http</span><br><span class="line">      port: 80</span><br><span class="line">      targetPort: 8080</span><br><span class="line">    selector:</span><br><span class="line">      run: kubia</span><br></pre></td></tr></table></figure><p>查看svc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@node1:&#x2F;opt&#x2F;yaml&#x2F;demo# kubectl get svc kubia</span><br><span class="line">NAME    TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)   AGE</span><br><span class="line">kubia   ClusterIP   10.104.249.210   &lt;none&gt;        80&#x2F;TCP    83m</span><br></pre></td></tr></table></figure><p>10.104.249.210是集群内的一个ip，集群外是无法访问的。</p><h3 id="1-将服务的类型设置成NodePort"><a href="#1-将服务的类型设置成NodePort" class="headerlink" title="1.将服务的类型设置成NodePort"></a>1.将服务的类型设置成NodePort</h3><p>如果将type设置成NodePort，则会在集群的每一个节点上打开一个端口，并将该端口收到的流量重定向到基础服务.简言之，可以通过集群任意节点的IP+端口访问到该服务。</p><p>kubia-svc-nodeport.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">    name: kubia</span><br><span class="line">spec:</span><br><span class="line">    #sessionAffinity: ClientIP</span><br><span class="line">    type: NodePort</span><br><span class="line">    ports:</span><br><span class="line">    - name: http</span><br><span class="line">      port: 80</span><br><span class="line">      targetPort: 8080</span><br><span class="line">      nodePort: 30123</span><br><span class="line">    selector:</span><br><span class="line">      run: kubia</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@node1:&#x2F;opt&#x2F;yaml&#x2F;demo# kubectl create -f kubia-svc-nodeport.yaml</span><br><span class="line">service&#x2F;kubia created</span><br><span class="line">root@node1:&#x2F;opt&#x2F;yaml&#x2F;demo# kubectl get svc</span><br><span class="line">NAME         TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">kubernetes   ClusterIP   10.96.0.1        &lt;none&gt;        443&#x2F;TCP        86m</span><br><span class="line">kubia        NodePort    10.102.109.144   &lt;none&gt;        80:30123&#x2F;TCP   4s</span><br></pre></td></tr></table></figure><p>如果这里不主动指定nodePort，Kubernetes将在指定的范围内分配端口（默认值：30000-32767）。</p><p><img src="http://assets.processon.com/chart_image/5c75503fe4b0f9fba693aa53.png" alt="外部客户端通过nodepord访问服务"></p><h3 id="2-将服务的类型设置成LoadBanance"><a href="#2-将服务的类型设置成LoadBanance" class="headerlink" title="2.将服务的类型设置成LoadBanance"></a>2.将服务的类型设置成LoadBanance</h3><p>负载均衡器拥有独一无二的可以公开访问的ip地址，并将所有连接重定向到服务，LoadBalancer一般都是公有云厂商提供，不需要自建。</p><p>此类型需要环境支持Load Badancer，否则不会调用负载均衡器，这时服务表现的像一个NodePort服务.因为Load Badancer是NodeProt服务的扩展。</p><p>kubia-svc-loadbalancer.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">    name: kubia</span><br><span class="line">spec:</span><br><span class="line">    #sessionAffinity: ClientIP</span><br><span class="line">    type: LoadBalancer</span><br><span class="line">    ports:</span><br><span class="line">    - name: http</span><br><span class="line">      port: 80</span><br><span class="line">      targetPort: 8080</span><br><span class="line">      nodePort: 30123</span><br><span class="line">    selector:</span><br><span class="line">      run: kubia</span><br></pre></td></tr></table></figure><h3 id="3-创建一个Ingress资源"><a href="#3-创建一个Ingress资源" class="headerlink" title="3.创建一个Ingress资源"></a>3.创建一个Ingress资源</h3><p>为什么需要Ingress</p><ul><li><p>每个LoadBanalcer服务都需要自己的负载均衡器以及独有的共有IP，而Ingress只需要一个公网IP就能为许多服务提供访问。当客户端向Ingress发送HTTP请求时，Ingress会根据请求的主机名和路径决定请求转发到的服务。</p></li><li><p>Ingress在HTTP层工作，可以实现一些服务不能实现的功能，比如基于cookie的会话亲和性等。</p></li></ul><p><img src="http://assets.processon.com/chart_image/5c75517be4b0f0908aa32b64.png" alt="ingress"></p><p>只有Ingress控制器在集群中运行，Ingress资源才能正常工作。不同的K8s环境使用不同的控制器实现，但有些并不提供默认控制器。</p><p>Kubernetes 作为一个项目，目前支持和维护 AWS， GCE 和 nginx Ingress 控制器。</p><p>可以在集群中部署任意数量的 ingress 控制器。 创建 ingress 时，应该使用适当的 ingress.class 注解每个Ingress 以表明在集群中如果有多个 Ingress 控制器时，应该使用哪个 Ingress 控制器.如果不定义 ingress.class，云提供商可能使用默认的 Ingress 控制器.</p><h4 id="部署nginx-ingress控制器"><a href="#部署nginx-ingress控制器" class="headerlink" title="部署nginx ingress控制器"></a>部署nginx ingress控制器</h4><p>官网：<a href="https://kubernetes.github.io/ingress-nginx/deploy/" target="_blank" rel="noopener">https://kubernetes.github.io/ingress-nginx/deploy/</a></p><p>默认配置从所有名称空间监视Ingress对象。</p><p>若要更改此行为，请使用该标志–watch-namespace将范围限制为特定的名称空间。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;下载mandatory.yaml</span><br><span class="line">wget https:&#x2F;&#x2F;github.com&#x2F;kubernetes&#x2F;ingress-nginx&#x2F;blob&#x2F;nginx-0.30.0&#x2F;deploy&#x2F;static&#x2F;mandatory.yaml</span><br><span class="line"></span><br><span class="line">root@node1:&#x2F;opt&#x2F;yaml&#x2F;demo# kubectl apply -f mandatory.yaml</span><br><span class="line">namespace&#x2F;ingress-nginx created</span><br><span class="line">configmap&#x2F;nginx-configuration created</span><br><span class="line">configmap&#x2F;tcp-services created</span><br><span class="line">configmap&#x2F;udp-services created</span><br><span class="line">serviceaccount&#x2F;nginx-ingress-serviceaccount created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io&#x2F;nginx-ingress-clusterrole created</span><br><span class="line">role.rbac.authorization.k8s.io&#x2F;nginx-ingress-role created</span><br><span class="line">rolebinding.rbac.authorization.k8s.io&#x2F;nginx-ingress-role-nisa-binding created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io&#x2F;nginx-ingress-clusterrole-nisa-binding created</span><br><span class="line">deployment.apps&#x2F;nginx-ingress-controller created</span><br><span class="line">limitrange&#x2F;ingress-nginx created</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;下载service-nodeport.yaml</span><br><span class="line">wget https:&#x2F;&#x2F;github.com&#x2F;kubernetes&#x2F;ingress-nginx&#x2F;blob&#x2F;nginx-0.30.0&#x2F;deploy&#x2F;static&#x2F;provider&#x2F;baremetal&#x2F;service-nodeport.yaml</span><br><span class="line">root@node1:&#x2F;opt&#x2F;yaml&#x2F;demo# kubectl apply -f service-nodeport.yaml</span><br><span class="line">service&#x2F;ingress-nginx created</span><br></pre></td></tr></table></figure><p>验证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@node1:&#x2F;opt&#x2F;yaml&#x2F;demo# kubectl -n ingress-nginx get pods</span><br><span class="line">NAME                                        READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-ingress-controller-7fcf8df75d-wbssz   1&#x2F;1     Running   0          96s</span><br><span class="line"></span><br><span class="line">root@node1:&#x2F;opt&#x2F;yaml&#x2F;demo# kubectl -n ingress-nginx get svc</span><br><span class="line">NAME            TYPE       CLUSTER-IP       EXTERNAL-IP   PORT(S)                      AGE</span><br><span class="line">ingress-nginx   NodePort   10.100.133.178   &lt;none&gt;        80:30327&#x2F;TCP,443:31783&#x2F;TCP   16s</span><br></pre></td></tr></table></figure><p>访问测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@node1:&#x2F;opt&#x2F;yaml&#x2F;demo# curl http:&#x2F;&#x2F;10.100.133.178</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;404 Not Found&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;404 Not Found&lt;&#x2F;h1&gt;&lt;&#x2F;center&gt;</span><br><span class="line">&lt;hr&gt;&lt;center&gt;nginx&#x2F;1.17.8&lt;&#x2F;center&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h4 id="创建Ingress资源"><a href="#创建Ingress资源" class="headerlink" title="创建Ingress资源"></a>创建Ingress资源</h4><p>上面我们已经常见了Ingress控制器，并且验证运行，因此现在可以创建一个Ingress资源。</p><p>kubia-ingress.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: extensions&#x2F;v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: kubia</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: kubia.example.com</span><br><span class="line">  - http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: &#x2F;</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: kubia-nodeport</span><br><span class="line">          servicePort: 80</span><br></pre></td></tr></table></figure><p>创建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@node1:&#x2F;opt&#x2F;yaml&#x2F;demo# kubectl apply -f kubia-ingress.yaml</span><br><span class="line">ingress.extensions&#x2F;kubia created</span><br></pre></td></tr></table></figure><p><img src="https://blog-pic-1254088127.picsh.myqcloud.com/k8s-ingress-yaml.png" alt="ingress-yaml"></p><p>获取Ingress的IP地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@node1:&#x2F;opt&#x2F;yaml&#x2F;demo# kubectl get ingresses</span><br><span class="line">NAME    HOSTS               ADDRESS          PORTS   AGE</span><br><span class="line">kubia   kubia.example.com   10.100.133.178   80      69s</span><br></pre></td></tr></table></figure><p>拿到Ingress的ip后，我们要确定在Ingress中配置的host（kubia.example.com）要指向Ingress的IP地址。</p><p>可以在DNS服务中将kubia.example.com解析为10.100.133.178，或者在/etc/hosts文件中加一行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10.100.133.178 kubia.example.com</span><br></pre></td></tr></table></figure><p>现在可以通过Ingress访问pod了</p><p><img src="http://assets.processon.com/chart_image/5c75503fe4b0f9fba693aa73.png" alt="ingress工作原理"></p><h1 id="RS"><a href="#RS" class="headerlink" title="RS"></a>RS</h1><p>pod代表Kubernetes中最小的部署单元，在实际场景，我们希望部署的资源可以自动保持运行，并且保持健康，要做到这一点我们几乎不会直接创建pod<br>，而是创建ReplicaSet（老版本是ReplicationController）或Deployment这样的资源，接着由它们来创建并管理实际的pod</p><h2 id="存活探针"><a href="#存活探针" class="headerlink" title="存活探针"></a>存活探针</h2><p>Kubernetes可以通过存活探针（liveness probe）检查容器是否还在运行。可以为pod中的每个容器单独指定探针，Kubernetes会定期执行探针，如果探测失败，将重启容器。</p><p>三种探针</p><ul><li>HTTP GET探针对容器的IP地址（指定端口和路径）执行HTTP GET请求。</li><li>TCP套接字探针尝试与容器指定端口建立TCP连接。如果连接建立成功，则探测成功。</li><li>Exec 探针在容器内执行任意命令，并检查命令的退出状态码，如果状态码是0，则探测成功。</li></ul><p>创建基于HTTP的存活探针</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: kubia-liveness</span><br><span class="line">  namespace: qa</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - image: luksa&#x2F;kubia-unhealthy</span><br><span class="line">    name: kubia</span><br><span class="line">    livenessProbe:</span><br><span class="line">      httpGet:</span><br><span class="line">        path: &#x2F;</span><br><span class="line">        port: 8080</span><br></pre></td></tr></table></figure><p>这里就定义了一个http get存活探针</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@node1:&#x2F;opt&#x2F;yaml&#x2F;demo# kubectl apply -f kubia-pod.yaml</span><br><span class="line">pod&#x2F;kubia-liveness created</span><br><span class="line">root@node1:&#x2F;opt&#x2F;yaml&#x2F;demo# kubectl get pods -n qa</span><br><span class="line">NAME             READY   STATUS    RESTARTS   AGE</span><br><span class="line">kubia-liveness   1&#x2F;1     Running   1          2m7s</span><br></pre></td></tr></table></figure><p>kubia-unhealthy服务健康检查每调用5次就会失败一次，所以这里过2分钟会发现服务被重启过一次了。<br>通过kubectl describe pod 命令可以看到容器当期的状态，重启了多少此，上次被终止的原因等等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl describe pod kubia-liveness</span><br></pre></td></tr></table></figure><p><img src="https://blog-pic-1254088127.picsh.myqcloud.com/k8s-health-http.png" alt="k8s-health-http"></p><p>我们还可以配置探针的delay（延迟）、timeout（超时）、period（周期）等,可以通过kubectl explain命令查看yaml详细配置说明</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@node1:&#x2F;opt&#x2F;yaml&#x2F;demo# kubectl explain pod.spec.containers.livenessProbe</span><br></pre></td></tr></table></figure><ul><li>initialDelaySeconds 表示容器启动后延迟多久进行检测，默认0，及容器启动后即开始检测。</li><li>timeoutSeconds 表示超时时间，超时未响应则检测失败</li><li>periodSeconds 表示多久检测一次</li></ul><p>在生成环境中运行的pod一定要定义一个存活探针。没有探针的话Kubernetes无法知道你的应用是否存活。</p><h2 id="ReplicaSet"><a href="#ReplicaSet" class="headerlink" title="ReplicaSet"></a>ReplicaSet</h2><p>ReplicaSet是一种Kubernetes资源，它可以确保pod始终保持运行状态，如果pod因为任何原因消失（比如节点从集群中消失，或者pod从节点中驱逐），<br>RS会注意缺少了pod，并创建代替。</p><p>一般而言RS旨在创建和管理一个pod 的多个副本，RS的工作是确保标签的数量始终与其标签选择器匹配，如果不匹配，rs将根据所需，采取适当的操作来协调pod 的数量。</p><p>RS由3部份组成</p><ul><li>label selector 标签选择器，用于确认rs作用域中有哪些pod</li><li>replica count 副本个数，指定运行的pod数量</li><li>pod template pod模板，用于创建新的pod副本</li></ul><p>RS可以轻松实现pod的水平伸缩</p><h2 id="创建ReplicaSet"><a href="#创建ReplicaSet" class="headerlink" title="创建ReplicaSet"></a>创建ReplicaSet</h2><p>kubia-rs.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: apps&#x2F;v1</span><br><span class="line">kind: ReplicaSet</span><br><span class="line">metadata:</span><br><span class="line">  name: kubia</span><br><span class="line">  labels:</span><br><span class="line">    run: kubia</span><br><span class="line">spec:</span><br><span class="line">  # modify replicas according to your case</span><br><span class="line">  replicas: 3</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      run: kubia</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        run: kubia</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: kubia</span><br><span class="line">        image: luksa&#x2F;kubia</span><br></pre></td></tr></table></figure><p><img src="https://blog-pic-1254088127.picsh.myqcloud.com/k8s-rs-01.png" alt="k8s-rs"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@node1:&#x2F;opt&#x2F;yaml&#x2F;demo# kubectl create -f kubia-rs.yaml</span><br><span class="line">replicaset.apps&#x2F;kubia created</span><br><span class="line">root@node1:&#x2F;opt&#x2F;yaml&#x2F;demo# kubectl get pods -o wide --show-labels</span><br><span class="line">NAME          READY   STATUS    RESTARTS   AGE     IP             NODE    NOMINATED NODE   READINESS GATES   LABELS</span><br><span class="line">kubia-f5vv9   1&#x2F;1     Running   0          3m48s   192.169.1.10   node2   &lt;none&gt;           &lt;none&gt;            run&#x3D;kubia</span><br><span class="line">kubia-qd2sl   1&#x2F;1     Running   0          3m48s   192.169.2.37   node3   &lt;none&gt;           &lt;none&gt;            run&#x3D;kubia</span><br><span class="line">kubia-t7krn   1&#x2F;1     Running   0          2m40s   192.169.1.11   node2   &lt;none&gt;           &lt;none&gt;            run&#x3D;kubia</span><br></pre></td></tr></table></figure><h2 id="模拟节点故障"><a href="#模拟节点故障" class="headerlink" title="模拟节点故障"></a>模拟节点故障</h2><p>下面我们模拟一个节点故障，从网络中端口其中一个节点，使用sudo ifconfig eth0 down 关闭器网络接口。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 关闭node2的网络</span><br><span class="line">root@node2:&#x2F;home&#x2F;richey# ifconfig ens33 down</span><br><span class="line"># 这时候node2节点已经NotReady不可用了 </span><br><span class="line">root@node1:&#x2F;opt&#x2F;yaml&#x2F;demo# kubectl get nodes</span><br><span class="line">NAME    STATUS     ROLES    AGE   VERSION</span><br><span class="line">node1   Ready      master   11d   v1.15.2</span><br><span class="line">node2   NotReady   &lt;none&gt;   11d   v1.15.2</span><br><span class="line">node3   Ready      &lt;none&gt;   11d   v1.15.2</span><br><span class="line"></span><br><span class="line"># kubernetes在重新调用pod之前会等待一段时间（如果节点因为网络原因或kubelet重新启动而无法访问）。大概过了几分钟后node2节点上的rs才重新在其它节点启动新的pod</span><br><span class="line">root@node1:&#x2F;opt&#x2F;yaml&#x2F;demo# kubectl get pods -o wide --show-labels</span><br><span class="line">NAME          READY   STATUS        RESTARTS   AGE   IP             NODE    NOMINATED NODE   READINESS GATES   LABELS</span><br><span class="line">kubia-2fssn   1&#x2F;1     Running       0          29s   192.169.2.39   node3   &lt;none&gt;           &lt;none&gt;            run&#x3D;kubia</span><br><span class="line">kubia-f5vv9   1&#x2F;1     Terminating   0          13m   192.169.1.10   node2   &lt;none&gt;           &lt;none&gt;            run&#x3D;kubia</span><br><span class="line">kubia-jjnjw   1&#x2F;1     Running       0          29s   192.169.2.40   node3   &lt;none&gt;           &lt;none&gt;            run&#x3D;kubia</span><br><span class="line">kubia-qd2sl   1&#x2F;1     Running       0          13m   192.169.2.37   node3   &lt;none&gt;           &lt;none&gt;            run&#x3D;kubia</span><br><span class="line">kubia-t7krn   1&#x2F;1     Terminating   0          12m   192.169.1.11   node2   &lt;none&gt;           &lt;none&gt;            run&#x3D;kubia</span><br></pre></td></tr></table></figure><p>可以通过修改pod的标签让其脱离rs的控制，但是注意当我们修改 一个pod的标签时，rs将发现其管理的pod的数量变少，会新创建一个。</p><h2 id="修改pod模板"><a href="#修改pod模板" class="headerlink" title="修改pod模板"></a>修改pod模板</h2><p>rs的pod模板可以随时改，但是它只会影响改之后的pod，对以创建的pod无影响。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@node1:&#x2F;opt&#x2F;yaml&#x2F;demo# kubectl get rs</span><br><span class="line">NAME    DESIRED   CURRENT   READY   AGE</span><br><span class="line">kubia   3         3         3       27m</span><br><span class="line">root@node1:&#x2F;opt&#x2F;yaml&#x2F;demo# kubectl edit rs kubia</span><br><span class="line">\replicaset.extensions&#x2F;kubia edited</span><br></pre></td></tr></table></figure><h2 id="水平缩放pod"><a href="#水平缩放pod" class="headerlink" title="水平缩放pod"></a>水平缩放pod</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">root@node1:&#x2F;opt&#x2F;yaml&#x2F;demo# kubectl scale rs kubia --replicas&#x3D;10</span><br><span class="line">replicaset.extensions&#x2F;kubia scaled</span><br><span class="line">root@node1:&#x2F;opt&#x2F;yaml&#x2F;demo# kubectl get pods -o wide</span><br><span class="line">NAME          READY   STATUS              RESTARTS   AGE    IP             NODE    NOMINATED NODE   READINESS GATES</span><br><span class="line">kubia-5kgwl   0&#x2F;1     ContainerCreating   0          3s     &lt;none&gt;         node3   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kubia-6tr6n   1&#x2F;1     Running             0          2m7s   192.169.2.44   node3   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kubia-96hqx   0&#x2F;1     ContainerCreating   0          3s     &lt;none&gt;         node3   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kubia-bs7ft   1&#x2F;1     Running             0          2m7s   192.169.1.16   node2   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kubia-dhsh8   0&#x2F;1     ContainerCreating   0          3s     &lt;none&gt;         node3   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kubia-gk67n   0&#x2F;1     ContainerCreating   0          3s     &lt;none&gt;         node2   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kubia-h2srg   0&#x2F;1     ContainerCreating   0          3s     &lt;none&gt;         node2   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kubia-png2f   1&#x2F;1     Running             0          2m7s   192.169.1.17   node2   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kubia-w9pnp   0&#x2F;1     ContainerCreating   0          3s     &lt;none&gt;         node3   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kubia-xqlwh   0&#x2F;1     ContainerCreating   0          3s     &lt;none&gt;         node2   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure><h2 id="删除rs"><a href="#删除rs" class="headerlink" title="删除rs"></a>删除rs</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">root@node1:&#x2F;opt&#x2F;yaml&#x2F;demo# kubectl get pods</span><br><span class="line">NAME          READY   STATUS    RESTARTS   AGE</span><br><span class="line">kubia-5kgwl   1&#x2F;1     Running   0          2m42s</span><br><span class="line">kubia-6tr6n   1&#x2F;1     Running   0          4m46s</span><br><span class="line">kubia-96hqx   1&#x2F;1     Running   0          2m42s</span><br><span class="line">kubia-bs7ft   1&#x2F;1     Running   0          4m46s</span><br><span class="line">kubia-dhsh8   1&#x2F;1     Running   0          2m42s</span><br><span class="line">kubia-gk67n   1&#x2F;1     Running   0          2m42s</span><br><span class="line">kubia-h2srg   1&#x2F;1     Running   0          2m42s</span><br><span class="line">kubia-png2f   1&#x2F;1     Running   0          4m46s</span><br><span class="line">kubia-w9pnp   1&#x2F;1     Running   0          2m42s</span><br><span class="line">kubia-xqlwh   1&#x2F;1     Running   0          2m42s</span><br><span class="line">root@node1:&#x2F;opt&#x2F;yaml&#x2F;demo# kubectl delete rs kubia</span><br><span class="line">replicaset.extensions &quot;kubia&quot; deleted</span><br><span class="line">root@node1:&#x2F;opt&#x2F;yaml&#x2F;demo# kubectl get pods</span><br><span class="line">NAME          READY   STATUS        RESTARTS   AGE</span><br><span class="line">kubia-5kgwl   1&#x2F;1     Terminating   0          2m59s</span><br><span class="line">kubia-6tr6n   1&#x2F;1     Terminating   0          5m3s</span><br><span class="line">kubia-96hqx   1&#x2F;1     Terminating   0          2m59s</span><br><span class="line">kubia-bs7ft   1&#x2F;1     Terminating   0          5m3s</span><br><span class="line">kubia-dhsh8   1&#x2F;1     Terminating   0          2m59s</span><br><span class="line">kubia-gk67n   1&#x2F;1     Terminating   0          2m59s</span><br><span class="line">kubia-h2srg   1&#x2F;1     Terminating   0          2m59s</span><br><span class="line">kubia-png2f   1&#x2F;1     Terminating   0          5m3s</span><br><span class="line">kubia-w9pnp   1&#x2F;1     Terminating   0          2m59s</span><br><span class="line">kubia-xqlwh   1&#x2F;1     Terminating   0          2m59s</span><br></pre></td></tr></table></figure><p>删除rs后，rs管理的pod也会被删除,要想删除rc保持pod运行，可以加参数–cascade=false</p><h2 id="rs丰富的标签选择器"><a href="#rs丰富的标签选择器" class="headerlink" title="rs丰富的标签选择器"></a>rs丰富的标签选择器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@node1:&#x2F;opt&#x2F;yaml&#x2F;demo# kubectl explain rs.spec.selector</span><br><span class="line">...</span><br><span class="line">FIELDS:</span><br><span class="line">   matchExpressions&lt;[]Object&gt;</span><br><span class="line"></span><br><span class="line">   matchLabels&lt;map[string]string&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>可以看到selector有两种配置方式，matchLabels可以配置键值对的label，而matchExpressions有更丰富的表达力。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">selector:</span><br><span class="line">  matchExpressions:</span><br><span class="line">    - key: app</span><br><span class="line">      operator: In</span><br><span class="line">      values:</span><br><span class="line">        - kubia</span><br></pre></td></tr></table></figure><p>可以设置多个表达式，每个表达式都必须包含一个key，一个operator，并且可能还有一个value的列表（取决于运算符）。</p><p>有4种有效的运算符：</p><ul><li>In Label的值必须与其中一个values值匹配</li><li>NotIn Label的值与任何指定的values值不匹配 </li><li>Exists pod必须包含一个指定名称的标签（值不重要）。使用此运算符，不应该指定values值</li><li>DoesNotExist pod不得包含有指定名称的标签。使用此运算符，不应该指定values值</li></ul><p>如果指定了多个表达式，则这些表达式必须都满足才能匹配。</p><h1 id="DaemonSet"><a href="#DaemonSet" class="headerlink" title="DaemonSet"></a>DaemonSet</h1><h1 id="Job"><a href="#Job" class="headerlink" title="Job"></a>Job</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://assets.processon.com/chart_image/5c75503fe4b0f9fba693aa6b.png&quot; alt=&quot;k8s集群架构&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;比较容器和虚拟机&quot;&gt;&lt;a href=&quot;#比较容器和虚拟机&quot; 
      
    
    </summary>
    
    
      <category term="SRE" scheme="http://10000hours.top/categories/SRE/"/>
    
    
      <category term="K8s" scheme="http://10000hours.top/tags/K8s/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes01-命令速查</title>
    <link href="http://10000hours.top/2021/05/06/Kubernetes01-%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5/"/>
    <id>http://10000hours.top/2021/05/06/Kubernetes01-%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5/</id>
    <published>2021-05-05T16:00:00.000Z</published>
    <updated>2021-06-05T06:02:09.377Z</updated>
    
    <content type="html"><![CDATA[<h1 id="展示集群信息"><a href="#展示集群信息" class="headerlink" title="展示集群信息"></a>展示集群信息</h1><p>kubectl cluster-info</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@k8s-master-dev:&#x2F;home&#x2F;richey kubectl cluster-info</span><br><span class="line">Kubernetes master is running at https:&#x2F;&#x2F;192.168.1.217:8443</span><br><span class="line">KubeDNS is running at https:&#x2F;&#x2F;192.168.1.217:8443&#x2F;api&#x2F;v1&#x2F;namespaces&#x2F;kube-system&#x2F;services&#x2F;kube-dns:dns&#x2F;proxy</span><br></pre></td></tr></table></figure><h1 id="列出集群节点"><a href="#列出集群节点" class="headerlink" title="列出集群节点"></a>列出集群节点</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get nodes</span><br></pre></td></tr></table></figure><h1 id="查看节点的详细信息"><a href="#查看节点的详细信息" class="headerlink" title="查看节点的详细信息"></a>查看节点的详细信息</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl describe node node-name</span><br><span class="line">kubectl describe node &#x2F;&#x2F;不指定具体的node名，将展示所有的</span><br></pre></td></tr></table></figure><h1 id="为kubectl配置别名和命令补齐"><a href="#为kubectl配置别名和命令补齐" class="headerlink" title="为kubectl配置别名和命令补齐"></a>为kubectl配置别名和命令补齐</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alias k&#x3D;kubectl &#x2F;&#x2F;将此命令添加到~&#x2F;.bashrc文件中</span><br></pre></td></tr></table></figure><h1 id="列出pod"><a href="#列出pod" class="headerlink" title="列出pod"></a>列出pod</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods</span><br></pre></td></tr></table></figure><h1 id="查看pod的yaml文件"><a href="#查看pod的yaml文件" class="headerlink" title="查看pod的yaml文件"></a>查看pod的yaml文件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod my-pode-name -o yaml  &#x2F;&#x2F;通过 -o yaml参数</span><br></pre></td></tr></table></figure><h1 id="查看pod日志"><a href="#查看pod日志" class="headerlink" title="查看pod日志"></a>查看pod日志</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@node1:&#x2F;opt&#x2F;yaml&#x2F;demo# kubectl get pods</span><br><span class="line">NAME          READY   STATUS    RESTARTS   AGE</span><br><span class="line">kubia-6wgzj   1&#x2F;1     Running   1          3d14h</span><br><span class="line">kubia-j7q4s   1&#x2F;1     Running   0          88m</span><br><span class="line">kubia-rxndz   1&#x2F;1     Running   0          88m</span><br><span class="line">root@node1:&#x2F;opt&#x2F;yaml&#x2F;demo# kubectl logs -f --tail 100 kubia-j7q4s</span><br><span class="line">Kubia server starting...</span><br></pre></td></tr></table></figure><p>当健康检查失败，容器被重启后，看到的日志是当前容器的，如果我们想看前一个容器的日志，可以通过添加<br>–previous选项来完成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl logs -f --tail 100 kubia-j7q4s  --previous</span><br></pre></td></tr></table></figure><h1 id="创建pod时指定标签"><a href="#创建pod时指定标签" class="headerlink" title="创建pod时指定标签"></a>创建pod时指定标签</h1><p>在yaml文件中指定label，可以指定多个（多行）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">metadata:</span><br><span class="line">  creationTimestamp: &quot;2021-05-29T07:50:51Z&quot;</span><br><span class="line">  generateName: kubia-</span><br><span class="line">  labels:</span><br><span class="line">    run: kubia</span><br><span class="line">  name: kubia-6vf4l</span><br><span class="line">  namespace: default</span><br></pre></td></tr></table></figure><h1 id="查看pod标签"><a href="#查看pod标签" class="headerlink" title="查看pod标签"></a>查看pod标签</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root@node1:&#x2F;home&#x2F;richey# kubectl get pods --show-labels</span><br><span class="line">NAME          READY   STATUS    RESTARTS   AGE     LABELS</span><br><span class="line">kubia-6vf4l   1&#x2F;1     Running   1          6d19h   run&#x3D;kubia</span><br><span class="line">kubia-97c5t   1&#x2F;1     Running   1          6d19h   run&#x3D;kubia</span><br><span class="line">kubia-wk7b4   1&#x2F;1     Running   1          6d19h   run&#x3D;kubia</span><br><span class="line"></span><br><span class="line">root@node1:&#x2F;home&#x2F;richey# kubectl get pod kubia-6vf4l --show-labels</span><br><span class="line">NAME          READY   STATUS    RESTARTS   AGE     LABELS</span><br><span class="line">kubia-6vf4l   1&#x2F;1     Running   1          6d19h   run&#x3D;kubia</span><br></pre></td></tr></table></figure><p>也可以查看pod的yaml文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@node1:&#x2F;home&#x2F;richey# kubectl get pods kubia-6vf4l -o yaml</span><br></pre></td></tr></table></figure><p>查看指定标签，通过-L 标签名 查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@node1:&#x2F;home&#x2F;richey# kubectl get pod -L run</span><br><span class="line">NAME          READY   STATUS    RESTARTS   AGE     RUN</span><br><span class="line">kubia-6vf4l   1&#x2F;1     Running   1          6d19h   kubia</span><br><span class="line">kubia-97c5t   1&#x2F;1     Running   1          6d19h   kubia</span><br><span class="line">kubia-wk7b4   1&#x2F;1     Running   1          6d19h   kubia</span><br></pre></td></tr></table></figure><h1 id="添加或修改现有标签"><a href="#添加或修改现有标签" class="headerlink" title="添加或修改现有标签"></a>添加或修改现有标签</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">root@node1:&#x2F;home&#x2F;richey# kubectl label pod  kubia-6vf4l kubia-custom-label&#x3D;test</span><br><span class="line">pod&#x2F;kubia-6vf4l labeled</span><br><span class="line">root@node1:&#x2F;home&#x2F;richey# kubectl get pod kubia-6vf4l --show-labels</span><br><span class="line">NAME          READY   STATUS    RESTARTS   AGE     LABELS</span><br><span class="line">kubia-6vf4l   1&#x2F;1     Running   1          6d19h   kubia-custom-label&#x3D;test,run&#x3D;kubia</span><br><span class="line">root@node1:&#x2F;home&#x2F;richey# kubectl label pod  kubia-6vf4l kubia-custom-label&#x3D;test</span><br><span class="line">error: &#39;kubia-custom-label&#39; already has a value (test), and --overwrite is false</span><br><span class="line">root@node1:&#x2F;home&#x2F;richey# kubectl label pod  kubia-6vf4l kubia-custom-label&#x3D;test --overwrite</span><br><span class="line">pod&#x2F;kubia-6vf4l not labeled</span><br><span class="line">root@node1:&#x2F;home&#x2F;richey# kubectl label pod  kubia-6vf4l kubia-custom-label&#x3D;test2 --overwrite</span><br><span class="line">pod&#x2F;kubia-6vf4l labeled</span><br></pre></td></tr></table></figure><p>可以看到如果要更改现有标签需要使用–overwrite选项</p><h1 id="通过标签选择器列出子集"><a href="#通过标签选择器列出子集" class="headerlink" title="通过标签选择器列出子集"></a>通过标签选择器列出子集</h1><p>通过-l参数过滤</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">root@node1:&#x2F;home&#x2F;richey# kubectl label pod kubia-97c5t kubia-custom-label&#x3D;test</span><br><span class="line">pod&#x2F;kubia-97c5t labeled</span><br><span class="line">root@node1:&#x2F;home&#x2F;richey# kubectl label pod kubia-wk7b4 env&#x3D;qa</span><br><span class="line">pod&#x2F;kubia-wk7b4 labeled</span><br><span class="line">root@node1:&#x2F;home&#x2F;richey# kubectl get pod -l kubia-custom-label&#x3D;test</span><br><span class="line">NAME          READY   STATUS    RESTARTS   AGE</span><br><span class="line">kubia-97c5t   1&#x2F;1     Running   1          6d19h</span><br><span class="line">&#x2F;&#x2F;包含标签kubia-custom-label的</span><br><span class="line">root@node1:&#x2F;home&#x2F;richey# kubectl get pod -l kubia-custom-label</span><br><span class="line">NAME          READY   STATUS    RESTARTS   AGE</span><br><span class="line">kubia-6vf4l   1&#x2F;1     Running   1          6d19h</span><br><span class="line">kubia-97c5t   1&#x2F;1     Running   1          6d19h</span><br><span class="line">&#x2F;&#x2F;不包含kubia-custom-label标签的</span><br><span class="line">root@node1:&#x2F;home&#x2F;richey# kubectl get pod -l &#39;!kubia-custom-label&#39;  --show-labels</span><br><span class="line">NAME          READY   STATUS    RESTARTS   AGE     LABELS</span><br><span class="line">kubia-wk7b4   1&#x2F;1     Running   1          6d19h   env&#x3D;qa,run&#x3D;kubia</span><br><span class="line">root@node1:&#x2F;home&#x2F;richey# kubectl get pod -l kubia-custom-label!&#x3D;test --show-labels</span><br><span class="line">NAME          READY   STATUS    RESTARTS   AGE     LABELS</span><br><span class="line">kubia-6vf4l   1&#x2F;1     Running   1          6d19h   kubia-custom-label&#x3D;test2,run&#x3D;kubia</span><br><span class="line">kubia-wk7b4   1&#x2F;1     Running   1          6d19h   env&#x3D;qa,run&#x3D;kubia</span><br></pre></td></tr></table></figure><p>多条件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@node1:&#x2F;home&#x2F;richey# kubectl get pod -l kubia-custom-label --show-labels</span><br><span class="line">NAME          READY   STATUS    RESTARTS   AGE     LABELS</span><br><span class="line">kubia-6vf4l   1&#x2F;1     Running   1          6d19h   kubia-custom-label&#x3D;test2,run&#x3D;kubia</span><br><span class="line">kubia-97c5t   1&#x2F;1     Running   1          6d19h   kubia-custom-label&#x3D;test,run&#x3D;kubia</span><br><span class="line">root@node1:&#x2F;home&#x2F;richey# kubectl get pod -l kubia-custom-label&#x3D;test,run&#x3D;kubia --show-labels</span><br><span class="line">NAME          READY   STATUS    RESTARTS   AGE     LABELS</span><br><span class="line">kubia-97c5t   1&#x2F;1     Running   1          6d19h   kubia-custom-label&#x3D;test,run&#x3D;kubia</span><br><span class="line">root@node1:&#x2F;home&#x2F;richey#</span><br></pre></td></tr></table></figure><h1 id="使用标签和选择器来约束pod调度"><a href="#使用标签和选择器来约束pod调度" class="headerlink" title="使用标签和选择器来约束pod调度"></a>使用标签和选择器来约束pod调度</h1><p>有时候我们希望将特定pod调度到特定的节点，这个时候可以使用标签和选择器实现.pod并不是唯一可以加标签的资源，标签可以添加到任何的k8s对象上。</p><h2 id="使用标签分类购买工作节点"><a href="#使用标签分类购买工作节点" class="headerlink" title="使用标签分类购买工作节点"></a>使用标签分类购买工作节点</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">root@node1:&#x2F;home&#x2F;richey# kubectl get nodes --show-labels</span><br><span class="line">NAME    STATUS   ROLES    AGE   VERSION   LABELS</span><br><span class="line">node1   Ready    master   11d   v1.15.2   beta.kubernetes.io&#x2F;arch&#x3D;amd64,beta.kubernetes.io&#x2F;os&#x3D;linux,kubernetes.io&#x2F;arch&#x3D;amd64,kubernetes.io&#x2F;hostname&#x3D;node1,kubernetes.io&#x2F;os&#x3D;linux,node-role.kubernetes.io&#x2F;master&#x3D;</span><br><span class="line">node2   Ready    &lt;none&gt;   11d   v1.15.2   beta.kubernetes.io&#x2F;arch&#x3D;amd64,beta.kubernetes.io&#x2F;os&#x3D;linux,kubernetes.io&#x2F;arch&#x3D;amd64,kubernetes.io&#x2F;hostname&#x3D;node2,kubernetes.io&#x2F;os&#x3D;linux</span><br><span class="line">node3   Ready    &lt;none&gt;   11d   v1.15.2   beta.kubernetes.io&#x2F;arch&#x3D;amd64,beta.kubernetes.io&#x2F;os&#x3D;linux,kubernetes.io&#x2F;arch&#x3D;amd64,kubernetes.io&#x2F;hostname&#x3D;node3,kubernetes.io&#x2F;os&#x3D;linux</span><br><span class="line">root@node1:&#x2F;home&#x2F;richey# kubectl label node node1 cpu&#x3D;true</span><br><span class="line">node&#x2F;node1 labeled</span><br><span class="line">&#x2F;&#x2F;给node1节点加标签cpu&#x3D;true,将其标记为计算型节点</span><br><span class="line">root@node1:&#x2F;home&#x2F;richey# kubectl get node -l cpu&#x3D;true</span><br><span class="line">NAME    STATUS   ROLES    AGE   VERSION</span><br><span class="line">node1   Ready    master   11d   v1.15.2</span><br><span class="line">root@node1:&#x2F;home&#x2F;richey# kubectl get node -L cpu</span><br><span class="line">NAME    STATUS   ROLES    AGE   VERSION   CPU</span><br><span class="line">node1   Ready    master   11d   v1.15.2   true</span><br><span class="line">node2   Ready    &lt;none&gt;   11d   v1.15.2   </span><br><span class="line">node3   Ready    &lt;none&gt;   11d   v1.15.2</span><br></pre></td></tr></table></figure><h2 id="将pod调度到特定节点"><a href="#将pod调度到特定节点" class="headerlink" title="将pod调度到特定节点"></a>将pod调度到特定节点</h2><p>可以在pod的yaml文件中配置要调度的节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spec:</span><br><span class="line">  nodeSelector:</span><br><span class="line">    cpu: &quot;true&quot;</span><br></pre></td></tr></table></figure><p>每个节点都有一个唯一标签，其中键为kubernetes.io/hostname,值为该节点的实际主机名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@node1:~# kubectl get nodes -L kubernetes.io&#x2F;hostname</span><br><span class="line">NAME    STATUS   ROLES    AGE   VERSION   HOSTNAME</span><br><span class="line">node1   Ready    master   11d   v1.15.2   node1</span><br><span class="line">node2   Ready    &lt;none&gt;   11d   v1.15.2   node2</span><br><span class="line">node3   Ready    &lt;none&gt;   11d   v1.15.2   node3</span><br></pre></td></tr></table></figure><h1 id="注解pod"><a href="#注解pod" class="headerlink" title="注解pod"></a>注解pod</h1><p>注解可以用于pod及其它对象。注解也是键值对，但是注解并不是为了保存标识信息而存在的，它们不用像标签一样<br>用于对对象进行分组，也不存在类似于标签选择器的东西。</p><p>注解可以在yaml中指定和查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- apiVersion: v1</span><br><span class="line">  kind: Pod</span><br><span class="line">  metadata:</span><br><span class="line">    annotations:</span><br><span class="line">      kubernetes.io&#x2F;config.hash: 1ab8fb77541ce5e8485486c30ea8760d</span><br><span class="line">      kubernetes.io&#x2F;config.mirror: 1ab8fb77541ce5e8485486c30ea8760d</span><br><span class="line">      kubernetes.io&#x2F;config.seen: &quot;2021-05-24T14:38:01.188468672Z&quot;</span><br></pre></td></tr></table></figure><p>注解可以包含相对较多的数据（不超过256k）</p><h2 id="添加和修改注解"><a href="#添加和修改注解" class="headerlink" title="添加和修改注解"></a>添加和修改注解</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@node1:~# kubectl get pod kubia-6vf4l -o yaml </span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  annotations:</span><br><span class="line">    10000hours.top&#x2F;someannotation: foo</span><br></pre></td></tr></table></figure><h1 id="使用命名空间对资源进行分组"><a href="#使用命名空间对资源进行分组" class="headerlink" title="使用命名空间对资源进行分组"></a>使用命名空间对资源进行分组</h1><p>Kubernetes命名空间简单地为对象名称提供了一个作用域，这样我们可以在不同的命名空间中使用相同的资源名称。</p><h2 id="列出集群中的所有命名空间"><a href="#列出集群中的所有命名空间" class="headerlink" title="列出集群中的所有命名空间"></a>列出集群中的所有命名空间</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@node1:~# kubectl get ns</span><br><span class="line">NAME              STATUS   AGE</span><br><span class="line">default           Active   11d</span><br><span class="line">kube-node-lease   Active   11d</span><br><span class="line">kube-public       Active   11d</span><br><span class="line">kube-system       Active   11d</span><br></pre></td></tr></table></figure><p>如果我们使用kubectl相关命令时没有指定命名空间，则kubectl总是默认为default命名空间。</p><h2 id="指定命名空间"><a href="#指定命名空间" class="headerlink" title="指定命名空间"></a>指定命名空间</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">root@node1:~# kubectl get pod -n kube-system</span><br><span class="line">NAME                            READY   STATUS             RESTARTS   AGE</span><br><span class="line">coredns-bccdc95cf-j4tdl         0&#x2F;1     CrashLoopBackOff   98         6d19h</span><br><span class="line">coredns-bccdc95cf-zv7vs         1&#x2F;1     Running            2          10d</span><br><span class="line">etcd-node1                      1&#x2F;1     Running            6          11d</span><br><span class="line">kube-apiserver-node1            1&#x2F;1     Running            7          11d</span><br><span class="line">kube-controller-manager-node1   1&#x2F;1     Running            6          11d</span><br><span class="line">kube-flannel-ds-2cbc6           1&#x2F;1     Running            0          10d</span><br><span class="line">kube-flannel-ds-8gwrk           1&#x2F;1     Running            4          10d</span><br><span class="line">kube-flannel-ds-xxfw9           1&#x2F;1     Running            3          10d</span><br><span class="line">kube-proxy-hj794                1&#x2F;1     Running            1          11d</span><br><span class="line">kube-proxy-hm2tn                1&#x2F;1     Running            4          11d</span><br><span class="line">kube-proxy-jsz86                1&#x2F;1     Running            6          11d</span><br><span class="line">kube-scheduler-node1            1&#x2F;1     Running            6          11d</span><br></pre></td></tr></table></figure><h2 id="从YAML文件创建命名空间"><a href="#从YAML文件创建命名空间" class="headerlink" title="从YAML文件创建命名空间"></a>从YAML文件创建命名空间</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Namespace</span><br><span class="line">metadata:</span><br><span class="line">  name: custom-namespace</span><br></pre></td></tr></table></figure><p>创建名称为custom-namespace的命名空间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root@node1:&#x2F;opt&#x2F;yaml# kubectl create -f custom-namespace.yaml</span><br><span class="line">namespace&#x2F;custom-namespace created</span><br><span class="line">root@node1:&#x2F;opt&#x2F;yaml# kubectl get ns</span><br><span class="line">NAME               STATUS   AGE</span><br><span class="line">custom-namespace   Active   30s</span><br><span class="line">default            Active   11d</span><br><span class="line">kube-node-lease    Active   11d</span><br><span class="line">kube-public        Active   11d</span><br><span class="line">kube-system        Active   11d</span><br></pre></td></tr></table></figure><h2 id="通过kubectl-cteate-namespace命令创建命名空间"><a href="#通过kubectl-cteate-namespace命令创建命名空间" class="headerlink" title="通过kubectl cteate namespace命令创建命名空间"></a>通过kubectl cteate namespace命令创建命名空间</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@node1:&#x2F;opt&#x2F;yaml# kubectl create namespace custom-namespace-2</span><br><span class="line">namespace&#x2F;custom-namespace-2 created</span><br></pre></td></tr></table></figure><h2 id="在指定命名空间中创建资源"><a href="#在指定命名空间中创建资源" class="headerlink" title="在指定命名空间中创建资源"></a>在指定命名空间中创建资源</h2><p>可以在yaml中指定，在metadata字段中添加一个namespace: custom-namespace</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">metadata:</span><br><span class="line">  namespace: custom-namespace</span><br></pre></td></tr></table></figure><p>也可以在kubectl create 命令创建资源的时候指定</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f kubia-pod.yaml -n custom-namepace</span><br></pre></td></tr></table></figure><h2 id="命名空间提供的隔离"><a href="#命名空间提供的隔离" class="headerlink" title="命名空间提供的隔离"></a>命名空间提供的隔离</h2><p>实际上命名空间并不提供对正在运行的对象的任何隔离。</p><p>例如命名空间之间是否提供网络隔离取决于Kubernetes锁使用的网络解决方案。</p><h1 id="删除pod"><a href="#删除pod" class="headerlink" title="删除pod"></a>删除pod</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@node1:&#x2F;opt&#x2F;yaml# kubectl delete pod kubia-6vf4l</span><br></pre></td></tr></table></figure><p>使用标签选择器批量删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@node1:&#x2F;opt&#x2F;yaml# kubectl delete pod -l run&#x3D;kubia</span><br><span class="line">pod &quot;kubia-97c5t&quot; deleted</span><br><span class="line">pod &quot;kubia-n75p4&quot; deleted</span><br><span class="line">pod &quot;kubia-wk7b4&quot; deleted</span><br></pre></td></tr></table></figure><p>删除所有pod</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@node1:&#x2F;opt&#x2F;yaml# kubectl delete pod --all</span><br><span class="line">pod &quot;kubia-2zwnz&quot; deleted</span><br><span class="line">pod &quot;kubia-7bpv7&quot; deleted</span><br><span class="line">pod &quot;kubia-gvsgq&quot; deleted</span><br></pre></td></tr></table></figure><h1 id="删除命名空间"><a href="#删除命名空间" class="headerlink" title="删除命名空间"></a>删除命名空间</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@node1:&#x2F;opt&#x2F;yaml# kubectl delete ns custom-namespace</span><br><span class="line">namespace &quot;custom-namespace&quot; deleted</span><br></pre></td></tr></table></figure><p>删除命名空间，pod及其它资源会随着命名空间自动删除。</p><h2 id="删除命名空间中的（几乎）所有资源"><a href="#删除命名空间中的（几乎）所有资源" class="headerlink" title="删除命名空间中的（几乎）所有资源"></a>删除命名空间中的（几乎）所有资源</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@node1:&#x2F;opt&#x2F;yaml# kubectl delete all --all</span><br><span class="line">pod &quot;kubia-lpmc2&quot; deleted</span><br><span class="line">pod &quot;kubia-mz478&quot; deleted</span><br><span class="line">pod &quot;kubia-tr4mb&quot; deleted</span><br><span class="line">replicationcontroller &quot;kubia&quot; deleted</span><br><span class="line">service &quot;kubernetes&quot; deleted</span><br><span class="line">service &quot;kubia&quot; deleted</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;展示集群信息&quot;&gt;&lt;a href=&quot;#展示集群信息&quot; class=&quot;headerlink&quot; title=&quot;展示集群信息&quot;&gt;&lt;/a&gt;展示集群信息&lt;/h1&gt;&lt;p&gt;kubectl cluster-info&lt;/p&gt;
&lt;figure class=&quot;highlight plai
      
    
    </summary>
    
    
      <category term="SRE" scheme="http://10000hours.top/categories/SRE/"/>
    
    
      <category term="K8s" scheme="http://10000hours.top/tags/K8s/"/>
    
  </entry>
  
  <entry>
    <title>mongoDB系列06-mongoDB事务操作</title>
    <link href="http://10000hours.top/2021/04/05/mongoDB%E7%B3%BB%E5%88%9706-mongoDB%E4%BA%8B%E5%8A%A1%E6%93%8D%E4%BD%9C/"/>
    <id>http://10000hours.top/2021/04/05/mongoDB%E7%B3%BB%E5%88%9706-mongoDB%E4%BA%8B%E5%8A%A1%E6%93%8D%E4%BD%9C/</id>
    <published>2021-04-04T16:00:00.000Z</published>
    <updated>2021-04-05T14:50:21.166Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="DB" scheme="http://10000hours.top/categories/DB/"/>
    
    
      <category term="mongoDB" scheme="http://10000hours.top/tags/mongoDB/"/>
    
  </entry>
  
  <entry>
    <title>mongoDB命令速查</title>
    <link href="http://10000hours.top/2021/04/03/mongoDB%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5/"/>
    <id>http://10000hours.top/2021/04/03/mongoDB%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5/</id>
    <published>2021-04-02T16:00:00.000Z</published>
    <updated>2021-04-05T09:30:35.038Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h1><h2 id="显示所有数据库"><a href="#显示所有数据库" class="headerlink" title="显示所有数据库"></a>显示所有数据库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rs0:PRIMARY&gt; show dbs</span><br><span class="line">admin   0.000GB</span><br><span class="line">config  0.000GB</span><br><span class="line">local   0.000GB</span><br><span class="line">test    0.000GB</span><br></pre></td></tr></table></figure><h2 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rs0:PRIMARY&gt; use test</span><br><span class="line">switched to db test</span><br></pre></td></tr></table></figure><h2 id="连接到一个指定的数据库"><a href="#连接到一个指定的数据库" class="headerlink" title="连接到一个指定的数据库"></a>连接到一个指定的数据库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rs0:PRIMARY&gt; use test</span><br><span class="line">switched to db test</span><br></pre></td></tr></table></figure><h2 id="显示当前数据库对象或集合"><a href="#显示当前数据库对象或集合" class="headerlink" title="显示当前数据库对象或集合"></a>显示当前数据库对象或集合</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rs0:PRIMARY&gt; db</span><br><span class="line">test</span><br></pre></td></tr></table></figure><h2 id="统计集合记录数"><a href="#统计集合记录数" class="headerlink" title="统计集合记录数"></a>统计集合记录数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.baseSe.count()</span><br></pre></td></tr></table></figure><h2 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 分两步，先选中，再删除</span><br><span class="line">rs0:PRIMARY&gt; use ihr360_collections</span><br><span class="line">switched to db ihr360_collections</span><br><span class="line">rs0:PRIMARY&gt; db.dropDatabase()</span><br><span class="line">&#123;</span><br><span class="line">&quot;ok&quot; : 1,</span><br><span class="line">&quot;$clusterTime&quot; : &#123;</span><br><span class="line">&quot;clusterTime&quot; : Timestamp(1617609515, 1),</span><br><span class="line">&quot;signature&quot; : &#123;</span><br><span class="line">&quot;hash&quot; : BinData(0,&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAA&#x3D;&quot;),</span><br><span class="line">&quot;keyId&quot; : NumberLong(0)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;operationTime&quot; : Timestamp(1617609515, 1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查看指定数据库状态"><a href="#查看指定数据库状态" class="headerlink" title="查看指定数据库状态"></a>查看指定数据库状态</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.stats();</span><br><span class="line">&#123;</span><br><span class="line">&quot;db&quot; : &quot;test&quot;,</span><br><span class="line">&quot;collections&quot; : 98276,</span><br><span class="line">&quot;views&quot; : 0,</span><br><span class="line">&quot;objects&quot; : 10000002,</span><br><span class="line">&quot;avgObjSize&quot; : 217.77775944444812,</span><br><span class="line">&quot;dataSize&quot; : 2177778030,</span><br><span class="line">&quot;storageSize&quot; : 793391104,</span><br><span class="line">&quot;numExtents&quot; : 0,</span><br><span class="line">&quot;indexes&quot; : 98276,</span><br><span class="line">&quot;indexSize&quot; : 503685120,</span><br><span class="line">&quot;scaleFactor&quot; : 1,</span><br><span class="line">&quot;fsUsedSize&quot; : 53629050880,</span><br><span class="line">&quot;fsTotalSize&quot; : 84014424064,</span><br><span class="line">&quot;ok&quot; : 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除集合"><a href="#删除集合" class="headerlink" title="删除集合"></a>删除集合</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.collection.drop()</span><br></pre></td></tr></table></figure><h2 id="查看数据库服务器的状态"><a href="#查看数据库服务器的状态" class="headerlink" title="查看数据库服务器的状态"></a>查看数据库服务器的状态</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.serverStatus()</span><br></pre></td></tr></table></figure><h2 id="查询指定数据库包含的集合名称列表"><a href="#查询指定数据库包含的集合名称列表" class="headerlink" title="查询指定数据库包含的集合名称列表"></a>查询指定数据库包含的集合名称列表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.getCollectionNames()</span><br></pre></td></tr></table></figure><h1 id="管理命令"><a href="#管理命令" class="headerlink" title="管理命令"></a>管理命令</h1><h2 id="慢查询"><a href="#慢查询" class="headerlink" title="慢查询"></a>慢查询</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 开启3000毫秒以上的慢查询记录</span><br><span class="line">db.setProfilingLevel(1,3000)</span><br><span class="line">&#x2F;&#x2F; 查看最近5条慢查询</span><br><span class="line">show profile</span><br><span class="line">&#x2F;&#x2F; 按照慢查询执行时间倒序查询</span><br><span class="line">db.system.profile.find().sort(&#123;&#39;millis&#39;:-1&#125;).pretty</span><br><span class="line">&#x2F;&#x2F; 查看查询计划</span><br><span class="line">db.TestCollection98252.find(&#123;$and:[&#123;&quot;name&quot;:&quot;Foo88888&quot;&#125;,&#123;&quot;age&quot;:88&#125;]&#125;).explain()</span><br><span class="line">&#x2F;&#x2F; 关闭慢查询记录</span><br><span class="line">db.setProfilingLevel(0)</span><br></pre></td></tr></table></figure><h2 id="停止超过一定时间的查询"><a href="#停止超过一定时间的查询" class="headerlink" title="停止超过一定时间的查询"></a>停止超过一定时间的查询</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db.currentOp().inprog.forEach(</span><br><span class="line">function(item)&#123;</span><br><span class="line">if (item.secs_running &gt; 1000 ) </span><br><span class="line">db.killOp(item.opid);</span><br><span class="line">&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h1 id="基本DDL和DML"><a href="#基本DDL和DML" class="headerlink" title="基本DDL和DML"></a>基本DDL和DML</h1><h2 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#语法</span><br><span class="line">&gt;db.collection.createIndex(keys, options)</span><br><span class="line">语法中 Key 值为你要创建的索引字段，1 为指定按升序创建索引，如果你想按降序来创建索引指定为 -1 即可</span><br><span class="line"></span><br><span class="line">&gt; db.TestCollection98252.createIndex(&#123;&quot;name&quot;:1&#125;)</span><br><span class="line">&#123;</span><br><span class="line">&quot;createdCollectionAutomatically&quot; : false,</span><br><span class="line">&quot;numIndexesBefore&quot; : 1,</span><br><span class="line">&quot;numIndexesAfter&quot; : 2,</span><br><span class="line">&quot;ok&quot; : 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 使用多个字段创建索引</span><br><span class="line">&gt; db.TestCollection98252.createIndex(&#123;&quot;name&quot;:1,&quot;age&quot;:-1&#125;)</span><br><span class="line">&#123;</span><br><span class="line">&quot;createdCollectionAutomatically&quot; : false,</span><br><span class="line">&quot;numIndexesBefore&quot; : 1,</span><br><span class="line">&quot;numIndexesAfter&quot; : 2,</span><br><span class="line">&quot;ok&quot; : 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.TestCollection98252.getIndexes()</span><br><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line">&quot;v&quot; : 2,</span><br><span class="line">&quot;key&quot; : &#123;</span><br><span class="line">&quot;_id&quot; : 1</span><br><span class="line">&#125;,</span><br><span class="line">&quot;name&quot; : &quot;_id_&quot;,</span><br><span class="line">&quot;ns&quot; : &quot;test.TestCollection98252&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&quot;v&quot; : 2,</span><br><span class="line">&quot;key&quot; : &#123;</span><br><span class="line">&quot;name&quot; : 1</span><br><span class="line">&#125;,</span><br><span class="line">&quot;name&quot; : &quot;name_1&quot;,</span><br><span class="line">&quot;ns&quot; : &quot;test.TestCollection98252&quot;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.TestCollection98252.dropIndex(&quot;name_1&quot;)</span><br><span class="line">&#123; &quot;nIndexesWas&quot; : 2, &quot;ok&quot; : 1 &#125;</span><br><span class="line">&gt; db.TestCollection98252.getIndexes()</span><br><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line">&quot;v&quot; : 2,</span><br><span class="line">&quot;key&quot; : &#123;</span><br><span class="line">&quot;_id&quot; : 1</span><br><span class="line">&#125;,</span><br><span class="line">&quot;name&quot; : &quot;_id_&quot;,</span><br><span class="line">&quot;ns&quot; : &quot;test.TestCollection98252&quot;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"># 删除当前集合所有索引</span><br><span class="line">db.TestCollection98252.dropIndex()</span><br></pre></td></tr></table></figure><h2 id="重建索引"><a href="#重建索引" class="headerlink" title="重建索引"></a>重建索引</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.page.reIndex()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基础命令&quot;&gt;&lt;a href=&quot;#基础命令&quot; class=&quot;headerlink&quot; title=&quot;基础命令&quot;&gt;&lt;/a&gt;基础命令&lt;/h1&gt;&lt;h2 id=&quot;显示所有数据库&quot;&gt;&lt;a href=&quot;#显示所有数据库&quot; class=&quot;headerlink&quot; title=&quot;显示所
      
    
    </summary>
    
    
      <category term="DB" scheme="http://10000hours.top/categories/DB/"/>
    
    
      <category term="mongoDB" scheme="http://10000hours.top/tags/mongoDB/"/>
    
  </entry>
  
  <entry>
    <title>mongoDB系列05-mongoDB数据模型设计</title>
    <link href="http://10000hours.top/2021/03/21/mongoDB%E7%B3%BB%E5%88%9705-mongoDB%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B%E8%AE%BE%E8%AE%A1/"/>
    <id>http://10000hours.top/2021/03/21/mongoDB%E7%B3%BB%E5%88%9705-mongoDB%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B%E8%AE%BE%E8%AE%A1/</id>
    <published>2021-03-20T16:00:00.000Z</published>
    <updated>2021-04-05T09:27:01.033Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JSON文档模型特点"><a href="#JSON文档模型特点" class="headerlink" title="JSON文档模型特点"></a>JSON文档模型特点</h1><p>在传统关系模型中需要多张表关联的模型，在json文档模型中可以通过一个表（集合）完成</p><p>文档模型设计主要考虑两点：性能和开发易用</p><h1 id="几个概念"><a href="#几个概念" class="headerlink" title="几个概念"></a>几个概念</h1><ul><li>集合：同关系数据库中的表</li><li>字段：同关系数据库中的列</li><li>内嵌数组，引用字段：类似于关系数据库的主外键，关联关系</li></ul><h1 id="1-1关系建模"><a href="#1-1关系建模" class="headerlink" title="1-1关系建模"></a>1-1关系建模</h1><ul><li>一对一关系以内嵌为主,作为子文档形式或者直接在顶级</li><li>如果内嵌后导致文档大小超过16M,则不建议内嵌</li></ul><blockquote><p>mongoDB文档大小不能超过16M</p></blockquote><h1 id="1-N关系建模"><a href="#1-N关系建模" class="headerlink" title="1-N关系建模"></a>1-N关系建模</h1><ul><li>一对多关系同样以内嵌为主</li><li>用数组表示一对多</li><li>同样如果文档大小超过16M或数组长度太大（数万或更多）或数组长度不确定则不使用内嵌</li></ul><h1 id="N-N关系模型"><a href="#N-N关系模型" class="headerlink" title="N-N关系模型"></a>N-N关系模型</h1><ul><li><p>不通过映射表做，同样建议通过内嵌数组表示一对多，通过冗余来实现N-N</p></li><li><p>同样如果文档大小超过16M或数组长度太大（数万或更多）或数组长度不确定则不使用内嵌</p><p>在mongoDB里面有些时候是允许甚至鼓励做冗余的</p><p>在mongoDB建模中，内嵌是一种重要的方式,但是内嵌不是万能的，根据具体情况我也需要建立文档间的引用关系</p></li></ul><h1 id="根据业务需求细化建模"><a href="#根据业务需求细化建模" class="headerlink" title="根据业务需求细化建模"></a>根据业务需求细化建模</h1><p>首先要收集确认需求：</p><ul><li><p>读写比例</p></li><li><p>查询方式，比如查询最近几天，查询参数,以及最频繁的查询方式是什么</p></li><li><p>最频繁的写入方式是什么</p></li><li><p>数据量大小,将低频查询且数据量较大的数据单独集合保存，建立关联关系</p><p>基于这些需求，我们最终决定是使用引用来避免性能瓶颈还是使用冗余来优化访问性能.</p><p>比如内嵌模型通过冗余的方式实现N-N时，加入在数据量大的情况下，我们可能面临大量的修改操作(对冗余的数据进行修改),此时就需要设计为关联的方式,<br>将关联关系独立出一张表来，然后依然通过数组冗余的方式维护关系，只不过此时我们冗余的不是具体的数据，而是冗余表的主键数组</p><p>这种通过冗余+关联的设计，我们可以通过$lookup的方式进行（多表）查询，类似mysql中的join</p></li></ul><p>总结，什么时候应该使用引用的方式查询：</p><ul><li>内嵌文档太大，数MB或则超过16MB</li><li>内嵌文档或者数组元素会频繁修改</li><li>内嵌数组元素会持续增长且没有封顶</li></ul><h1 id="mongoDB引用设计的限制"><a href="#mongoDB引用设计的限制" class="headerlink" title="mongoDB引用设计的限制"></a>mongoDB引用设计的限制</h1><ul><li>引用集合之间无主外键检查</li><li>使用$lookup的方式模仿关联查询</li><li>$lookup只支持left outer join</li><li>$lookup的关联目标(from)不能是分片表</li></ul><h1 id="常用的设计模式"><a href="#常用的设计模式" class="headerlink" title="常用的设计模式"></a>常用的设计模式</h1><h2 id="分桶模式"><a href="#分桶模式" class="headerlink" title="分桶模式"></a>分桶模式</h2><p>批量保存概念，节省索引和公共字段的存储空间。</p><p>通过分桶模式可以大大减少文档数量和索引的占用空间</p><h2 id="列转行"><a href="#列转行" class="headerlink" title="列转行"></a>列转行</h2><p>将多列数据转换成一行数据，将多列的信息放到行内的数组中维护</p><p>这样如果我们本来需要对这些列建分别建索引（可能几十个），现在只需要建一个就够了.此模式解决的是索引过多的问题</p><p>索引太多影响插入效率的问题就解决了</p><p>注意的是只有这些列能抽象成一个对象表示时才可行(否则我们从语义上也无法实现列转行)</p><h2 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h2><p>模型灵活了，如何管理文档的不同版本？</p><p>可以增加一个版本字段：”schema_version”</p><p>这样我们可以根据版本进行过滤，同时可以根据版本进行规则设置</p><h2 id="近似计算"><a href="#近似计算" class="headerlink" title="近似计算"></a>近似计算</h2><p>对于请求量大同时准确性要求不高的统计，我们可以采用近似计算的方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if random(0,9) &#x3D;&#x3D; 0</span><br><span class="line">  increment by 10</span><br></pre></td></tr></table></figure><p>可大量减少写入操作</p><h2 id="预聚合"><a href="#预聚合" class="headerlink" title="预聚合"></a>预聚合</h2><p>增加统计字段，在进行数据修改的同时，修改这些统计字段的值，这样就可以避免聚合查询带来的性能和资源问题。</p><p>这里是利用了mongoDB文档模型的灵活性，增加了聚合字段，而不影响正常业务数据</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JSON文档模型特点&quot;&gt;&lt;a href=&quot;#JSON文档模型特点&quot; class=&quot;headerlink&quot; title=&quot;JSON文档模型特点&quot;&gt;&lt;/a&gt;JSON文档模型特点&lt;/h1&gt;&lt;p&gt;在传统关系模型中需要多张表关联的模型，在json文档模型中可以通过一个表（集
      
    
    </summary>
    
    
      <category term="DB" scheme="http://10000hours.top/categories/DB/"/>
    
    
      <category term="mongoDB" scheme="http://10000hours.top/tags/mongoDB/"/>
    
  </entry>
  
  <entry>
    <title>ulimit详解</title>
    <link href="http://10000hours.top/2021/03/21/ulimit%E8%AF%A6%E8%A7%A3/"/>
    <id>http://10000hours.top/2021/03/21/ulimit%E8%AF%A6%E8%A7%A3/</id>
    <published>2021-03-20T16:00:00.000Z</published>
    <updated>2021-03-20T16:46:35.317Z</updated>
    
    <content type="html"><![CDATA[<p>本地测试mongodb，大量创建Collection的时候报错open: Too many open files.这个问题主要指的是进程企图打开一个文件，或者叫句柄，但是现在进程打开的句柄已经达到了上限，已经无法打开新句柄了。</p><h1 id="Linux句柄介绍"><a href="#Linux句柄介绍" class="headerlink" title="Linux句柄介绍"></a>Linux句柄介绍</h1><p>Linux中所有的事物或资源都是以文件的形式存在，比如消息、共享内存、连接等，句柄可以理解为指向这些文件的指针。</p><h1 id="ulimit"><a href="#ulimit" class="headerlink" title="ulimit"></a>ulimit</h1><p>对于这些句柄，Linux是有数量限制的，单个进程默认可以打开的句柄数上限，可以用以下命令来查看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[richey@localhost ~]$ ulimit -a</span><br><span class="line">core file size          (blocks, -c) unlimited</span><br><span class="line">data seg size           (kbytes, -d) unlimited</span><br><span class="line">scheduling priority             (-e) 0</span><br><span class="line">file size               (blocks, -f) unlimited</span><br><span class="line">pending signals                 (-i) 62939</span><br><span class="line">max locked memory       (kbytes, -l) 16384</span><br><span class="line">max memory size         (kbytes, -m) unlimited</span><br><span class="line">open files                      (-n) 2000</span><br><span class="line">pipe size            (512 bytes, -p) 8</span><br><span class="line">POSIX message queues     (bytes, -q) 819200</span><br><span class="line">real-time priority              (-r) 0</span><br><span class="line">stack size              (kbytes, -s) 8192</span><br><span class="line">cpu time               (seconds, -t) unlimited</span><br><span class="line">max user processes              (-u) 62939</span><br><span class="line">virtual memory          (kbytes, -v) unlimited</span><br><span class="line">file locks                      (-x) unlimited</span><br></pre></td></tr></table></figure><p>其中的open files一项就是默认的句柄数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">ulimit: ulimit [-SHabcdefiklmnpqrstuvxPT] [限制]</span><br><span class="line">    修改 shell 资源限制。</span><br><span class="line">    </span><br><span class="line">    在允许此类控制的系统上，提供对于 shell 及其创建的进程所可用的</span><br><span class="line">    资源的控制。</span><br><span class="line">    </span><br><span class="line">    选项：</span><br><span class="line">      -S使用软 (&#96;soft&#39;) 资源限制</span><br><span class="line">      -H使用硬 (&#96;hard&#39;) 资源限制</span><br><span class="line">      -a所有当前限制都被报告</span><br><span class="line">      -b套接字缓存尺寸</span><br><span class="line">      -c创建的核文件的最大尺寸</span><br><span class="line">      -d一个进程的数据区的最大尺寸</span><br><span class="line">      -e最高的调度优先级 (&#96;nice&#39;)</span><br><span class="line">      -f有 shell 及其子进程可以写的最大文件尺寸</span><br><span class="line">      -i最多的可以挂起的信号数</span><br><span class="line">      -k分配给此进程的最大 kqueue 数量</span><br><span class="line">      -l一个进程可以锁定的最大内存尺寸</span><br><span class="line">      -m最大的内存进驻尺寸</span><br><span class="line">      -n最多的打开的文件描述符个数</span><br><span class="line">      -p管道缓冲区尺寸</span><br><span class="line">      -qPOSIX 信息队列的最大字节数</span><br><span class="line">      -r实时调度的最大优先级</span><br><span class="line">      -s最大栈尺寸</span><br><span class="line">      -t最大的CPU时间，以秒为单位</span><br><span class="line">      -u最大用户进程数</span><br><span class="line">      -v虚拟内存尺寸</span><br><span class="line">      -x最大的文件锁数量</span><br><span class="line">      -P最大伪终端数量</span><br><span class="line">      -T最大线程数量</span><br><span class="line">    </span><br><span class="line">    并非所有选项在所有系统上可用。</span><br><span class="line">    </span><br><span class="line">    如果提供了 LIMIT 变量，则它为指定资源的新的值；特别的 LIMIT 值为</span><br><span class="line">    &#96;soft&#39;、&#96;hard&#39;和&#96;unlimited&#39;，分别表示当前的软限制，硬限制和无限制。</span><br><span class="line">    否则打印指定资源的当前限制值，不带选项则假定为 -f</span><br><span class="line">    </span><br><span class="line">    取值都是 1024 字节为单位，除了 -t 以秒为单位，-p 以 512 字节递增，</span><br><span class="line">    -u 为无范围的进程数量。</span><br></pre></td></tr></table></figure><p>设置某个进程的句柄上限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ulimit –a PID</span><br></pre></td></tr></table></figure><h1 id="ulimit配置文件"><a href="#ulimit配置文件" class="headerlink" title="ulimit配置文件"></a>ulimit配置文件</h1><p>使用ulimit方式修改句柄设置，在系统重启后会失效，可以通过修改配置文件的方式进行永久设置</p><p>配置文件地址：/etc/security/limits.conf</p><p>格式：<br>domain：可以是用户或者用户组 <em>代表所有<br>type：可以有三个值，soft 、 hard和-,其中hard的设置是实际的默认值，也就是上限，而soft的配置只是用来警告的，如果超过了soft的值，会有warn，而第三种用短横线– 的配置，则是hard和soft同时配置的方式。<br>item：表示要限定的资源 可以有很多候选值，如 stack（最大堆栈大小），cpu（占用cpu的时间），nofile（最大打开文件数） 等等<br>例：</em> hard nofile 100 该行配置语句限定了任意用户所能创建的最大文件数是 100。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* soft nofile 196605</span><br><span class="line">* hard nofile 196605</span><br></pre></td></tr></table></figure><p>修改后重启或重新ssh连接服务器，使用命令ulimit -a即可看到效果</p><h1 id="查询某个进程占用的句柄"><a href="#查询某个进程占用的句柄" class="headerlink" title="查询某个进程占用的句柄"></a>查询某个进程占用的句柄</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof |grep pid</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本地测试mongodb，大量创建Collection的时候报错open: Too many open files.这个问题主要指的是进程企图打开一个文件，或者叫句柄，但是现在进程打开的句柄已经达到了上限，已经无法打开新句柄了。&lt;/p&gt;
&lt;h1 id=&quot;Linux句柄介绍&quot;&gt;
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://10000hours.top/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>mongoDB系列04-mongoDB复制集</title>
    <link href="http://10000hours.top/2021/03/21/mongoDB%E7%B3%BB%E5%88%9704-mongoDB%E5%A4%8D%E5%88%B6%E9%9B%86/"/>
    <id>http://10000hours.top/2021/03/21/mongoDB%E7%B3%BB%E5%88%9704-mongoDB%E5%A4%8D%E5%88%B6%E9%9B%86/</id>
    <published>2021-03-20T16:00:00.000Z</published>
    <updated>2021-03-21T09:13:35.472Z</updated>
    
    <content type="html"><![CDATA[<h1 id="复制集的作用"><a href="#复制集的作用" class="headerlink" title="复制集的作用"></a>复制集的作用</h1><ul><li>高可用：复制集主要是为了实现服务的高可用,mongoDB原生支持高可用.</li><li>数据分发：将数据从一个区域分发到另一个区域，减少另一个区域的读延迟</li><li>读写分离：降低节点压力</li><li>异地容灾：数据中心故障时迅速切换到异地</li></ul><h1 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h1><ul><li>数据写入时,后台有进程会将数据迅速复制到另一个节点上</li><li>在接收写入的节点发生故障时，自动选举出一个新的代替节点</li></ul><h1 id="复制集结构"><a href="#复制集结构" class="headerlink" title="复制集结构"></a>复制集结构</h1><p>一般由3个以上（奇数个）具有投票权的节点组成，其中有：</p><ul><li>一个主节点(PRIMARY），接收写入操作和选举时投票；</li><li>两个或多个从节点（SECONDARY）,复制主节点的数据和选举时投票</li></ul><h1 id="数据如何复制"><a href="#数据如何复制" class="headerlink" title="数据如何复制"></a>数据如何复制</h1><ul><li>当一个修改操作（增删改）到达主节点时，它对数据的操作将被记录下来（经过一些必要的转换），这些记录称为aplog.</li><li>从节点通过在主节点上打开一个tailable游标不断获取新进入主节点的aplog，并在自己的数据库上回放，以此保持跟主节点上的数据一致.</li></ul><h1 id="选举机制"><a href="#选举机制" class="headerlink" title="选举机制"></a>选举机制</h1><ul><li>具有投票权的节点之间两两之间互相发送心跳</li><li>当5次心跳未收到时认为该节点失联，如果失联的是主节点，则从节点会发起选举，选出新的主节点，如果是从节点失联，则不会产生新的选举</li><li>选举基于RAFT一致性算法实现，选举成功的必要条件是大多数投票节点存活</li><li>复制集中最多可以有50个节点，但有投票权的节点最多有7个</li></ul><h1 id="影响选举的因素"><a href="#影响选举的因素" class="headerlink" title="影响选举的因素"></a>影响选举的因素</h1><ul><li>整个集群必须有大多数投票节点粗活</li><li>被选举的主节点必须<ul><li>包括自己在内，能够与多数节点建立连接</li><li>有较新的aplog</li><li>具有较高的优先级（如果有配置）</li></ul></li></ul><h1 id="复制集部署选项"><a href="#复制集部署选项" class="headerlink" title="复制集部署选项"></a>复制集部署选项</h1><ul><li>是否具有投票权（v参数）,默认是有的</li><li>优先级（priority参数），优先级越高的节点越优先成为主节点，优先级为0的节点无法成为主节点</li><li>隐藏（hidden参数），复制数据，但对应用不可见。隐藏节点可以具有投票权，但是优先级必须为0,隐藏数据主要用于备份，不希望被应用使用.</li><li>延迟（slveDely参数），复制n s之前的数据，保持于主节点的时间差.这个参数主要用于数据恢复，比如设置延迟一个小时，则数据可以恢复到一个小时之前。</li></ul><h1 id="复制集注意事项"><a href="#复制集注意事项" class="headerlink" title="复制集注意事项"></a>复制集注意事项</h1><ul><li>正常复制集节点都有可能成为主节点，所以它们的地位应该是一样的</li><li>为了保证节点不会同时宕机，各节点应该相互独立</li><li>复制集各节点的软件版本必须一致，避免出现未知的问题</li><li>增加节点不会增加系统的写性能,只能对读操作进行分流。要降低写操作的压力，需考虑分片部署的方式。</li></ul><h1 id="搭建mongoDB复制集"><a href="#搭建mongoDB复制集" class="headerlink" title="搭建mongoDB复制集"></a>搭建mongoDB复制集</h1><p>搭建一主两从的3节点复制集需要几步：</p><ul><li>启动3个mongoDB实例</li><li>将3个mongoDB实例搭建成一个复制集</li><li>对复制集参数进行一些常规调整</li></ul><h2 id="准备工作："><a href="#准备工作：" class="headerlink" title="准备工作："></a>准备工作：</h2><ul><li><p>安装最新的mongoDB版本，并配置好环境变量<a href="https://10000hours.top/2021/03/06/mongoDB%E7%B3%BB%E5%88%9702-mongoDB%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/">安装mongoDB</a></p></li><li><p>确保有10G以上的硬盘空间</p></li></ul><h2 id="创建数据目录"><a href="#创建数据目录" class="headerlink" title="创建数据目录"></a>创建数据目录</h2><p>mongoDB启动的时候将使用一个数据目录存放所有的数据文件。我们先为3个复制集分别创建各自的数据目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p &#x2F;data&#x2F;db&#123;1,2,3&#125;</span><br></pre></td></tr></table></figure><h2 id="准备配置文件"><a href="#准备配置文件" class="headerlink" title="准备配置文件"></a>准备配置文件</h2><p>在生成环境，不同的复制集实例应该运行在不同的服务器上。这里我们为了实验，需要在一台机器上运行3个mongoDB实例进程，因此需要对它们各自配置：</p><ul><li>不同的端口，28017、28018、28019</li><li>不同的数据目录 /data/db1 、/data/db2、/data/db3</li><li>不同的日志文件 /data/db1/mongod.log、/data/db1/mongod.log、/data/db1/mongod.log</li></ul><p>配置文件demo（/data/db1/mongod.conf)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">systemLog:</span><br><span class="line">   destination: file</span><br><span class="line">   path: &quot;&#x2F;data&#x2F;db1&#x2F;mongod.log&quot;</span><br><span class="line">   logAppend: true</span><br><span class="line">storage:</span><br><span class="line">   dbPath: &#x2F;data&#x2F;db1</span><br><span class="line">   journal:</span><br><span class="line">      enabled: true</span><br><span class="line">processManagement:</span><br><span class="line">   fork: true # 作为后端进程独立运行</span><br><span class="line">net:</span><br><span class="line">   bindIp: 0.0.0.0 # 监听所有ip，默认只监听127.0.0.1,也就是只有本地可以访问</span><br><span class="line">   port: 28017</span><br><span class="line">replication:</span><br><span class="line">   replSetName: rs0 #复制集名称，没有此配置说明是单节点</span><br></pre></td></tr></table></figure><h2 id="准备好配置文件后，启动3个mongoDB实例"><a href="#准备好配置文件后，启动3个mongoDB实例" class="headerlink" title="准备好配置文件后，启动3个mongoDB实例"></a>准备好配置文件后，启动3个mongoDB实例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mongod -f &#x2F;data&#x2F;db1&#x2F;mongod.conf </span><br><span class="line">mongod -f &#x2F;data&#x2F;db2&#x2F;mongod.conf </span><br><span class="line">mongod -f &#x2F;data&#x2F;db3&#x2F;mongod.conf </span><br><span class="line"></span><br><span class="line">#demo</span><br><span class="line">richey@localhost db1]$ mongod -f &#x2F;data&#x2F;db3&#x2F;mongod.conf </span><br><span class="line">about to fork child process, waiting until server is ready for connections.</span><br><span class="line">forked process: 20340</span><br><span class="line">child process started successfully, parent exiting</span><br></pre></td></tr></table></figure><p>确认进程正在运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[richey@localhost db1]$ ps -ef|grep mongod</span><br><span class="line">richey   20033     1  0 15:36 ?        00:00:02 mongod -f &#x2F;data&#x2F;db1&#x2F;mongod.conf</span><br><span class="line">richey   20231     1  0 15:40 ?        00:00:01 mongod -f &#x2F;data&#x2F;db2&#x2F;mongod.conf</span><br><span class="line">richey   20340     1  0 15:43 ?        00:00:01 mongod -f &#x2F;data&#x2F;db3&#x2F;mongod.conf</span><br><span class="line">richey   20470 17013  0 15:46 pts&#x2F;4    00:00:00 grep --color&#x3D;auto mongod</span><br></pre></td></tr></table></figure><p>停止mongo服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[richey@localhost ~]$ mongod --shutdown -f &#x2F;data&#x2F;db1&#x2F;mongod.conf </span><br><span class="line">killing process with pid: 20033</span><br><span class="line">[richey@localhost ~]$ mongod --shutdown -f &#x2F;data&#x2F;db2&#x2F;mongod.conf </span><br><span class="line">killing process with pid: 20231</span><br><span class="line">[richey@localhost ~]$ mongod --shutdown -f &#x2F;data&#x2F;db3&#x2F;mongod.conf </span><br><span class="line">killing process with pid: 20340</span><br></pre></td></tr></table></figure><h1 id="配置复制集"><a href="#配置复制集" class="headerlink" title="配置复制集"></a>配置复制集</h1><p>我们已经启动了3个mongoDB实例，但目前为止它们是相互独立，互不相干的，我们需要对其进行配置，使其变成一个复制集.</p><h2 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h2><p>此方法hostname需要能被解析</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[richey@localhost ~]$ cat &#x2F;etc&#x2F;hosts</span><br><span class="line"></span><br><span class="line">127.0.0.1 10000hours</span><br></pre></td></tr></table></figure><p>rs.initiate()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mongo localhost:28017</span><br><span class="line"></span><br><span class="line">&gt; rs.initiate()  # 初始化复制集</span><br><span class="line">&#123;</span><br><span class="line">&quot;info2&quot; : &quot;no configuration specified. Using a default configuration for the set&quot;,</span><br><span class="line">&quot;me&quot; : &quot;localhost.localdomain:28017&quot;,</span><br><span class="line">&quot;ok&quot; : 1,</span><br><span class="line">&quot;$clusterTime&quot; : &#123;</span><br><span class="line">&quot;clusterTime&quot; : Timestamp(1616314186, 1),</span><br><span class="line">&quot;signature&quot; : &#123;</span><br><span class="line">&quot;hash&quot; : BinData(0,&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAA&#x3D;&quot;),</span><br><span class="line">&quot;keyId&quot; : NumberLong(0)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;operationTime&quot; : Timestamp(1616314186, 1)</span><br><span class="line">&#125;</span><br><span class="line">rs0:SECONDARY&gt; # 执行完rs.initiate() 变成从节点 </span><br><span class="line">rs0:PRIMARY&gt; # 再回车，变成主节点</span><br></pre></td></tr></table></figure><p>rs.add(“10000hours:28018”)</p><p>rs.add(“10000hours:28018”)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">rs0:PRIMARY&gt; rs.add(&quot;10000hours:28018&quot;)</span><br><span class="line">&#123;</span><br><span class="line">&quot;ok&quot; : 1,</span><br><span class="line">&quot;$clusterTime&quot; : &#123;</span><br><span class="line">&quot;clusterTime&quot; : Timestamp(1616314337, 1),</span><br><span class="line">&quot;signature&quot; : &#123;</span><br><span class="line">&quot;hash&quot; : BinData(0,&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAA&#x3D;&quot;),</span><br><span class="line">&quot;keyId&quot; : NumberLong(0)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;operationTime&quot; : Timestamp(1616314337, 1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rs0:PRIMARY&gt; rs.add(&quot;10000hours:28019&quot;)</span><br><span class="line">&#123;</span><br><span class="line">&quot;ok&quot; : 1,</span><br><span class="line">&quot;$clusterTime&quot; : &#123;</span><br><span class="line">&quot;clusterTime&quot; : Timestamp(1616314304, 1),</span><br><span class="line">&quot;signature&quot; : &#123;</span><br><span class="line">&quot;hash&quot; : BinData(0,&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAA&#x3D;&quot;),</span><br><span class="line">&quot;keyId&quot; : NumberLong(0)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;operationTime&quot; : Timestamp(1616314304, 1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看状态rs.status()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line">rs0:PRIMARY&gt; rs.status()</span><br><span class="line">&#123;</span><br><span class="line">&quot;set&quot; : &quot;rs0&quot;,</span><br><span class="line">&quot;date&quot; : ISODate(&quot;2021-03-21T08:21:57.896Z&quot;),</span><br><span class="line">&quot;myState&quot; : 1,</span><br><span class="line">&quot;term&quot; : NumberLong(1),</span><br><span class="line">&quot;syncingTo&quot; : &quot;&quot;,</span><br><span class="line">&quot;syncSourceHost&quot; : &quot;&quot;,</span><br><span class="line">&quot;syncSourceId&quot; : -1,</span><br><span class="line">&quot;heartbeatIntervalMillis&quot; : NumberLong(2000),</span><br><span class="line">&quot;majorityVoteCount&quot; : 2,</span><br><span class="line">&quot;writeMajorityCount&quot; : 2,</span><br><span class="line">&quot;optimes&quot; : &#123;</span><br><span class="line">&quot;lastCommittedOpTime&quot; : &#123;</span><br><span class="line">&quot;ts&quot; : Timestamp(1616314916, 1),</span><br><span class="line">&quot;t&quot; : NumberLong(1)</span><br><span class="line">&#125;,</span><br><span class="line">&quot;lastCommittedWallTime&quot; : ISODate(&quot;2021-03-21T08:21:56.560Z&quot;),</span><br><span class="line">&quot;readConcernMajorityOpTime&quot; : &#123;</span><br><span class="line">&quot;ts&quot; : Timestamp(1616314916, 1),</span><br><span class="line">&quot;t&quot; : NumberLong(1)</span><br><span class="line">&#125;,</span><br><span class="line">&quot;readConcernMajorityWallTime&quot; : ISODate(&quot;2021-03-21T08:21:56.560Z&quot;),</span><br><span class="line">&quot;appliedOpTime&quot; : &#123;</span><br><span class="line">&quot;ts&quot; : Timestamp(1616314916, 1),</span><br><span class="line">&quot;t&quot; : NumberLong(1)</span><br><span class="line">&#125;,</span><br><span class="line">&quot;durableOpTime&quot; : &#123;</span><br><span class="line">&quot;ts&quot; : Timestamp(1616314916, 1),</span><br><span class="line">&quot;t&quot; : NumberLong(1)</span><br><span class="line">&#125;,</span><br><span class="line">&quot;lastAppliedWallTime&quot; : ISODate(&quot;2021-03-21T08:21:56.560Z&quot;),</span><br><span class="line">&quot;lastDurableWallTime&quot; : ISODate(&quot;2021-03-21T08:21:56.560Z&quot;)</span><br><span class="line">&#125;,</span><br><span class="line">&quot;lastStableRecoveryTimestamp&quot; : Timestamp(1616314906, 1),</span><br><span class="line">&quot;lastStableCheckpointTimestamp&quot; : Timestamp(1616314906, 1),</span><br><span class="line">&quot;electionCandidateMetrics&quot; : &#123;</span><br><span class="line">&quot;lastElectionReason&quot; : &quot;electionTimeout&quot;,</span><br><span class="line">&quot;lastElectionDate&quot; : ISODate(&quot;2021-03-21T08:09:46.529Z&quot;),</span><br><span class="line">&quot;electionTerm&quot; : NumberLong(1),</span><br><span class="line">&quot;lastCommittedOpTimeAtElection&quot; : &#123;</span><br><span class="line">&quot;ts&quot; : Timestamp(0, 0),</span><br><span class="line">&quot;t&quot; : NumberLong(-1)</span><br><span class="line">&#125;,</span><br><span class="line">&quot;lastSeenOpTimeAtElection&quot; : &#123;</span><br><span class="line">&quot;ts&quot; : Timestamp(1616314186, 1),</span><br><span class="line">&quot;t&quot; : NumberLong(-1)</span><br><span class="line">&#125;,</span><br><span class="line">&quot;numVotesNeeded&quot; : 1,</span><br><span class="line">&quot;priorityAtElection&quot; : 1,</span><br><span class="line">&quot;electionTimeoutMillis&quot; : NumberLong(10000),</span><br><span class="line">&quot;newTermStartDate&quot; : ISODate(&quot;2021-03-21T08:09:46.546Z&quot;),</span><br><span class="line">&quot;wMajorityWriteAvailabilityDate&quot; : ISODate(&quot;2021-03-21T08:09:46.552Z&quot;)</span><br><span class="line">&#125;,</span><br><span class="line">&quot;members&quot; : [</span><br><span class="line">&#123;</span><br><span class="line">&quot;_id&quot; : 0,</span><br><span class="line">&quot;name&quot; : &quot;localhost.localdomain:28017&quot;,</span><br><span class="line">&quot;health&quot; : 1,</span><br><span class="line">&quot;state&quot; : 1,</span><br><span class="line">&quot;stateStr&quot; : &quot;PRIMARY&quot;,</span><br><span class="line">&quot;uptime&quot; : 783,</span><br><span class="line">&quot;optime&quot; : &#123;</span><br><span class="line">&quot;ts&quot; : Timestamp(1616314916, 1),</span><br><span class="line">&quot;t&quot; : NumberLong(1)</span><br><span class="line">&#125;,</span><br><span class="line">&quot;optimeDate&quot; : ISODate(&quot;2021-03-21T08:21:56Z&quot;),</span><br><span class="line">&quot;syncingTo&quot; : &quot;&quot;,</span><br><span class="line">&quot;syncSourceHost&quot; : &quot;&quot;,</span><br><span class="line">&quot;syncSourceId&quot; : -1,</span><br><span class="line">&quot;infoMessage&quot; : &quot;&quot;,</span><br><span class="line">&quot;electionTime&quot; : Timestamp(1616314186, 2),</span><br><span class="line">&quot;electionDate&quot; : ISODate(&quot;2021-03-21T08:09:46Z&quot;),</span><br><span class="line">&quot;configVersion&quot; : 3,</span><br><span class="line">&quot;self&quot; : true,</span><br><span class="line">&quot;lastHeartbeatMessage&quot; : &quot;&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&quot;_id&quot; : 1,</span><br><span class="line">&quot;name&quot; : &quot;10000hours:28019&quot;,</span><br><span class="line">&quot;health&quot; : 1,</span><br><span class="line">&quot;state&quot; : 2,</span><br><span class="line">&quot;stateStr&quot; : &quot;SECONDARY&quot;,</span><br><span class="line">&quot;uptime&quot; : 613,</span><br><span class="line">&quot;optime&quot; : &#123;</span><br><span class="line">&quot;ts&quot; : Timestamp(1616314916, 1),</span><br><span class="line">&quot;t&quot; : NumberLong(1)</span><br><span class="line">&#125;,</span><br><span class="line">&quot;optimeDurable&quot; : &#123;</span><br><span class="line">&quot;ts&quot; : Timestamp(1616314916, 1),</span><br><span class="line">&quot;t&quot; : NumberLong(1)</span><br><span class="line">&#125;,</span><br><span class="line">&quot;optimeDate&quot; : ISODate(&quot;2021-03-21T08:21:56Z&quot;),</span><br><span class="line">&quot;optimeDurableDate&quot; : ISODate(&quot;2021-03-21T08:21:56Z&quot;),</span><br><span class="line">&quot;lastHeartbeat&quot; : ISODate(&quot;2021-03-21T08:21:57.867Z&quot;),</span><br><span class="line">&quot;lastHeartbeatRecv&quot; : ISODate(&quot;2021-03-21T08:21:57.871Z&quot;),</span><br><span class="line">&quot;pingMs&quot; : NumberLong(0),</span><br><span class="line">&quot;lastHeartbeatMessage&quot; : &quot;&quot;,</span><br><span class="line">&quot;syncingTo&quot; : &quot;localhost.localdomain:28017&quot;,</span><br><span class="line">&quot;syncSourceHost&quot; : &quot;localhost.localdomain:28017&quot;,</span><br><span class="line">&quot;syncSourceId&quot; : 0,</span><br><span class="line">&quot;infoMessage&quot; : &quot;&quot;,</span><br><span class="line">&quot;configVersion&quot; : 3</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&quot;_id&quot; : 2,</span><br><span class="line">&quot;name&quot; : &quot;10000hours:28018&quot;,</span><br><span class="line">&quot;health&quot; : 1,</span><br><span class="line">&quot;state&quot; : 2,</span><br><span class="line">&quot;stateStr&quot; : &quot;SECONDARY&quot;,</span><br><span class="line">&quot;uptime&quot; : 580,</span><br><span class="line">&quot;optime&quot; : &#123;</span><br><span class="line">&quot;ts&quot; : Timestamp(1616314916, 1),</span><br><span class="line">&quot;t&quot; : NumberLong(1)</span><br><span class="line">&#125;,</span><br><span class="line">&quot;optimeDurable&quot; : &#123;</span><br><span class="line">&quot;ts&quot; : Timestamp(1616314916, 1),</span><br><span class="line">&quot;t&quot; : NumberLong(1)</span><br><span class="line">&#125;,</span><br><span class="line">&quot;optimeDate&quot; : ISODate(&quot;2021-03-21T08:21:56Z&quot;),</span><br><span class="line">&quot;optimeDurableDate&quot; : ISODate(&quot;2021-03-21T08:21:56Z&quot;),</span><br><span class="line">&quot;lastHeartbeat&quot; : ISODate(&quot;2021-03-21T08:21:57.867Z&quot;),</span><br><span class="line">&quot;lastHeartbeatRecv&quot; : ISODate(&quot;2021-03-21T08:21:57.565Z&quot;),</span><br><span class="line">&quot;pingMs&quot; : NumberLong(0),</span><br><span class="line">&quot;lastHeartbeatMessage&quot; : &quot;&quot;,</span><br><span class="line">&quot;syncingTo&quot; : &quot;10000hours:28019&quot;,</span><br><span class="line">&quot;syncSourceHost&quot; : &quot;10000hours:28019&quot;,</span><br><span class="line">&quot;syncSourceId&quot; : 1,</span><br><span class="line">&quot;infoMessage&quot; : &quot;&quot;,</span><br><span class="line">&quot;configVersion&quot; : 3</span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line">&quot;ok&quot; : 1,</span><br><span class="line">&quot;$clusterTime&quot; : &#123;</span><br><span class="line">&quot;clusterTime&quot; : Timestamp(1616314916, 1),</span><br><span class="line">&quot;signature&quot; : &#123;</span><br><span class="line">&quot;hash&quot; : BinData(0,&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAA&#x3D;&quot;),</span><br><span class="line">&quot;keyId&quot; : NumberLong(0)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;operationTime&quot; : Timestamp(1616314916, 1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h2><p>直接使用rs.initiate(),传入配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">rs.initiate(&#123;</span><br><span class="line">        _id:&quot;rs0&quot;,</span><br><span class="line">        members:[</span><br><span class="line">        &#123;_id:0,</span><br><span class="line">        host:&quot;localhost:28017&quot;&#125;,</span><br><span class="line">        &#123;_id:1,</span><br><span class="line">        host:&quot;localhost:28018&quot;&#125;,</span><br><span class="line">        &#123;_id:2,</span><br><span class="line">        host:&quot;localhost:28019&quot;&#125;</span><br><span class="line">        ]</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><h1 id="验证复制集"><a href="#验证复制集" class="headerlink" title="验证复制集"></a>验证复制集</h1><p>在主节点插入数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mongo localhost:28017</span><br><span class="line">db.test.insert(&#123;name:&quot;richey&quot;&#125;)</span><br></pre></td></tr></table></figure><p>在从节点查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mongo localhost:28018</span><br><span class="line"></span><br><span class="line">rs0:SECONDARY&gt; show dbs</span><br><span class="line">2021-03-21T16:31:28.658+0800 E  QUERY    [js] uncaught exception: Error: listDatabases failed:&#123;</span><br><span class="line">&quot;operationTime&quot; : Timestamp(1616315486, 1),</span><br><span class="line">&quot;ok&quot; : 0,</span><br><span class="line">&quot;errmsg&quot; : &quot;not master and slaveOk&#x3D;false&quot;,</span><br><span class="line">&quot;code&quot; : 13435,</span><br><span class="line">&quot;codeName&quot; : &quot;NotPrimaryNoSecondaryOk&quot;,</span><br><span class="line">&quot;$clusterTime&quot; : &#123;</span><br><span class="line">&quot;clusterTime&quot; : Timestamp(1616315486, 1),</span><br><span class="line">&quot;signature&quot; : &#123;</span><br><span class="line">&quot;hash&quot; : BinData(0,&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAA&#x3D;&quot;),</span><br><span class="line">&quot;keyId&quot; : NumberLong(0)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; :</span><br><span class="line">rs0:SECONDARY&gt; </span><br><span class="line">rs0:SECONDARY&gt; rs.slaveOk() # 上面报错，slave没有读权限，执行此命令允许从节点读</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;复制集的作用&quot;&gt;&lt;a href=&quot;#复制集的作用&quot; class=&quot;headerlink&quot; title=&quot;复制集的作用&quot;&gt;&lt;/a&gt;复制集的作用&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;高可用：复制集主要是为了实现服务的高可用,mongoDB原生支持高可用.&lt;/li&gt;
&lt;li&gt;数据
      
    
    </summary>
    
    
      <category term="DB" scheme="http://10000hours.top/categories/DB/"/>
    
    
      <category term="mongoDB" scheme="http://10000hours.top/tags/mongoDB/"/>
    
  </entry>
  
  <entry>
    <title>mongoDB系列00-MongoDB数据库选型</title>
    <link href="http://10000hours.top/2021/03/20/mongoDB%E7%B3%BB%E5%88%9700-MongoDB%E6%95%B0%E6%8D%AE%E5%BA%93%E9%80%89%E5%9E%8B/"/>
    <id>http://10000hours.top/2021/03/20/mongoDB%E7%B3%BB%E5%88%9700-MongoDB%E6%95%B0%E6%8D%AE%E5%BA%93%E9%80%89%E5%9E%8B/</id>
    <published>2021-03-19T16:00:00.000Z</published>
    <updated>2021-03-20T14:24:46.849Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt; show dbs</span><br><span class="line">admin   0.000GB</span><br><span class="line">config  0.000GB</span><br><span class="line">local   0.000GB</span><br><span class="line">mock    0.047GB</span><br><span class="line">salary  0.000GB</span><br><span class="line">test    0.000GB</span><br><span class="line">&gt; use salary</span><br><span class="line">switched to db salary</span><br><span class="line">&gt; show collections</span><br><span class="line">payslip</span><br><span class="line">&gt; db</span><br><span class="line">salary</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基本&quot;&gt;&lt;a href=&quot;#基本&quot; class=&quot;headerlink&quot; title=&quot;基本&quot;&gt;&lt;/a&gt;基本&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="DB" scheme="http://10000hours.top/categories/DB/"/>
    
    
      <category term="mongoDB" scheme="http://10000hours.top/tags/mongoDB/"/>
    
  </entry>
  
  <entry>
    <title>mongoDB系列03-mongoDB聚合操作</title>
    <link href="http://10000hours.top/2021/03/07/mongoDB%E7%B3%BB%E5%88%9703-mongoDB%E8%81%9A%E5%90%88%E6%93%8D%E4%BD%9C/"/>
    <id>http://10000hours.top/2021/03/07/mongoDB%E7%B3%BB%E5%88%9703-mongoDB%E8%81%9A%E5%90%88%E6%93%8D%E4%BD%9C/</id>
    <published>2021-03-06T16:00:00.000Z</published>
    <updated>2021-03-20T15:14:32.752Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt; show dbs</span><br><span class="line">admin   0.000GB</span><br><span class="line">config  0.000GB</span><br><span class="line">local   0.000GB</span><br><span class="line">mock    0.047GB</span><br><span class="line">salary  0.000GB</span><br><span class="line">test    0.000GB</span><br><span class="line">&gt; use salary</span><br><span class="line">switched to db salary</span><br><span class="line">&gt; show collections</span><br><span class="line">payslip</span><br><span class="line">&gt; db</span><br><span class="line">salary</span><br></pre></td></tr></table></figure><h1 id="聚合框架说明"><a href="#聚合框架说明" class="headerlink" title="聚合框架说明"></a>聚合框架说明</h1><p>MongoDB聚合框架（Aggregation Framework）是一个计算框架</p><p>可以作用在一个或几个集合上，对集合的数据进行一系列运算，将这些数据转化为期望的形式</p><p>MongoDB聚合框架相当于SQL查询中的:GROUPBY/LEFT OUTER JOIN /AS 等</p><p>MongoDB聚合中的管道（Pipline）和步骤（Stage）, 整个聚合运算的过程称为管道（Pipline），它是由多个步骤组成的,每个管道:</p><ul><li><p>接收一系列文档（数据）</p></li><li><p>每个步骤对这些文档进行一系列的运算</p></li><li><p>结果文档输出给下一个步骤</p></li></ul><h1 id="聚合运算的基本格式"><a href="#聚合运算的基本格式" class="headerlink" title="聚合运算的基本格式"></a>聚合运算的基本格式</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义pipeline（由一系列的步骤组成）</span></span><br><span class="line">pipeline = [$stage1,$stage2,...$stageN]</span><br><span class="line"></span><br><span class="line">db.&lt;集合&gt;.aggregate(pipeline,&#123;options&#125;)</span><br></pre></td></tr></table></figure><h1 id="常见步骤类型"><a href="#常见步骤类型" class="headerlink" title="常见步骤类型"></a>常见步骤类型</h1><ul><li><p>$match </p><p>过滤用，相当于sql中的where</p></li><li><p>$project </p><p>投影, 相当于sql中的as</p></li><li><p>$sort</p><p>排序， 相当于sql中的order by</p></li><li><p>$group </p><p>分组， 相当于sql中的group by</p></li><li><p>$skip/$limit</p><p>结果限制， 相当于sql中的skip/limit</p></li><li><p>$lookup </p><p>左外连接， 相当于sql中的left outer join </p></li></ul><p><img src="https://blog-pic-1254088127.picsh.myqcloud.com/mongo-aggregate-02.png" alt="常见步骤"></p><h1 id="常见步骤中的运算符"><a href="#常见步骤中的运算符" class="headerlink" title="常见步骤中的运算符"></a>常见步骤中的运算符</h1><p><img src="https://blog-pic-1254088127.picsh.myqcloud.com/mongo-aggregate-01.png" alt="group中常见运算符"></p><h1 id="聚合的使用场景"><a href="#聚合的使用场景" class="headerlink" title="聚合的使用场景"></a>聚合的使用场景</h1><ul><li><p>OLTP</p><p>计算</p></li><li><p>OLAP</p><p>分析总额、均值、数据分布等等</p></li></ul><h1 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h1><p>可以使用compass工具方便的生成聚合逻辑<br>//todo </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基本操作&quot;&gt;&lt;a href=&quot;#基本操作&quot; class=&quot;headerlink&quot; title=&quot;基本操作&quot;&gt;&lt;/a&gt;基本操作&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
    
      <category term="DB" scheme="http://10000hours.top/categories/DB/"/>
    
    
      <category term="mongoDB" scheme="http://10000hours.top/tags/mongoDB/"/>
    
  </entry>
  
  <entry>
    <title>mongoDB系列01-mongoDB基础</title>
    <link href="http://10000hours.top/2021/03/06/mongoDB%E7%B3%BB%E5%88%9701-mongoDB%E5%9F%BA%E7%A1%80/"/>
    <id>http://10000hours.top/2021/03/06/mongoDB%E7%B3%BB%E5%88%9701-mongoDB%E5%9F%BA%E7%A1%80/</id>
    <published>2021-03-05T16:00:00.000Z</published>
    <updated>2021-04-03T06:57:46.723Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><table><thead><tr><th>SQL术语/概念</th><th align="center">MongoDB术语/概念</th><th align="right">解释/说明</th></tr></thead><tbody><tr><td>database</td><td align="center">database</td><td align="right">数据库</td></tr><tr><td>table</td><td align="center">collection</td><td align="right">数据库表/集合</td></tr><tr><td>row</td><td align="center">document</td><td align="right">数据记录行/文档</td></tr><tr><td>column</td><td align="center">field</td><td align="right">数据字段/域</td></tr><tr><td>index</td><td align="center">index</td><td align="right">索引</td></tr><tr><td>table joins</td><td align="center"></td><td align="right">表连接,MongoDB不支持</td></tr><tr><td>primary key</td><td align="center">primary key</td><td align="right">主键,MongoDB自动将_id字段设置为主键</td></tr></tbody></table><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>版本选择：</p><ul><li>企业版</li><li>社区版 所有环境免费使用</li><li>TGZ server mongos tools 和 shell</li></ul><p><a href="https://www.mongodb.com/try/download/community" target="_blank" rel="noopener">下载地址:https://www.mongodb.com/try/download/community</a></p><p>选择好版本后可以生成下载连接,以命令行操作为例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建目录,mongod 默认会使用/data/db目录进行数据存储</span></span><br><span class="line">sudo mkdir -p /data /data/db</span><br><span class="line"></span><br><span class="line">cd /data</span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载安装mongodb</span></span><br><span class="line">curl -O sudo curl -O https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel80-4.2.13-rc1.tgz </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压缩</span></span><br><span class="line"></span><br><span class="line">(base) [richey@localhost data]$ sudo tar -xvf mongodb-linux-x86_64-rhel80-4.2.13-rc1.tgz </span><br><span class="line">mongodb-linux-x86_64-rhel80-4.2.13-rc1/THIRD-PARTY-NOTICES.gotools</span><br><span class="line">mongodb-linux-x86_64-rhel80-4.2.13-rc1/README</span><br><span class="line">mongodb-linux-x86_64-rhel80-4.2.13-rc1/THIRD-PARTY-NOTICES</span><br><span class="line">mongodb-linux-x86_64-rhel80-4.2.13-rc1/MPL-2</span><br><span class="line">mongodb-linux-x86_64-rhel80-4.2.13-rc1/LICENSE-Community.txt</span><br><span class="line">mongodb-linux-x86_64-rhel80-4.2.13-rc1/bin/mongodump</span><br><span class="line">mongodb-linux-x86_64-rhel80-4.2.13-rc1/bin/mongorestore</span><br><span class="line">mongodb-linux-x86_64-rhel80-4.2.13-rc1/bin/mongoexport</span><br><span class="line">mongodb-linux-x86_64-rhel80-4.2.13-rc1/bin/mongoimport</span><br><span class="line">mongodb-linux-x86_64-rhel80-4.2.13-rc1/bin/mongostat</span><br><span class="line">mongodb-linux-x86_64-rhel80-4.2.13-rc1/bin/mongotop</span><br><span class="line">mongodb-linux-x86_64-rhel80-4.2.13-rc1/bin/bsondump</span><br><span class="line">mongodb-linux-x86_64-rhel80-4.2.13-rc1/bin/mongofiles</span><br><span class="line">mongodb-linux-x86_64-rhel80-4.2.13-rc1/bin/mongoreplay</span><br><span class="line">mongodb-linux-x86_64-rhel80-4.2.13-rc1/bin/mongod</span><br><span class="line">mongodb-linux-x86_64-rhel80-4.2.13-rc1/bin/mongos</span><br><span class="line">mongodb-linux-x86_64-rhel80-4.2.13-rc1/bin/mongo</span><br><span class="line">mongodb-linux-x86_64-rhel80-4.2.13-rc1/bin/install_compass</span><br><span class="line">(base) [richey@localhost data]$ ls</span><br><span class="line">db  mongodb-linux-x86_64-rhel80-4.2.13-rc1  mongodb-linux-x86_64-rhel80-4.2.13-rc1.tgz</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置环境变量</span></span><br><span class="line">export PATH=$PATH:/data/mongodb-linux-x86_64-rhel80-4.2.13-rc1/bin</span><br><span class="line"><span class="meta">#</span><span class="bash"> 永久配置</span></span><br><span class="line">sudo vim /etc/profile</span><br><span class="line">在文件最后添加：</span><br><span class="line">export PATH=$PATH:/data/mongodb-linux-x86_64-rhel80-4.2.13-rc1/bin</span><br><span class="line">使配置立马剩下</span><br><span class="line">source /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 此时mongodb就配置好了,可以输入mongod启动服务</span></span><br></pre></td></tr></table></figure><h1 id="直接使用mongodb云服务"><a href="#直接使用mongodb云服务" class="headerlink" title="直接使用mongodb云服务"></a>直接使用mongodb云服务</h1><p>也可以在mongodb官网直接注册，可以创建一个免费的mongodb云存储服务</p><p>创建好后可以配置连接方式，创建用户名密码<br><img src="https://blog-pic-1254088127.picsh.myqcloud.com/Clusters-Atlas-MongoDB-Atlas.png" alt="配置mongodb 云服务"></p><p>选择连接方式<br>![配置mongodb 云服务](<a href="https://blog-pic-1254088127.picsh.myqcloud.com/Clusters-Atlas-MongoDB-Atlas" target="_blank" rel="noopener">https://blog-pic-1254088127.picsh.myqcloud.com/Clusters-Atlas-MongoDB-Atlas</a> -2.png)</p><p>我们已经在本地安装了mongodb，可以选择在shell中连接，复制上面的地址在本地执行，输入密码即可连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MongoDB Enterprise atlas-zh2gha-shard-0:PRIMARY&gt; show dbs</span><br><span class="line">2021-03-06T16:11:21.925+0800 I  CONNPOOL [ReplicaSetMonitor-TaskExecutor] Connecting to cluster0-shard-00-02.leoli.mongodb.net:27017</span><br><span class="line">admin  0.000GB</span><br><span class="line">local  1.253GB</span><br></pre></td></tr></table></figure><h1 id="安装图形化管理工具Compass"><a href="#安装图形化管理工具Compass" class="headerlink" title="安装图形化管理工具Compass"></a>安装图形化管理工具Compass</h1><p>去官网下载合适的包,安装即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(base) [richey@localhost opt]$ sudo rpm -ivh mongodb-compass-1.26.0.x86_64.rpm </span><br><span class="line">警告：mongodb-compass-1.26.0.x86_64.rpm: 头V3 RSA&#x2F;SHA1 Signature, 密钥 ID ea312927: NOKEY</span><br><span class="line">Verifying...                          ################################# [100%]</span><br><span class="line">准备中...                          ################################# [100%]</span><br><span class="line">正在升级&#x2F;安装...</span><br><span class="line">   1:mongodb-compass-1.26.0-1.el7     ################################# [100%]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;SQL术语/概念&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;MongoDB
      
    
    </summary>
    
    
      <category term="DB" scheme="http://10000hours.top/categories/DB/"/>
    
    
      <category term="mongoDB" scheme="http://10000hours.top/tags/mongoDB/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB命令速查</title>
    <link href="http://10000hours.top/2021/03/06/MongoDB%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5/"/>
    <id>http://10000hours.top/2021/03/06/MongoDB%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5/</id>
    <published>2021-03-05T16:00:00.000Z</published>
    <updated>2021-04-17T10:27:02.768Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><table><thead><tr><th>SQL术语/概念</th><th align="center">MongoDB术语/概念</th><th align="right">解释/说明</th></tr></thead><tbody><tr><td>database</td><td align="center">database</td><td align="right">数据库</td></tr><tr><td>table</td><td align="center">collection</td><td align="right">数据库表/集合</td></tr><tr><td>row</td><td align="center">document</td><td align="right">数据记录行/文档</td></tr><tr><td>column</td><td align="center">field</td><td align="right">数据字段/域</td></tr><tr><td>index</td><td align="center">index</td><td align="right">索引</td></tr><tr><td>table joins</td><td align="center"></td><td align="right">表连接,MongoDB不支持</td></tr><tr><td>primary key</td><td align="center">primary key</td><td align="right">主键,MongoDB自动将_id字段设置为主键</td></tr></tbody></table><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>版本选择：</p><ul><li>企业版</li><li>社区版 所有环境免费使用</li><li>TGZ server mongos tools 和 shell</li></ul><p><a href="https://www.mongodb.com/try/download/community" target="_blank" rel="noopener">下载地址:https://www.mongodb.com/try/download/community</a></p><p>选择好版本后可以生成下载连接,以命令行操作为例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建目录,mongod 默认会使用/data/db目录进行数据存储</span></span><br><span class="line">sudo mkdir -p /data /data/db</span><br><span class="line"></span><br><span class="line">cd /data</span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载安装mongodb</span></span><br><span class="line">curl -O sudo curl -O https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel80-4.2.13-rc1.tgz </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压缩</span></span><br><span class="line"></span><br><span class="line">(base) [richey@localhost data]$ sudo tar -xvf mongodb-linux-x86_64-rhel80-4.2.13-rc1.tgz </span><br><span class="line">mongodb-linux-x86_64-rhel80-4.2.13-rc1/THIRD-PARTY-NOTICES.gotools</span><br><span class="line">mongodb-linux-x86_64-rhel80-4.2.13-rc1/README</span><br><span class="line">mongodb-linux-x86_64-rhel80-4.2.13-rc1/THIRD-PARTY-NOTICES</span><br><span class="line">mongodb-linux-x86_64-rhel80-4.2.13-rc1/MPL-2</span><br><span class="line">mongodb-linux-x86_64-rhel80-4.2.13-rc1/LICENSE-Community.txt</span><br><span class="line">mongodb-linux-x86_64-rhel80-4.2.13-rc1/bin/mongodump</span><br><span class="line">mongodb-linux-x86_64-rhel80-4.2.13-rc1/bin/mongorestore</span><br><span class="line">mongodb-linux-x86_64-rhel80-4.2.13-rc1/bin/mongoexport</span><br><span class="line">mongodb-linux-x86_64-rhel80-4.2.13-rc1/bin/mongoimport</span><br><span class="line">mongodb-linux-x86_64-rhel80-4.2.13-rc1/bin/mongostat</span><br><span class="line">mongodb-linux-x86_64-rhel80-4.2.13-rc1/bin/mongotop</span><br><span class="line">mongodb-linux-x86_64-rhel80-4.2.13-rc1/bin/bsondump</span><br><span class="line">mongodb-linux-x86_64-rhel80-4.2.13-rc1/bin/mongofiles</span><br><span class="line">mongodb-linux-x86_64-rhel80-4.2.13-rc1/bin/mongoreplay</span><br><span class="line">mongodb-linux-x86_64-rhel80-4.2.13-rc1/bin/mongod</span><br><span class="line">mongodb-linux-x86_64-rhel80-4.2.13-rc1/bin/mongos</span><br><span class="line">mongodb-linux-x86_64-rhel80-4.2.13-rc1/bin/mongo</span><br><span class="line">mongodb-linux-x86_64-rhel80-4.2.13-rc1/bin/install_compass</span><br><span class="line">(base) [richey@localhost data]$ ls</span><br><span class="line">db  mongodb-linux-x86_64-rhel80-4.2.13-rc1  mongodb-linux-x86_64-rhel80-4.2.13-rc1.tgz</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置环境变量</span></span><br><span class="line">export PATH=$PATH:/data/mongodb-linux-x86_64-rhel80-4.2.13-rc1/bin</span><br><span class="line"><span class="meta">#</span><span class="bash"> 永久配置</span></span><br><span class="line">sudo vim /etc/profile</span><br><span class="line">在文件最后添加：</span><br><span class="line">export PATH=$PATH:/data/mongodb-linux-x86_64-rhel80-4.2.13-rc1/bin</span><br><span class="line">使配置立马剩下</span><br><span class="line">source /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 此时mongodb就配置好了,可以输入mongod启动服务</span></span><br></pre></td></tr></table></figure><h1 id="直接使用mongodb云服务"><a href="#直接使用mongodb云服务" class="headerlink" title="直接使用mongodb云服务"></a>直接使用mongodb云服务</h1><p>也可以在mongodb官网直接注册，可以创建一个免费的mongodb云存储服务</p><p>创建好后可以配置连接方式，创建用户名密码<br><img src="https://blog-pic-1254088127.picsh.myqcloud.com/Clusters-Atlas-MongoDB-Atlas.png" alt="配置mongodb 云服务"></p><p>选择连接方式<br>![配置mongodb 云服务](<a href="https://blog-pic-1254088127.picsh.myqcloud.com/Clusters-Atlas-MongoDB-Atlas" target="_blank" rel="noopener">https://blog-pic-1254088127.picsh.myqcloud.com/Clusters-Atlas-MongoDB-Atlas</a> -2.png)</p><p>我们已经在本地安装了mongodb，可以选择在shell中连接，复制上面的地址在本地执行，输入密码即可连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MongoDB Enterprise atlas-zh2gha-shard-0:PRIMARY&gt; show dbs</span><br><span class="line">2021-03-06T16:11:21.925+0800 I  CONNPOOL [ReplicaSetMonitor-TaskExecutor] Connecting to cluster0-shard-00-02.leoli.mongodb.net:27017</span><br><span class="line">admin  0.000GB</span><br><span class="line">local  1.253GB</span><br></pre></td></tr></table></figure><h1 id="安装图形化管理工具Compass"><a href="#安装图形化管理工具Compass" class="headerlink" title="安装图形化管理工具Compass"></a>安装图形化管理工具Compass</h1><p>去官网下载合适的包,安装即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(base) [richey@localhost opt]$ sudo rpm -ivh mongodb-compass-1.26.0.x86_64.rpm </span><br><span class="line">警告：mongodb-compass-1.26.0.x86_64.rpm: 头V3 RSA&#x2F;SHA1 Signature, 密钥 ID ea312927: NOKEY</span><br><span class="line">Verifying...                          ################################# [100%]</span><br><span class="line">准备中...                          ################################# [100%]</span><br><span class="line">正在升级&#x2F;安装...</span><br><span class="line">   1:mongodb-compass-1.26.0-1.el7     ################################# [100%]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;SQL术语/概念&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;MongoDB
      
    
    </summary>
    
    
      <category term="DB" scheme="http://10000hours.top/categories/DB/"/>
    
    
      <category term="mongoDB" scheme="http://10000hours.top/tags/mongoDB/"/>
    
  </entry>
  
  <entry>
    <title>mongoDB系列02-mongoDB基本操作</title>
    <link href="http://10000hours.top/2021/03/06/mongoDB%E7%B3%BB%E5%88%9702-mongoDB%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://10000hours.top/2021/03/06/mongoDB%E7%B3%BB%E5%88%9702-mongoDB%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</id>
    <published>2021-03-05T16:00:00.000Z</published>
    <updated>2021-03-06T16:19:52.025Z</updated>
    
    <content type="html"><![CDATA[<h1 id="intert插入操作"><a href="#intert插入操作" class="headerlink" title="intert插入操作"></a>intert插入操作</h1><p>db.&lt;集合&gt;.insertOne(&lt;JSON对象&gt;)<br>db.&lt;集合&gt;.insertMany([&lt;JSON 1&gt;,…<JSON n>])</p><p>demo:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.staff.insertOne(&#123;name:&quot;Richey&quot;&#125;)</span><br><span class="line">&#123;</span><br><span class="line">&quot;acknowledged&quot; : true,</span><br><span class="line">&quot;insertedId&quot; : ObjectId(&quot;60434c93b562b8d1012436aa&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&gt; db.staff.insertMany([&#123;name:&quot;Kelly&quot;&#125;,&#123;name:&quot;Darwin&quot;&#125;,&#123;name:&quot;Freeman&quot;&#125;])</span><br><span class="line">&#123;</span><br><span class="line">&quot;acknowledged&quot; : true,</span><br><span class="line">&quot;insertedIds&quot; : [</span><br><span class="line">ObjectId(&quot;60434cffb562b8d1012436ab&quot;),</span><br><span class="line">ObjectId(&quot;60434cffb562b8d1012436ac&quot;),</span><br><span class="line">ObjectId(&quot;60434cffb562b8d1012436ad&quot;)</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&gt; db.staff.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60434c93b562b8d1012436aa&quot;), &quot;name&quot; : &quot;Richey&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60434cffb562b8d1012436ab&quot;), &quot;name&quot; : &quot;Kelly&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60434cffb562b8d1012436ac&quot;), &quot;name&quot; : &quot;Darwin&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60434cffb562b8d1012436ad&quot;), &quot;name&quot; : &quot;Freeman&quot; &#125;</span><br></pre></td></tr></table></figure><h1 id="find查找数据"><a href="#find查找数据" class="headerlink" title="find查找数据"></a>find查找数据</h1><p>查询所有数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.&lt;集合&gt;.find()</span><br></pre></td></tr></table></figure><h2 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.staff.insertMany([&#123;name:&quot;Jobs&quot;,age:18&#125;,&#123;name:&quot;Lili&quot;,gender:&quot;Female&quot;&#125;])</span><br><span class="line">&#123;</span><br><span class="line">&quot;acknowledged&quot; : true,</span><br><span class="line">&quot;insertedIds&quot; : [</span><br><span class="line">ObjectId(&quot;60434f08b562b8d1012436ae&quot;),</span><br><span class="line">ObjectId(&quot;60434f08b562b8d1012436af&quot;)</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">#单条件查询</span><br><span class="line"></span><br><span class="line">&gt; db.staff.find(&#123;&quot;age&quot;:18&#125;)</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60434f08b562b8d1012436ae&quot;), &quot;name&quot; : &quot;Jobs&quot;, &quot;age&quot; : 18 &#125;</span><br><span class="line">#多条件and查询</span><br><span class="line">&gt; db.staff.find(&#123;&quot;name&quot;:&quot;Jobs&quot;,&quot;age&quot;:18&#125;)</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60434f08b562b8d1012436ae&quot;), &quot;name&quot; : &quot;Jobs&quot;, &quot;age&quot; : 18 &#125;</span><br><span class="line">&gt; db.staff.find(&#123;$and:[&#123;&quot;name&quot;:&quot;Jobs&quot;&#125;,&#123;&quot;age&quot;:18&#125;]&#125;)</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60434f08b562b8d1012436ae&quot;), &quot;name&quot; : &quot;Jobs&quot;, &quot;age&quot; : 18 &#125;</span><br><span class="line">#多条件or查询</span><br><span class="line">&gt; db.staff.find(&#123;$or:[&#123;&quot;age&quot;:18&#125;,&#123;&quot;gender&quot;:&quot;Female&quot;&#125;]&#125;)</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60434f08b562b8d1012436ae&quot;), &quot;name&quot; : &quot;Jobs&quot;, &quot;age&quot; : 18 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60434f08b562b8d1012436af&quot;), &quot;name&quot; : &quot;Lili&quot;, &quot;gender&quot; : &quot;Female&quot; &#125;</span><br><span class="line">#按正则表达式查询</span><br><span class="line"></span><br><span class="line">&gt; db.staff.find(&#123;&quot;name&quot;:&#x2F;^\b&#x2F;&#125;)</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60434c93b562b8d1012436aa&quot;), &quot;name&quot; : &quot;Richey&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60434cffb562b8d1012436ab&quot;), &quot;name&quot; : &quot;Kelly&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60434cffb562b8d1012436ac&quot;), &quot;name&quot; : &quot;Darwin&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60434cffb562b8d1012436ad&quot;), &quot;name&quot; : &quot;Freeman&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60434f08b562b8d1012436ae&quot;), &quot;name&quot; : &quot;Jobs&quot;, &quot;age&quot; : 18 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60434f08b562b8d1012436af&quot;), &quot;name&quot; : &quot;Lili&quot;, &quot;gender&quot; : &quot;Female&quot; &#125;</span><br></pre></td></tr></table></figure><h2 id="find搜索子文档"><a href="#find搜索子文档" class="headerlink" title="find搜索子文档"></a>find搜索子文档</h2><p>find支持使用”field.sub_field”形式查询子文档</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">db.staff.insertOne(&#123;&quot;name&quot;:&quot;ZSan&quot;,&quot;age&quot;:28,&quot;addr&quot;:&#123;&quot;city&quot;:&quot;ShangHai&quot;,&quot;street&quot;:&quot;华夏西路188号&quot;&#125;&#125;)</span><br><span class="line">&#123;</span><br><span class="line">&quot;acknowledged&quot; : true,</span><br><span class="line">&quot;insertedId&quot; : ObjectId(&quot;60435997b562b8d1012436b0&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&gt; db.staff.find(&#123;&quot;addr.city&quot;:&quot;ShangHai&quot;&#125;)</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60435997b562b8d1012436b0&quot;), &quot;name&quot; : &quot;ZSan&quot;, &quot;age&quot; : 28, &quot;addr&quot; : &#123; &quot;city&quot; : &quot;ShangHai&quot;, &quot;street&quot; : &quot;华夏西路188号&quot; &#125; &#125;</span><br><span class="line"># 下面这种写法是错误的，子文档的查询应该用上面的写法</span><br><span class="line">&gt; db.staff.find(&#123;&quot;addr&quot;:&#123;&quot;city&quot;:&quot;ShangHai&quot;&#125;&#125;)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h2 id="find搜索数组"><a href="#find搜索数组" class="headerlink" title="find搜索数组"></a>find搜索数组</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.staff.insertOne(&#123;&quot;name&quot;:&quot;LSi&quot;,&quot;food&quot;:[&quot;egg&quot;,&quot;bread&quot;,&quot;milk&quot;]&#125;)</span><br><span class="line">&#123;</span><br><span class="line">&quot;acknowledged&quot; : true,</span><br><span class="line">&quot;insertedId&quot; : ObjectId(&quot;60435bbbb562b8d1012436b1&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&gt; db.staff.find(&#123;&quot;food&quot;:&quot;egg&quot;&#125;)</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60435bbbb562b8d1012436b1&quot;), &quot;name&quot; : &quot;LSi&quot;, &quot;food&quot; : [ &quot;egg&quot;, &quot;bread&quot;, &quot;milk&quot; ] &#125;</span><br><span class="line">&gt; db.staff.find(&#123;$or:[&#123;&quot;food&quot;:&quot;egg&quot;&#125;,&#123;&quot;food&quot;:&quot;milk&quot;&#125;]&#125;)</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60435bbbb562b8d1012436b1&quot;), &quot;name&quot; : &quot;LSi&quot;, &quot;food&quot; : [ &quot;egg&quot;, &quot;bread&quot;, &quot;milk&quot; ] &#125;</span><br></pre></td></tr></table></figure><p>数组中搜索子对象的多个字段时，用$elemMatch表示必须是同一个子对象满足多个条件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.staff.insertOne(&#123;&quot;name&quot;:&quot;WWu&quot;,&quot;favorite_books&quot;:[&#123;&quot;title&quot;:&quot;The Old Man and the Sea&quot;,&quot;author&quot;:&quot;Hemingway&quot;&#125;,&#123;&quot;title&quot;:&quot;围城&quot;,&quot;author&quot;:&quot;钱锺书&quot;&#125;]&#125;)</span><br><span class="line">&#123;</span><br><span class="line">&quot;acknowledged&quot; : true,</span><br><span class="line">&quot;insertedId&quot; : ObjectId(&quot;60435df1b562b8d1012436b2&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&gt; db.staff.find(&#123;&quot;favorite_books.title&quot;:&quot;The Old Man and the Sea&quot;,&quot;favorite_books.author&quot;:&quot;钱锺书&quot;&#125;)</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60435df1b562b8d1012436b2&quot;), &quot;name&quot; : &quot;WWu&quot;, &quot;favorite_books&quot; : [ &#123; &quot;title&quot; : &quot;The Old Man and the Sea&quot;, &quot;author&quot; : &quot;Hemingway&quot; &#125;, &#123; &quot;title&quot; : &quot;围城&quot;, &quot;author&quot; : &quot;钱锺书&quot; &#125; ] &#125;</span><br><span class="line">&gt; db.staff.find(&#123;&quot;favorite_books&quot;:&#123;$elemMatch:&#123;&quot;title&quot;:&quot;The Old Man and the Sea&quot;,&quot;author&quot;:&quot;钱锺书&quot;&#125;&#125;&#125;)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h2 id="控制find返回的字段-投影projection"><a href="#控制find返回的字段-投影projection" class="headerlink" title="控制find返回的字段(投影projection)"></a>控制find返回的字段(投影projection)</h2><p>find可以指定只返回指定的字段</p><p>_id字段必须明确指定不返回，否则默认返回</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.staff.find(&#123;$or:[&#123;&quot;food&quot;:&quot;egg&quot;&#125;,&#123;&quot;food&quot;:&quot;milk&quot;&#125;]&#125;,&#123;&quot;_id&quot;:0,&quot;name&quot;:1,&quot;food&quot;:1&#125;)</span><br><span class="line">&#123; &quot;name&quot; : &quot;LSi&quot;, &quot;food&quot; : [ &quot;egg&quot;, &quot;bread&quot;, &quot;milk&quot; ] &#125;</span><br><span class="line"></span><br><span class="line">&gt; db.staff.find(&#123;&#125;,&#123;&quot;_id&quot;:0,&quot;name&quot;:1,&quot;food&quot;:1&#125;)</span><br><span class="line">&#123; &quot;name&quot; : &quot;Richey&quot; &#125;</span><br><span class="line">&#123; &quot;name&quot; : &quot;Kelly&quot; &#125;</span><br><span class="line">&#123; &quot;name&quot; : &quot;Darwin&quot; &#125;</span><br><span class="line">&#123; &quot;name&quot; : &quot;Freeman&quot; &#125;</span><br><span class="line">&#123; &quot;name&quot; : &quot;Jobs&quot; &#125;</span><br><span class="line">&#123; &quot;name&quot; : &quot;Lili&quot; &#125;</span><br><span class="line">&#123; &quot;name&quot; : &quot;ZSan&quot; &#125;</span><br><span class="line">&#123; &quot;name&quot; : &quot;LSi&quot;, &quot;food&quot; : [ &quot;egg&quot;, &quot;bread&quot;, &quot;milk&quot; ] &#125;</span><br><span class="line">&#123; &quot;name&quot; : &quot;WWu&quot; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h1 id="使用remove删除文档"><a href="#使用remove删除文档" class="headerlink" title="使用remove删除文档"></a>使用remove删除文档</h1><p>remove 命令必须配合查询条件使用，否则mongo会报错，需要要删除全部可以使用空条件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.staff.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60434c93b562b8d1012436aa&quot;), &quot;name&quot; : &quot;Richey&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60434cffb562b8d1012436ab&quot;), &quot;name&quot; : &quot;Kelly&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60434cffb562b8d1012436ac&quot;), &quot;name&quot; : &quot;Darwin&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60434cffb562b8d1012436ad&quot;), &quot;name&quot; : &quot;Freeman&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60434f08b562b8d1012436ae&quot;), &quot;name&quot; : &quot;Jobs&quot;, &quot;age&quot; : 18 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60434f08b562b8d1012436af&quot;), &quot;name&quot; : &quot;Lili&quot;, &quot;gender&quot; : &quot;Female&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60435997b562b8d1012436b0&quot;), &quot;name&quot; : &quot;ZSan&quot;, &quot;age&quot; : 28, &quot;addr&quot; : &#123; &quot;city&quot; : &quot;ShangHai&quot;, &quot;street&quot; : &quot;华夏西路188号&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60435bbbb562b8d1012436b1&quot;), &quot;name&quot; : &quot;LSi&quot;, &quot;food&quot; : [ &quot;egg&quot;, &quot;bread&quot;, &quot;milk&quot; ] &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60435df1b562b8d1012436b2&quot;), &quot;name&quot; : &quot;WWu&quot;, &quot;favorite_books&quot; : [ &#123; &quot;title&quot; : &quot;The Old Man and the Sea&quot;, &quot;author&quot; : &quot;Hemingway&quot; &#125;, &#123; &quot;title&quot; : &quot;围城&quot;, &quot;author&quot; : &quot;钱锺书&quot; &#125; ] &#125;</span><br><span class="line">&gt; db.staff.remove(&#123;&quot;name&quot;:&quot;Jobs&quot;&#125;)</span><br><span class="line">WriteResult(&#123; &quot;nRemoved&quot; : 1 &#125;)</span><br><span class="line">&gt; db.staff.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60434c93b562b8d1012436aa&quot;), &quot;name&quot; : &quot;Richey&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60434cffb562b8d1012436ab&quot;), &quot;name&quot; : &quot;Kelly&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60434cffb562b8d1012436ac&quot;), &quot;name&quot; : &quot;Darwin&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60434cffb562b8d1012436ad&quot;), &quot;name&quot; : &quot;Freeman&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60434f08b562b8d1012436af&quot;), &quot;name&quot; : &quot;Lili&quot;, &quot;gender&quot; : &quot;Female&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60435997b562b8d1012436b0&quot;), &quot;name&quot; : &quot;ZSan&quot;, &quot;age&quot; : 28, &quot;addr&quot; : &#123; &quot;city&quot; : &quot;ShangHai&quot;, &quot;street&quot; : &quot;华夏西路188号&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60435bbbb562b8d1012436b1&quot;), &quot;name&quot; : &quot;LSi&quot;, &quot;food&quot; : [ &quot;egg&quot;, &quot;bread&quot;, &quot;milk&quot; ] &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60435df1b562b8d1012436b2&quot;), &quot;name&quot; : &quot;WWu&quot;, &quot;favorite_books&quot; : [ &#123; &quot;title&quot; : &quot;The Old Man and the Sea&quot;, &quot;author&quot; : &quot;Hemingway&quot; &#125;, &#123; &quot;title&quot; : &quot;围城&quot;, &quot;author&quot; : &quot;钱锺书&quot; &#125; ] &#125;</span><br><span class="line">&gt; db.staff.remove(&#123;&#125;)</span><br><span class="line">WriteResult(&#123; &quot;nRemoved&quot; : 8 &#125;)</span><br><span class="line">&gt; db.staff.find()</span><br></pre></td></tr></table></figure><h1 id="使用update更新文档"><a href="#使用update更新文档" class="headerlink" title="使用update更新文档"></a>使用update更新文档</h1><p>db.&lt;集合&gt;.updat(&lt;查询条件&gt;,&lt;更新字段&gt;)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.staff.insertMany([&#123;&quot;name&quot;:&quot;Richey&quot;,&quot;age&quot;:18&#125;,&#123;&quot;name&quot;:&quot;Kelly&quot;,&quot;age&quot;:20&#125;])</span><br><span class="line">&#123;</span><br><span class="line">&quot;acknowledged&quot; : true,</span><br><span class="line">&quot;insertedIds&quot; : [</span><br><span class="line">ObjectId(&quot;60439f09b562b8d1012436b3&quot;),</span><br><span class="line">ObjectId(&quot;60439f09b562b8d1012436b4&quot;)</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&gt; db.staff.updateOne(&#123;&quot;name&quot;:&quot;Richey&quot;&#125;,&#123;$set:&#123;&quot;age&quot;:24&#125;&#125;)</span><br><span class="line">WriteResult(&#123; &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 1 &#125;)</span><br><span class="line">&gt; db.staff.find(&#123;&quot;name&quot;:&quot;Richey&quot;&#125;)</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60439f09b562b8d1012436b3&quot;), &quot;name&quot; : &quot;Richey&quot;, &quot;age&quot; : 24 &#125;</span><br></pre></td></tr></table></figure><p>使用updateOne无论条件匹配多少条，都只会更新第一条</p><p>使用updateMany表示条件匹配多少条就更新多少条</p><p>使用updateOne/updateMany发方法要求更新条件部份（第二个参数）必须具有以下之一，否则报错：</p><ul><li>$set/$unset</li><li>$push/$pushAll/$pop</li><li>$pull/$pullAll</li><li>$addToSet</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$push :增加一个对象到数据底部</span><br><span class="line">$pushAll： 增加多个对象到数组底部</span><br><span class="line">$pop： 从数组底部删除一个对象</span><br><span class="line">$pull： 如果匹配指定的值，则从数组中删除相应的对象</span><br><span class="line">$pullAll： 如果匹配任意的值，则从数组中三处相应的对象</span><br><span class="line">$addToSet： 如果不存在则增加一个值到数组</span><br></pre></td></tr></table></figure><h1 id="使用drop删除集合"><a href="#使用drop删除集合" class="headerlink" title="使用drop删除集合"></a>使用drop删除集合</h1><p>db.&lt;集合&gt;.drop()</p><p>集合中的全部文档都会被删除</p><p>集合相关的索引也会被删除</p><p>一定要谨慎使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; use test</span><br><span class="line">switched to db test</span><br><span class="line">&gt; show collections</span><br><span class="line">staff</span><br><span class="line">&gt; db.staff.drop()</span><br><span class="line">true</span><br><span class="line">&gt; show collections</span><br></pre></td></tr></table></figure><h1 id="使用dropDatabase删除数据库"><a href="#使用dropDatabase删除数据库" class="headerlink" title="使用dropDatabase删除数据库"></a>使用dropDatabase删除数据库</h1><p>db.dropDatabase()</p><p>数据库相应的文件也会被删除，磁盘空间将被释放</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt; show dbs</span><br><span class="line">admin   0.000GB</span><br><span class="line">config  0.000GB</span><br><span class="line">local   0.000GB</span><br><span class="line">mock    0.047GB</span><br><span class="line">test    0.000GB</span><br><span class="line">&gt; use test</span><br><span class="line">switched to db test</span><br><span class="line">&gt; db.dropDatabase()</span><br><span class="line">&#123; &quot;dropped&quot; : &quot;test&quot;, &quot;ok&quot; : 1 &#125;</span><br><span class="line">&gt; show dbs</span><br><span class="line">admin   0.000GB</span><br><span class="line">config  0.000GB</span><br><span class="line">local   0.000GB</span><br><span class="line">mock    0.047GB</span><br><span class="line">&gt; show collections</span><br></pre></td></tr></table></figure><h1 id="SQL和MQL查询逻辑对照"><a href="#SQL和MQL查询逻辑对照" class="headerlink" title="SQL和MQL查询逻辑对照"></a>SQL和MQL查询逻辑对照</h1><p><a href="https://docs.mongodb.com/manual/reference/sql-comparison/" target="_blank" rel="noopener">官方文档</a></p><p><img src="https://blog-pic-1254088127.picsh.myqcloud.com/sql-mapping-mql.png" alt="SQL-MAPPING-MQL"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;intert插入操作&quot;&gt;&lt;a href=&quot;#intert插入操作&quot; class=&quot;headerlink&quot; title=&quot;intert插入操作&quot;&gt;&lt;/a&gt;intert插入操作&lt;/h1&gt;&lt;p&gt;db.&amp;lt;集合&amp;gt;.insertOne(&amp;lt;JSON对象&amp;gt;
      
    
    </summary>
    
    
      <category term="DB" scheme="http://10000hours.top/categories/DB/"/>
    
    
      <category term="mongoDB" scheme="http://10000hours.top/tags/mongoDB/"/>
    
  </entry>
  
  <entry>
    <title>python-操作mongodb</title>
    <link href="http://10000hours.top/2021/03/01/python-%E6%93%8D%E4%BD%9Cmongodb/"/>
    <id>http://10000hours.top/2021/03/01/python-%E6%93%8D%E4%BD%9Cmongodb/</id>
    <published>2021-02-28T16:00:00.000Z</published>
    <updated>2021-03-07T10:26:06.785Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装Python-MongoDB驱动"><a href="#安装Python-MongoDB驱动" class="headerlink" title="安装Python MongoDB驱动"></a>安装Python MongoDB驱动</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pip install pymongo</span><br><span class="line">``` </span><br><span class="line"><span class="comment"># 检查驱动安装</span></span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pymongo</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pymongo.version</span><br><span class="line"><span class="string">'3.11.3'</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h1 id="创建连接"><a href="#创建连接" class="headerlink" title="创建连接"></a>创建连接</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>uri = <span class="string">"mongodb://127.0.0.1:27017"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>client = MongoClient(uri)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(client)</span><br><span class="line">MongoClient(host=[<span class="string">'127.0.0.1:27017'</span>], document_class=dict, tz_aware=<span class="literal">False</span>, connect=<span class="literal">True</span>)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h1 id="操作数据库和集合"><a href="#操作数据库和集合" class="headerlink" title="操作数据库和集合"></a>操作数据库和集合</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>db = client[<span class="string">"salary"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>payslip_collection = db[<span class="string">"payslip"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>new_payslip = &#123;<span class="string">"basesalary"</span>:<span class="number">2800</span>,<span class="string">"bonus"</span>:<span class="number">8000</span>,<span class="string">"performances"</span>:<span class="number">1600</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>result = payslip_collection.insert_one(new_payslip)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(result)</span><br><span class="line">&lt;pymongo.results.InsertOneResult object at <span class="number">0x7fd8ee8cdf00</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; show dbs</span><br><span class="line">admin   <span class="number">0.000</span>GB</span><br><span class="line">config  <span class="number">0.000</span>GB</span><br><span class="line">local   <span class="number">0.000</span>GB</span><br><span class="line">mock    <span class="number">0.047</span>GB</span><br><span class="line">salary  <span class="number">0.000</span>GB</span><br><span class="line">test    <span class="number">0.000</span>GB</span><br><span class="line">&gt; use salary</span><br><span class="line">switched to db salary</span><br><span class="line">&gt; show collections</span><br><span class="line">payslip</span><br><span class="line">&gt; db.payslip.find()</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"6044a74ca6868ddcfa42c426"</span>), <span class="string">"basesalary"</span> : <span class="number">2800</span>, <span class="string">"bonus"</span> : <span class="number">8000</span>, <span class="string">"performances"</span> : <span class="number">1600</span> &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h1 id="更新操作"><a href="#更新操作" class="headerlink" title="更新操作"></a>更新操作</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>result = payslip_collection.update_one(&#123;<span class="string">"basesalary"</span>:<span class="number">2800</span>&#125;,&#123;<span class="string">"$set"</span>:&#123;<span class="string">"positionsalary"</span>:<span class="number">3000</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line">&gt; db.payslip.find()</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"6044a74ca6868ddcfa42c426"</span>), <span class="string">"basesalary"</span> : <span class="number">2800</span>, <span class="string">"bonus"</span> : <span class="number">8000</span>, <span class="string">"performances"</span> : <span class="number">1600</span>, <span class="string">"positionsalary"</span> : <span class="number">3000</span> &#125;</span><br><span class="line">&gt; </span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里不需要修改数据库表结构</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装Python-MongoDB驱动&quot;&gt;&lt;a href=&quot;#安装Python-MongoDB驱动&quot; class=&quot;headerlink&quot; title=&quot;安装Python MongoDB驱动&quot;&gt;&lt;/a&gt;安装Python MongoDB驱动&lt;/h1&gt;&lt;figure c
      
    
    </summary>
    
    
      <category term="Phthon" scheme="http://10000hours.top/categories/Phthon/"/>
    
    
      <category term="Python" scheme="http://10000hours.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>jupyter环境搭建</title>
    <link href="http://10000hours.top/2021/02/20/jupyter%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://10000hours.top/2021/02/20/jupyter%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2021-02-19T16:00:00.000Z</published>
    <updated>2021-02-19T15:27:26.928Z</updated>
    
    <content type="html"><![CDATA[<ol><li>安装anaconda</li><li>pycharm中新建项目配置环境变量为conda</li><li>安装必要的包</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip3 install -i https:&#x2F;&#x2F;pypi.doubanio.com&#x2F;simple pandas jupyter xlrd openpyxl pillow matplotlib seaborn</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;安装anaconda&lt;/li&gt;
&lt;li&gt;pycharm中新建项目配置环境变量为conda&lt;/li&gt;
&lt;li&gt;安装必要的包&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte
      
    
    </summary>
    
    
      <category term="Phthon" scheme="http://10000hours.top/categories/Phthon/"/>
    
    
      <category term="Python" scheme="http://10000hours.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Kafka重平衡（Rebalance）</title>
    <link href="http://10000hours.top/2021/02/20/Kafka%E9%87%8D%E5%B9%B3%E8%A1%A1%EF%BC%88Rebalance%EF%BC%89/"/>
    <id>http://10000hours.top/2021/02/20/Kafka%E9%87%8D%E5%B9%B3%E8%A1%A1%EF%BC%88Rebalance%EF%BC%89/</id>
    <published>2021-02-19T16:00:00.000Z</published>
    <updated>2021-02-21T10:08:06.350Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是Rebalance"><a href="#什么是Rebalance" class="headerlink" title="什么是Rebalance"></a>什么是Rebalance</h1><p>首先要搞清楚，为什么要Rebalance：由于消费者组订阅了topic，因topic partition数和消费者组成员个数不同而存在的分配机制。</p><p>Rebalance是让Consumer Group下所有的Consumer重新分配Topic的每个分区的过程。</p><p>Rebalance过程所有的consumer都会参与，在协调者组件（Coordinator）的帮助下，完成主题分区的分配。</p><p>整个Rebalance过程，所有Consumer都不能消费，而且这个过程比较慢。</p><h1 id="什么时候会Rebalance"><a href="#什么时候会Rebalance" class="headerlink" title="什么时候会Rebalance"></a>什么时候会Rebalance</h1><p>有三种情况会触发Rebalance：</p><ol><li><p>有新的Consumer加入Consumer Group</p></li><li><p>Consumer Group订阅的主题数量发生变化</p></li><li><p>Consumer Group订阅的主题的数量发生变化</p></li></ol><p>Rebalance时Consumer Group内所有的consumer都会参与。</p><h1 id="如何避免Rebalance"><a href="#如何避免Rebalance" class="headerlink" title="如何避免Rebalance"></a>如何避免Rebalance</h1><p>上面说了有三种情况会发生Rebalance，只要这三种情况的任一情况发生，都必然会产生Rebalance。这三种情况有些是计划内的，比如增加一个Consumer，调整分区数，添加或减少<br>某个主题的订阅。</p><p>我们只能尽量避免那些必不要的Rebalance，比如某些情况Consumer被Coordinator错误的认为已停止，从而被提出Consumer Group。</p><ul><li><p>Coordinator什么情况会认为Consumer已停止？</p><p>Consumer会定时往Coordinator发送心跳，证明它还活着。如果Consumer不能及时的发送这个心跳请求，就会被Coordinator认为已经死了，从而将其从Group中移除，然后进行Rebalance。<br>Consumer端的参数session.timeout.ms决定了Consumer存活性的时间间隔，默认10s，即Coordinator如果10s内没有收到Consuner的心跳请求，即认为Consumer死亡。</p><p>Consumer参数heartbeat.interval.ms 控制的是Consumer端发送心跳请求的间隔。这个值越小心跳频次发送的越高，占用带宽越多，但是可以更快的知道是否需要Rebalance，<br>因为Coordinator通知各个Consumer机型Rabalance的方式就是将 REBALANCE_NEEDED 标志封装进心跳请求的响应体中。</p><p>Consumer参数 max.poll.interval.ms 限定了Consumer端两次调用poll方法的最大时间间隔，默认5分钟。即如果在5分钟内无法完成poll方法返回的消息，则Consumer会主动发起离开组的请求，Coorditator也会开始新一轮的Rabalance.也可以修改max.poll.records参数，减少一次poll拉取的消息数，从而减少消费时间。</p><p>Consumer参数说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">session.timeout.ms 决定了 Consumer 存活性的时间间隔</span><br><span class="line">heartbeat.interval.ms 控制的是Consumer端发送心跳请求的间隔</span><br><span class="line">max.poll.interval.ms 限定了Consumer端两次调用poll方法的最大时间间隔（即是处理一次poll方法返回消息的最大允许时间）</span><br></pre></td></tr></table></figure></li><li><p>Consumer未及时发送心跳导致的Rebalance</p><p>上面我们说了Consumer发送的心跳频次的参数和Coordinator认为Consumer死亡时间的参数。所以为了避免Coordinator错误的判断Consumer死亡的发生，我们要在较短的时间内，较多的发送请求。推荐参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 在Coordinator认为Consumer死亡之前（6s内），发送三次心跳请求</span><br><span class="line">session.timeout.ms &#x3D; 6s</span><br><span class="line">heartbeat.interval.ms &#x3D; 2s</span><br></pre></td></tr></table></figure></li><li><p>Consumer消费时间过长导致的Rebalance</p><p>上面说了max.poll.interval.ms时间内Consumer没有消费完上次poll拉取的消息，则Consumber会主动请求离开组，然后Coordinator进行Rebalance。<br>所以需要了解业务处理时间，合理的设置max.poll.interval.ms</p></li></ul><ul><li><p>频繁Full GC引起的Rebalance</p><p>Full GC导致的长时间停顿，导致业务没有在正常时间内处理完，触发max.poll.interval.ms超时时间，产生Rebalance。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是Rebalance&quot;&gt;&lt;a href=&quot;#什么是Rebalance&quot; class=&quot;headerlink&quot; title=&quot;什么是Rebalance&quot;&gt;&lt;/a&gt;什么是Rebalance&lt;/h1&gt;&lt;p&gt;首先要搞清楚，为什么要Rebalance：由于消费者组订阅了
      
    
    </summary>
    
    
      <category term="MQ" scheme="http://10000hours.top/categories/MQ/"/>
    
    
      <category term="kafka" scheme="http://10000hours.top/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>Python库-Pandas说明</title>
    <link href="http://10000hours.top/2021/02/19/Python%E5%BA%93-Pandas%E8%AF%B4%E6%98%8E/"/>
    <id>http://10000hours.top/2021/02/19/Python%E5%BA%93-Pandas%E8%AF%B4%E6%98%8E/</id>
    <published>2021-02-18T16:00:00.000Z</published>
    <updated>2021-02-22T16:05:43.957Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><a href="https://pandas.pydata.org/docs/index.html" target="_blank" rel="noopener">pandas官网</a><br>pandas 是用来做数据分析的一个工具库，为Python编程语言提供高性能、易用的数据结构和数据分析工具</p><p>也可以简单的认为pandans是Python中的excel表</p><h1 id="对比列表-numpy-pandas"><a href="#对比列表-numpy-pandas" class="headerlink" title="对比列表/numpy/pandas"></a>对比列表/numpy/pandas</h1><ul><li><p>列表里的元素可以是python中的任意对象，使用方便，但是存在性能问题</p></li><li><p>numpy 是一个多维的数组结构，区别于列表，numpy只能保存同一类型的数据，通常为数值型，numpy大大提高了对于数据类型的计算效率</p></li><li><p>pandas 构建在numpy之上，继承了numpy的高效，同时又更易于使用</p><p><img src="https://blog-pic-1254088127.picsh.myqcloud.com/python-list-nunpy-pandas.png" alt="list-numpy-pandas"></p></li></ul><p>易用性示例：</p><p>  <img src="https://blog-pic-1254088127.picsh.myqcloud.com/pandas02.png" alt="pandas"></p><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><p>pandas 没有3维及以上数据结构</p><ol><li><p>Seris</p><p>一维数据</p></li><li><p>DataFrame</p><p>二维数据,DataFrame中的每一列都是Seris</p><p>read_excel</p><p>to_excel</p><p>append() 上下拼接多个表格</p><p>join（） 左右拼接两个表格</p><p>concat() 通过设置axis参数，上下或左右拼接多个表格</p><p>merge() 相当于excel中的vlookup，通过同一列相同的元素把两个表格合并在一起</p><p>pivot_table 相当于excel中的透视操作</p><p>rolling() 固定窗口滚动操作</p><p>expanding() 扩展窗口操作</p></li></ol><h1 id="创建Series"><a href="#创建Series" class="headerlink" title="创建Series"></a>创建Series</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">s</span><br></pre></td></tr></table></figure><pre><code>0    11    22    3dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">              index=list(<span class="string">'abc'</span>),</span><br><span class="line">              dtype=<span class="string">'int64'</span>,</span><br><span class="line">              name=<span class="string">'num'</span>)</span><br><span class="line">s</span><br></pre></td></tr></table></figure><pre><code>a    1b    2c    3Name: num, dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">'a'</span>:<span class="number">1</span>,<span class="string">'b'</span>:<span class="number">2</span>,<span class="string">'c'</span>:<span class="number">3</span>&#125;</span><br><span class="line">s = pd.Series(d)</span><br><span class="line">s</span><br></pre></td></tr></table></figure><pre><code>a    1b    2c    3dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = pd.Series(<span class="number">3.0</span>,index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>])</span><br><span class="line">s</span><br></pre></td></tr></table></figure><pre><code>a    3.0b    3.0c    3.0dtype: float64</code></pre><p>实际开发中，我们一般通过读取Excel创建</p><h1 id="创建DataFrame"><a href="#创建DataFrame" class="headerlink" title="创建DataFrame"></a>创建DataFrame</h1><ul><li>通过二维list-like创建</li><li>通过字典创建</li><li>通过读取Excel表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list_2d = [[<span class="number">1</span>,<span class="number">2</span>],</span><br><span class="line">           [<span class="number">3</span>,<span class="number">4</span>]]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(list_2d)</span><br><span class="line">df</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1</td>      <td>2</td>    </tr>    <tr>      <th>1</th>      <td>3</td>      <td>4</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(list_2d,</span><br><span class="line">                  columns=[<span class="string">'A'</span>,<span class="string">'B'</span>],</span><br><span class="line">                  index=[<span class="string">'x'</span>,<span class="string">'y'</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">'A'</span>:[<span class="number">1</span>,<span class="number">3</span>],<span class="string">'B'</span>:[<span class="number">2</span>,<span class="number">4</span>]&#125;</span><br><span class="line">df = pd.DataFrame(d,index=[<span class="string">'x'</span>,<span class="string">'y'</span>])</span><br><span class="line">df</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>    </tr>  </thead>  <tbody>    <tr>      <th>x</th>      <td>1</td>      <td>2</td>    </tr>    <tr>      <th>y</th>      <td>3</td>      <td>4</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_excel(<span class="string">'staffSalary.xlsx'</span>)</span><br><span class="line">df</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>姓名</th>      <th>部门</th>      <th>工号</th>      <th>纳税人身份</th>      <th>员工状态</th>      <th>入职日期</th>      <th>基本工资</th>      <th>岗位工资</th>      <th>合同类型改</th>      <th>员工类型</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>张三</td>      <td>销售部</td>      <td>GH00030</td>      <td>居民</td>      <td>在职</td>      <td>2019-01-03</td>      <td>10035</td>      <td>2000</td>      <td>劳动合同</td>      <td>全职</td>    </tr>    <tr>      <th>1</th>      <td>李四</td>      <td>销售部</td>      <td>GH00031</td>      <td>居民</td>      <td>在职</td>      <td>2019-05-08</td>      <td>10036</td>      <td>2000</td>      <td>劳动合同</td>      <td>全职</td>    </tr>    <tr>      <th>2</th>      <td>王五</td>      <td>销售部</td>      <td>GH00032</td>      <td>居民</td>      <td>在职</td>      <td>2019-01-01</td>      <td>10000</td>      <td>5000</td>      <td>劳动合同</td>      <td>全职</td>    </tr>    <tr>      <th>3</th>      <td>赵六</td>      <td>销售部</td>      <td>GH00033</td>      <td>居民</td>      <td>在职</td>      <td>2019-01-01</td>      <td>10000</td>      <td>5000</td>      <td>劳动合同</td>      <td>全职</td>    </tr>  </tbody></table></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://pandas.pydata.org/docs/index.html&quot; target=&quot;_blank&quot; re
      
    
    </summary>
    
    
      <category term="Phthon" scheme="http://10000hours.top/categories/Phthon/"/>
    
    
      <category term="Python" scheme="http://10000hours.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>python基础</title>
    <link href="http://10000hours.top/2021/01/30/python%E5%9F%BA%E7%A1%80/"/>
    <id>http://10000hours.top/2021/01/30/python%E5%9F%BA%E7%A1%80/</id>
    <published>2021-01-29T16:00:00.000Z</published>
    <updated>2021-01-30T17:01:36.004Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据类型和数据结构"><a href="#数据类型和数据结构" class="headerlink" title="数据类型和数据结构"></a>数据类型和数据结构</h1><h2 id="基础数据类型"><a href="#基础数据类型" class="headerlink" title="基础数据类型"></a>基础数据类型</h2><ol><li>整数 int 123</li><li>浮点数 float 1.234</li><li>字符串 str “Python”</li><li>布尔值 bool True False</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; type(123)</span><br><span class="line">&lt;class &#39;int&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; type(&quot;Phthon&quot;)</span><br><span class="line">&lt;class &#39;str&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; type(1.234)</span><br><span class="line">&lt;class &#39;float&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; type(True)</span><br><span class="line">&lt;class &#39;bool&#39;&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>类型转换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="string">'123'</span>)</span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str(<span class="number">123</span>)</span><br><span class="line"><span class="string">'123'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bool(<span class="number">123</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bool(<span class="number">0</span>)</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 计算薪资</span><br><span class="line"># 工作天数</span><br><span class="line">workday &#x3D; 21.75;</span><br><span class="line"># 日薪</span><br><span class="line">dailyPay &#x3D; 288;</span><br><span class="line"># 奖金</span><br><span class="line">bonus &#x3D; 566;</span><br><span class="line">total &#x3D; workday * dailyPay + bonus;</span><br><span class="line">print(total);</span><br></pre></td></tr></table></figure><h2 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h2><p>序列有两个特性</p><ol><li>成员是有序的</li><li>可以通过下标访问一个或几个成员</li></ol><ul><li>字符串、列表、元组都属于序列</li></ul><ol><li>字符串 “春夏秋冬”</li><li>列表 [1,”春”,2,”秋”]</li><li>元组 (“春”,”夏”,”秋”,”冬”)  元组中存放不可变更的内容,没有增加删除等功能</li></ol><ul><li>序列基本操作</li></ul><ol><li>[not] in 成员关系</li><li><ul><li>连接 </li></ul></li><li><ul><li>重复</li></ul></li><li>: 切片 </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># 数据结构相关</span><br><span class="line"># 四季</span><br><span class="line">seasons &#x3D; [&quot;春&quot;, &quot;夏&quot;, &quot;秋&quot;, &quot;冬&quot;];</span><br><span class="line"></span><br><span class="line"># ---------------------切片操作</span><br><span class="line"># 第一季</span><br><span class="line">print(seasons[0])</span><br><span class="line"># 第一季和第三季</span><br><span class="line">print(seasons[0:2])</span><br><span class="line"># 倒数第一季</span><br><span class="line">print(seasons[-1])</span><br><span class="line"></span><br><span class="line"># ---------------------连接操作</span><br><span class="line">print(seasons + seasons)</span><br><span class="line">print(seasons + [1,2,3])</span><br><span class="line"></span><br><span class="line"># ---------------------重复操作</span><br><span class="line">print(seasons * 2)</span><br><span class="line"># ---------------------关系操作</span><br><span class="line">print(&quot;春&quot; in seasons)</span><br><span class="line">print(&quot;春&quot; not in seasons)</span><br><span class="line"></span><br><span class="line"># 结果</span><br><span class="line">春</span><br><span class="line">[&#39;春&#39;, &#39;夏&#39;]</span><br><span class="line">冬</span><br><span class="line">[&#39;春&#39;, &#39;夏&#39;, &#39;秋&#39;, &#39;冬&#39;, &#39;春&#39;, &#39;夏&#39;, &#39;秋&#39;, &#39;冬&#39;]</span><br><span class="line">[&#39;春&#39;, &#39;夏&#39;, &#39;秋&#39;, &#39;冬&#39;, 1, 2, 3]</span><br><span class="line">[&#39;春&#39;, &#39;夏&#39;, &#39;秋&#39;, &#39;冬&#39;, &#39;春&#39;, &#39;夏&#39;, &#39;秋&#39;, &#39;冬&#39;]</span><br><span class="line">True</span><br><span class="line">False</span><br></pre></td></tr></table></figure><p>元组demo 计算某一天属于哪个季节</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 计算某一天属于哪个季节</span><br><span class="line"></span><br><span class="line"># 计算某一天属于哪个季节</span><br><span class="line"></span><br><span class="line">seasons &#x3D; (&quot;春&quot;,&quot;夏&quot;,&quot;秋&quot;,&quot;冬&quot;)</span><br><span class="line"></span><br><span class="line"># 季节的第一天</span><br><span class="line">seasonsFirstDays &#x3D; ((1,1),(4,1),(7,1),(10,1))</span><br><span class="line"></span><br><span class="line">(month,day) &#x3D; (2,11)</span><br><span class="line">#(month,day) &#x3D; list(map(int,input(&quot;请输入月和日，用空格隔开&quot;).split()))</span><br><span class="line">print((month,day))</span><br><span class="line">filterSeasonFirstDay &#x3D; filter(lambda x : x &lt;&#x3D; (month,day),seasonsFirstDays)</span><br><span class="line">filterSeasonFirstDayLen  &#x3D; len(list(filterSeasonFirstDay))</span><br><span class="line">seasonIndex &#x3D; filterSeasonFirstDayLen % 4 -1</span><br><span class="line">print(seasonIndex)</span><br><span class="line">print(seasons[seasonIndex])</span><br><span class="line"></span><br><span class="line">[(1, 1)]</span><br><span class="line">-1</span><br><span class="line">冬</span><br></pre></td></tr></table></figure><p>列表demo </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 列表的操作，区别于元组，列表可以添加和删除</span><br><span class="line"></span><br><span class="line">bonusItem &#x3D; [&quot;全勤奖&quot;,&quot;绩效奖&quot;]</span><br><span class="line"></span><br><span class="line">bonusItem.append(&quot;项目奖&quot;)</span><br><span class="line">print(bonusItem)</span><br><span class="line">bonusItem.remove(&quot;绩效奖&quot;)</span><br><span class="line">print(bonusItem)</span><br><span class="line"></span><br><span class="line">[&#39;全勤奖&#39;, &#39;绩效奖&#39;, &#39;项目奖&#39;]</span><br><span class="line">[&#39;全勤奖&#39;, &#39;项目奖&#39;]</span><br></pre></td></tr></table></figure><h2 id="字典-key-value"><a href="#字典-key-value" class="headerlink" title="字典(key-value)"></a>字典(key-value)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;basesalary&quot;:&quot;4000&quot;,&quot;bonux&quot;:&quot;1888&quot;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"># 字典类型的使用</span><br><span class="line"></span><br><span class="line">dic1 &#x3D; &#123;&#125;</span><br><span class="line">print(type(dic1))</span><br><span class="line"></span><br><span class="line">dic2 &#x3D; &#123;&#39;basesalary&#39;:4000,&#39;bonus&#39;:1888&#125;</span><br><span class="line">dic2[&#39;postwage&#39;] &#x3D; 800</span><br><span class="line">print(dic2)</span><br><span class="line"></span><br><span class="line">&lt;class &#39;dict&#39;&gt;</span><br><span class="line">&#123;&#39;basesalary&#39;: 4000, &#39;bonus&#39;: 1888, &#39;postwage&#39;: 800&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 计算1到10所有偶数的平方</span><br><span class="line">list1 &#x3D; []</span><br><span class="line">for i in range(1,11):</span><br><span class="line">    if(i % 2 &#x3D;&#x3D; 0):</span><br><span class="line">        list1.append(i * i)</span><br><span class="line"></span><br><span class="line">print(list1)</span><br><span class="line"></span><br><span class="line"># 列表推导式语法</span><br><span class="line">list2 &#x3D; [i * i for i in range(1,11) if i % 2 &#x3D;&#x3D; 0]</span><br><span class="line">print(list2)</span><br><span class="line"></span><br><span class="line">upNumber &#x3D; (&quot;壹&quot;,&quot;贰&quot;,&quot;叁&quot;,&quot;肆&quot;,&quot;伍&quot;,&quot;陆&quot;,&quot;柒&quot;,&quot;捌&quot;,&quot;玖&quot;,&quot;拾&quot;)</span><br><span class="line">dic1 &#x3D; &#123;&#125;</span><br><span class="line">for i in upNumber:</span><br><span class="line">    dic1[i] &#x3D; 0;</span><br><span class="line">print(dic1)</span><br><span class="line"># 字典推导式语法</span><br><span class="line">dic2 &#x3D; &#123;i:0 for i in upNumber&#125;</span><br><span class="line">print(dic2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[4, 16, 36, 64, 100]</span><br><span class="line">[4, 16, 36, 64, 100]</span><br><span class="line">&#123;&#39;壹&#39;: 0, &#39;贰&#39;: 0, &#39;叁&#39;: 0, &#39;肆&#39;: 0, &#39;伍&#39;: 0, &#39;陆&#39;: 0, &#39;柒&#39;: 0, &#39;捌&#39;: 0, &#39;玖&#39;: 0, &#39;拾&#39;: 0&#125;</span><br><span class="line">&#123;&#39;壹&#39;: 0, &#39;贰&#39;: 0, &#39;叁&#39;: 0, &#39;肆&#39;: 0, &#39;伍&#39;: 0, &#39;陆&#39;: 0, &#39;柒&#39;: 0, &#39;捌&#39;: 0, &#39;玖&#39;: 0, &#39;拾&#39;: 0&#125;</span><br></pre></td></tr></table></figure><h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if 表达式:</span><br><span class="line">   代码块</span><br><span class="line">elif 表达式:</span><br><span class="line">   代码块</span><br><span class="line">else :</span><br><span class="line">  代码块</span><br></pre></td></tr></table></figure><h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for 迭代变量 in 可迭代对象:</span><br><span class="line">    代码块</span><br></pre></td></tr></table></figure><h2 id="while"><a href="#while" class="headerlink" title="while"></a>while</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">while 表达式:</span><br><span class="line">      代码块</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">upNumber &#x3D; (&quot;壹&quot;,&quot;贰&quot;,&quot;叁&quot;,&quot;肆&quot;,&quot;伍&quot;,&quot;陆&quot;,&quot;柒&quot;,&quot;捌&quot;,&quot;玖&quot;,&quot;拾&quot;)</span><br><span class="line">for num in range(10):</span><br><span class="line">    print(&quot;%s 的大写方式是:%s&quot; %(num,upNumber[(num - 1) % 10]))</span><br><span class="line"></span><br><span class="line">for idx in upNumber:</span><br><span class="line">    print(idx)</span><br></pre></td></tr></table></figure><h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><p>基本操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 文件操作</span><br><span class="line"></span><br><span class="line"># w是覆盖写入模式</span><br><span class="line">salaryfieldFile &#x3D; open(&#39;salaryfield.txt&#39;,&#39;w&#39;)</span><br><span class="line">salaryfieldFile.write(&quot;基本工资&quot;)</span><br><span class="line">salaryfieldFile.close()</span><br><span class="line"></span><br><span class="line">fieldRead &#x3D; open(&#39;salaryfield.txt&#39;)</span><br><span class="line">print(fieldRead.read())</span><br><span class="line">fieldRead.close()</span><br><span class="line"></span><br><span class="line"># 追加写入模式 a</span><br><span class="line"></span><br><span class="line">fieldAppend &#x3D; open(&#39;salaryfield.txt&#39;,&#39;a&#39;)</span><br><span class="line">fieldAppend.write(&#39;岗位工资&#39;)</span><br><span class="line">fieldAppend.close()</span><br></pre></td></tr></table></figure><p>指针操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 文件指针操作</span><br><span class="line"></span><br><span class="line">file &#x3D; open(&quot;salaryfield.txt&quot;)</span><br><span class="line">print(&quot;当前文件指针位置%s：&quot;%file.tell())</span><br><span class="line">print(&quot;我们读取了一个字符：%s&quot;%file.read(1))</span><br><span class="line">print(&quot;当前文件指针位置%s：&quot;%file.tell())</span><br><span class="line">file.seek(0)</span><br><span class="line">print(&quot;进行指针移动操作&quot;)</span><br><span class="line">print(&quot;当前文件指针位置%s：&quot;%file.tell())</span><br><span class="line"># seek 函数第一个参数是偏移量，第二个参数是相对位置：0表示从文件开头 1表示从当前位置 2表示从文件结尾</span><br><span class="line">file.seek(5,0)</span><br><span class="line">file.close()</span><br><span class="line"></span><br><span class="line">当前文件指针位置0：</span><br><span class="line">我们读取了一个字符：基</span><br><span class="line">当前文件指针位置3：</span><br><span class="line">进行指针移动操作</span><br><span class="line">当前文件指针位置0：</span><br></pre></td></tr></table></figure><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><p>异常处理语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">  代码块</span><br><span class="line">except Exception[,reason]</span><br><span class="line">  异常处理</span><br><span class="line">final:</span><br><span class="line">  最终执行代码</span><br></pre></td></tr></table></figure><p>异常处理demo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"># 异常处理</span><br><span class="line">try:</span><br><span class="line"> i &#x3D; j</span><br><span class="line">except NameError:</span><br><span class="line">    print(&#39;变量未定义异常&#39;)</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line"> 1&#x2F;0</span><br><span class="line">except ZeroDivisionError:</span><br><span class="line">    print(&#39;除数不能为0&#39;)</span><br><span class="line"></span><br><span class="line"># 捕获多个异常</span><br><span class="line">try:</span><br><span class="line"> 1&#x2F;0</span><br><span class="line">except (NameError,ZeroDivisionError):</span><br><span class="line">    print(&#39;程序出现了异常&#39;)</span><br><span class="line"></span><br><span class="line"># 打印异常信息</span><br><span class="line">try:</span><br><span class="line"> 1&#x2F;0</span><br><span class="line">except ZeroDivisionError as e:</span><br><span class="line">    print(&#39;除数不能为0,%s&#39;%e)</span><br><span class="line"></span><br><span class="line"># 通用异常捕获</span><br><span class="line">try:</span><br><span class="line"> 1&#x2F;0</span><br><span class="line">except Exception as e:</span><br><span class="line">    print(&#39;程序异常,%s&#39;%e)</span><br><span class="line"></span><br><span class="line"># 自定义异常信息</span><br><span class="line">try:</span><br><span class="line"> raise NameError(&quot;这个一个自定义的异常信息&quot;)</span><br><span class="line">except Exception as e:</span><br><span class="line">    print(&#39;程序异常,%s&#39;%e)</span><br><span class="line"></span><br><span class="line"># final执行操作</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">  file &#x3D; open(&quot;salaryfield.txt&quot;)</span><br><span class="line">except Exception as e:</span><br><span class="line">    print(&#39;文件操作异常%s&#39;%e)</span><br><span class="line">finally:</span><br><span class="line">    file.close()</span><br><span class="line">    print(&quot;文件关闭&quot;)</span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def functionName(param1,param2,*other,**keywords):</span><br><span class="line">    代码</span><br><span class="line">    return 需要返回的内容</span><br><span class="line"></span><br><span class="line">参数分为3种</span><br><span class="line"></span><br><span class="line">param1,param2属属于必填的普通参数</span><br><span class="line">*other 是可变长参数，可以是0个或者一个</span><br><span class="line">**keywords 是关键字参数，可以通过调用的时候指定参数</span><br></pre></td></tr></table></figure><h2 id="函数变量作用域"><a href="#函数变量作用域" class="headerlink" title="函数变量作用域"></a>函数变量作用域</h2><p>默认函数内定义的变量，作用域只能在函数内</p><p>global关键字可以改变函数作用域为全局</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">## 函数作用域</span><br><span class="line"></span><br><span class="line">var &#x3D; 123</span><br><span class="line">def func1():</span><br><span class="line">    var &#x3D; 456</span><br><span class="line">    print(var)</span><br><span class="line"></span><br><span class="line">func1()</span><br><span class="line">print(var)</span><br><span class="line"></span><br><span class="line">global var2</span><br><span class="line">var2 &#x3D; 123</span><br><span class="line">def func2():</span><br><span class="line">    var2 &#x3D; 456</span><br><span class="line">    print(var2)</span><br><span class="line"></span><br><span class="line">func2()</span><br><span class="line">print(var2)</span><br><span class="line"></span><br><span class="line">var3 &#x3D; 123</span><br><span class="line">def func3():</span><br><span class="line">    global var3;</span><br><span class="line">    var3 &#x3D; 456</span><br><span class="line">    print(var3)</span><br><span class="line"></span><br><span class="line">func3()</span><br><span class="line">print(var3)</span><br><span class="line"></span><br><span class="line">456</span><br><span class="line">123</span><br><span class="line">456</span><br><span class="line">123</span><br><span class="line">456</span><br><span class="line">456</span><br></pre></td></tr></table></figure><h2 id="函数迭代器和生成器"><a href="#函数迭代器和生成器" class="headerlink" title="函数迭代器和生成器"></a>函数迭代器和生成器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 生成器（通过yield实现迭代器功能）</span><br><span class="line">def floatRange(start,stop,step):</span><br><span class="line">    x &#x3D; start</span><br><span class="line">    while x &lt; stop:</span><br><span class="line">        yield x #迭代x</span><br><span class="line">        x +&#x3D; step</span><br><span class="line"></span><br><span class="line">for i in floatRange(10,20,0.5):</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">10</span><br><span class="line">10.5</span><br><span class="line">11.0</span><br><span class="line">11.5</span><br><span class="line">12.0</span><br><span class="line">12.5</span><br><span class="line">13.0</span><br><span class="line">13.5</span><br><span class="line">14.0</span><br><span class="line">14.5</span><br><span class="line">15.0</span><br><span class="line">15.5</span><br><span class="line">16.0</span><br><span class="line">16.5</span><br><span class="line">17.0</span><br><span class="line">17.5</span><br><span class="line">18.0</span><br><span class="line">18.5</span><br><span class="line">19.0</span><br><span class="line">19.5</span><br></pre></td></tr></table></figure><h2 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># lambda表达式</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; def add(x,y):</span><br><span class="line">...     return x+y</span><br><span class="line">... </span><br><span class="line">&gt;&gt;&gt; add(3,5)</span><br><span class="line">8</span><br><span class="line">&gt;&gt;&gt; lambda x,y:x+y</span><br><span class="line">&lt;function &lt;lambda&gt; at 0x7f0b8d3fcb00&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h2 id="内建函数"><a href="#内建函数" class="headerlink" title="内建函数"></a>内建函数</h2><p>filter、map、reduce、zip</p><p>help 函数名可以产看帮助文档</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"># filter函数 过滤</span><br><span class="line"></span><br><span class="line">&gt;&gt; list2 &#x3D; [1,2,3,4,5,6,7]</span><br><span class="line">&gt;&gt;&gt; print(list(filter(lambda x:x&lt;4,list2)))</span><br><span class="line">[1, 2, 3]</span><br><span class="line"></span><br><span class="line"># map函数 对内容依次处理</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; a &#x3D; [1,2,3,4,5,6,7]</span><br><span class="line">&gt;&gt;&gt; print(list(map(lambda x:x+1,a)))</span><br><span class="line">[2, 3, 4, 5, 6, 7, 8]</span><br><span class="line">&gt;&gt;&gt; b &#x3D; [1,2,3,4,5,6,7]</span><br><span class="line">&gt;&gt;&gt; print(list(map(lambda x,y:x+y,a,b)))</span><br><span class="line">[2, 4, 6, 8, 10, 12, 14]</span><br><span class="line"></span><br><span class="line"># reduce函数 </span><br><span class="line">[2, 4, 6, 8, 10, 12, 14]</span><br><span class="line">&gt;&gt;&gt; from functools import reduce</span><br><span class="line">&gt;&gt;&gt; reduce(lambda x,y:x+y,[1,2,3],1)</span><br><span class="line">7</span><br><span class="line">等价于 ((1+1)+2)+3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># zip函数 常用于合并累加等</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; zip((1,2,3),(4,5,6))</span><br><span class="line">&lt;zip object at 0x7f0b8d3e3c30&gt;</span><br><span class="line">&gt;&gt;&gt; for i in zip((1,2,3),(4,5,6)):</span><br><span class="line">...    print(i)</span><br><span class="line">...</span><br><span class="line">(1, 4)</span><br><span class="line">(2, 5)</span><br><span class="line">(3, 6)</span><br><span class="line"></span><br><span class="line">#通过zip实现字段key-value对调</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; dicta &#x3D; &#123;&quot;a&quot;:&quot;aa&quot;,&quot;b&quot;:&quot;bb&quot;&#125;</span><br><span class="line">&gt;&gt;&gt; zip(dicta.values(),dicta.keys())</span><br><span class="line">&lt;zip object at 0x7f0b8d302780&gt;</span><br><span class="line">&gt;&gt;&gt; print(dict(zip(dicta.values(),dicta.keys())))</span><br><span class="line">&#123;&#39;aa&#39;: &#39;a&#39;, &#39;bb&#39;: &#39;b&#39;&#125;</span><br></pre></td></tr></table></figure><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>外部函数变量被内部函数引用，这种形式称之为闭包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># 闭包</span><br><span class="line"></span><br><span class="line"># 计数器</span><br><span class="line">def counter(FIRST&#x3D;0):</span><br><span class="line">    cnt &#x3D; [FIRST]</span><br><span class="line">    def addOne():</span><br><span class="line">        cnt[0] +&#x3D; 1</span><br><span class="line">        return cnt[0]</span><br><span class="line">    return addOne</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">num1 &#x3D; counter()</span><br><span class="line">num5 &#x3D; counter(5)</span><br><span class="line"></span><br><span class="line">print(num1())</span><br><span class="line">print(num1())</span><br><span class="line">print(num1())</span><br><span class="line">print(num5())</span><br><span class="line">print(num5())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td></tr></table></figure><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><p>装饰器用来装饰函数，通过闭包实现。有点java aop的意思</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"># 装饰器的使用</span><br><span class="line"></span><br><span class="line"># 通过闭包实现的装饰器</span><br><span class="line">def wash(func):</span><br><span class="line">    def wrapper(food):</span><br><span class="line">        print(&quot;吃饭前先洗手...&quot;)</span><br><span class="line">        print(&quot;函数调用名%s&quot;%func.__name__)</span><br><span class="line">        func(food)</span><br><span class="line">        print(&quot;吃完饭要漱口...&quot;)</span><br><span class="line"></span><br><span class="line">    return wrapper</span><br><span class="line"></span><br><span class="line">def newWash(args):</span><br><span class="line">    def wash(func):</span><br><span class="line">        def wrapper(food):</span><br><span class="line">            print(&quot;%s前先洗手...&quot;%args)</span><br><span class="line">            func(food)</span><br><span class="line">            print(&quot;吃完%s要漱口...&quot;%args)</span><br><span class="line"></span><br><span class="line">        return wrapper</span><br><span class="line">    return wash;</span><br><span class="line"></span><br><span class="line">def eat():</span><br><span class="line">    print(&quot;开始吃饭&quot;)</span><br><span class="line"></span><br><span class="line"># 没使用装饰器前</span><br><span class="line">print(&quot;吃饭前先洗手...&quot;)</span><br><span class="line">eat()</span><br><span class="line">print(&quot;吃完饭要漱口...&quot;)</span><br><span class="line"></span><br><span class="line">@wash</span><br><span class="line">def eat2(food):</span><br><span class="line">    print(&quot;开始吃%s&quot;%food)</span><br><span class="line"></span><br><span class="line">eat2(&quot;面包&quot;)</span><br><span class="line"></span><br><span class="line">@newWash(&quot;早饭&quot;)</span><br><span class="line">def eat3(food):</span><br><span class="line">    print(&quot;开始吃%s&quot;%food)</span><br><span class="line"></span><br><span class="line">eat3(&quot;烤肉&quot;)</span><br><span class="line"></span><br><span class="line">吃饭前先洗手...</span><br><span class="line">开始吃饭</span><br><span class="line">吃完饭要漱口...</span><br><span class="line">吃饭前先洗手...</span><br><span class="line">开始吃面包</span><br><span class="line">吃完饭要漱口...</span><br><span class="line">早饭前先洗手...</span><br><span class="line">开始吃烤肉</span><br><span class="line">吃完早饭要漱口...</span><br></pre></td></tr></table></figure><h2 id="上下文管理器with"><a href="#上下文管理器with" class="headerlink" title="上下文管理器with"></a>上下文管理器with</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 上下文管理器 with</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    file &#x3D; open(&quot;salaryfield.txt&quot;)</span><br><span class="line">    for line in file.readlines():</span><br><span class="line">        print(line)</span><br><span class="line">except Exception as e:</span><br><span class="line">    print(e)</span><br><span class="line">finally:</span><br><span class="line">    file.close()</span><br><span class="line"></span><br><span class="line"># 可使用with代替上面的写法,不需要自己管理资源</span><br><span class="line"></span><br><span class="line">with open(&quot;salaryfield.txt&quot;) as file:</span><br><span class="line">        for line in file.readlines():</span><br></pre></td></tr></table></figure><h1 id="编码规范包"><a href="#编码规范包" class="headerlink" title="编码规范包"></a>编码规范包</h1><p>python提供了一个编码规范的工具包，可以自行安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip3 install autopep8</span><br></pre></td></tr></table></figure><p>安装完后可以配置pycharm添加到其扩展工具里，就可以在代码中右键使用了。配置方式这里就不写了。</p><h1 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h1><p>class 关键字可以定义一个类,python中定义的类同样可以实现继承、封装、多态的特性</p><h2 id="类的使用示例"><a href="#类的使用示例" class="headerlink" title="类的使用示例"></a>类的使用示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"># 迭代类</span><br><span class="line"></span><br><span class="line">class ProjectIteration():  # 定义一个类</span><br><span class="line">    def __init__(self, name, code):</span><br><span class="line">        self.__name &#x3D; name  # 迭代名称 __开头表示私有属性，不可修改</span><br><span class="line">        self.code &#x3D; code  # 迭代编号</span><br><span class="line"></span><br><span class="line">    def printInfo(self):  # 定义一个方法</span><br><span class="line">        print(&#39;迭代名称：[%s] 迭代编号:[%s]&#39; % (self.__name, self.code))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Bug():</span><br><span class="line">    &#39;定义bug类&#39;</span><br><span class="line">    pass  # pass 暂不实现</span><br><span class="line"></span><br><span class="line">currentPj &#x3D; ProjectIteration(&quot;智能薪酬&quot;, &quot;znxc001&quot;)  # 类的实例化</span><br><span class="line">currentPj.printInfo()</span><br><span class="line"></span><br><span class="line"># 类的继承</span><br><span class="line"># 父类</span><br><span class="line">class Animal():</span><br><span class="line">    def __init__(self,name,age&#x3D;0):</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line">        self.age &#x3D; age</span><br><span class="line">    def run(self):</span><br><span class="line">        print(&quot;跑了一段距离&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 继承父类</span><br><span class="line">class Cat(Animal):</span><br><span class="line">    def __init__(self,name,age):</span><br><span class="line">        # self.name &#x3D; name</span><br><span class="line">        # self.age &#x3D; age</span><br><span class="line">        super().__init__(name,age)</span><br><span class="line">    def run(self):</span><br><span class="line">        print(&quot;小猫跑了一会&quot;) # 可以覆盖父类的方法</span><br><span class="line"></span><br><span class="line">tom &#x3D; Cat(&quot;tom&quot;,18)</span><br><span class="line">tom.run();</span><br><span class="line"></span><br><span class="line">print(&#39;tom 的类型是%s&#39;%type(tom))</span><br><span class="line">print(isinstance(tom,Animal))  # tom 是否是Animal的子类</span><br></pre></td></tr></table></figure><h2 id="自定义类支持with语法"><a href="#自定义类支持with语法" class="headerlink" title="自定义类支持with语法"></a>自定义类支持with语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class TestWith():</span><br><span class="line">    def __enter__(self):</span><br><span class="line">        print(&#39;初始化...&#39;)</span><br><span class="line"></span><br><span class="line">    def __exit__(self, exc_type, exc_val, exc_tb):</span><br><span class="line">        if exc_tb &#x3D;&#x3D; None:</span><br><span class="line">            print(&#39;没有异常&#39;)</span><br><span class="line">        else:</span><br><span class="line">            print(&#39;产生异常%s&#39; % exc_val)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">with TestWith():</span><br><span class="line">    print(&#39;Test is running&#39;)</span><br><span class="line">    raise NameError(&quot;test&quot;)</span><br><span class="line"></span><br><span class="line">输出信息</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&#x2F;home&#x2F;richey&#x2F;PycharmProjects&#x2F;pythonProject&#x2F;tutorial&#x2F;18TestWith.py&quot;, line 14, in &lt;module&gt;</span><br><span class="line">    raise NameError(&quot;test&quot;)</span><br><span class="line">NameError: test</span><br><span class="line">初始化...</span><br><span class="line">Test is running</span><br><span class="line">产生异常test</span><br></pre></td></tr></table></figure><h1 id="多线程编程"><a href="#多线程编程" class="headerlink" title="多线程编程"></a>多线程编程</h1><p>暂无</p><h1 id="标准库"><a href="#标准库" class="headerlink" title="标准库"></a>标准库</h1><p>python的一大优势就是各种库特别丰富</p><p>python官方提供的库称之为标准库,官方网站：<a href="https://docs.python.org/3/library/index.html" target="_blank" rel="noopener">https://docs.python.org/3/library/index.html</a></p><p>python标准库提供类丰富的内容，比如基础的文本操作、日期处理、网络、开发工具和调试工具等等</p><h2 id="正则库re"><a href="#正则库re" class="headerlink" title="正则库re"></a>正则库re</h2><p><a href="https://docs.python.org/3/library/re.html" target="_blank" rel="noopener">https://docs.python.org/3/library/re.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import  re</span><br></pre></td></tr></table></figure><h2 id="日期与时间函数"><a href="#日期与时间函数" class="headerlink" title="日期与时间函数"></a>日期与时间函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">import datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(time.time())</span><br><span class="line">print(time.localtime())</span><br><span class="line">print(time.strftime(&#39;%Y-%m-%d %H-%M-%S&#39;))</span><br><span class="line"></span><br><span class="line"># 1612010800.1010308</span><br><span class="line"># time.struct_time(tm_year&#x3D;2021, tm_mon&#x3D;1, tm_mday&#x3D;30, tm_hour&#x3D;20, tm_min&#x3D;46, tm_sec&#x3D;40, tm_wday&#x3D;5, tm_yday&#x3D;30, tm_isdst&#x3D;0)</span><br><span class="line"># 2021-01-30 20-46-40</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(datetime.datetime.now())</span><br><span class="line">newTime &#x3D; datetime.timedelta(minutes&#x3D;10) # 10分钟的偏移</span><br><span class="line">print(datetime.datetime.now() + newTime) # 10分钟后的时间</span><br><span class="line"></span><br><span class="line"># 2021-01-30 20:50:50.395245</span><br><span class="line"># 2021-01-30 21:00:50.395273</span><br><span class="line"></span><br><span class="line">newDay &#x3D; datetime.datetime(2021,1,30)</span><br><span class="line">print(newDay)</span><br><span class="line">datInterval &#x3D; datetime.timedelta(days&#x3D;10)</span><br><span class="line">print(newDay + datInterval)</span><br><span class="line"></span><br><span class="line"># 2021-01-30 00:00:00</span><br><span class="line"># 2021-02-09 00:00:00</span><br></pre></td></tr></table></figure><h2 id="数学相关"><a href="#数学相关" class="headerlink" title="数学相关"></a>数学相关</h2><h2 id="文本及目录操作"><a href="#文本及目录操作" class="headerlink" title="文本及目录操作"></a>文本及目录操作</h2><p><a href="https://docs.python.org/3/library/os.path.html" target="_blank" rel="noopener">https://docs.python.org/3/library/os.path.html</a></p><p><a href="https://docs.python.org/3/library/pathlib.html" target="_blank" rel="noopener">https://docs.python.org/3/library/pathlib.html</a></p><p>几个简单的demo，详细操作查询文档</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line"></span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">print(os.path.abspath(&quot;.&quot;)) # 根据当前路径获取绝对路径</span><br><span class="line">print(os.path.abspath(&quot;..&quot;))</span><br><span class="line">print(os.path.exists(&quot;&#x2F;home&quot;))</span><br><span class="line">print(os.path.isfile(&quot;&#x2F;home&quot;))</span><br><span class="line">os.path.join(&quot;&#x2F;home&#x2F;richey&#x2F;&quot;,&quot;&#x2F;Download&#x2F;&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from pathlib import Path</span><br><span class="line"></span><br><span class="line"># &gt;&gt;&gt; p &#x3D; Path(&#39;.&#39;)</span><br><span class="line"># &gt;&gt;&gt; [x for x in p.iterdir() if x.is_dir()]</span><br><span class="line"># [PosixPath(&#39;.hg&#39;), PosixPath(&#39;docs&#39;), PosixPath(&#39;dist&#39;),</span><br><span class="line">#  PosixPath(&#39;__pycache__&#39;), PosixPath(&#39;build&#39;)]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据类型和数据结构&quot;&gt;&lt;a href=&quot;#数据类型和数据结构&quot; class=&quot;headerlink&quot; title=&quot;数据类型和数据结构&quot;&gt;&lt;/a&gt;数据类型和数据结构&lt;/h1&gt;&lt;h2 id=&quot;基础数据类型&quot;&gt;&lt;a href=&quot;#基础数据类型&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="Phthon" scheme="http://10000hours.top/categories/Phthon/"/>
    
    
      <category term="Python" scheme="http://10000hours.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>CAP原理</title>
    <link href="http://10000hours.top/2021/01/01/CAP%E5%8E%9F%E7%90%86/"/>
    <id>http://10000hours.top/2021/01/01/CAP%E5%8E%9F%E7%90%86/</id>
    <published>2020-12-31T16:00:00.000Z</published>
    <updated>2021-01-01T07:50:39.373Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CAP定理"><a href="#CAP定理" class="headerlink" title="CAP定理"></a>CAP定理</h1><p><a href="https://en.wikipedia.org/wiki/CAP_theorem" target="_blank" rel="noopener">CAP定理</a></p><p><img src="http://assets.processon.com/chart_image/5c755040e4b0f9fba693aa8f.png" alt="cap定理"></p><p>分布式系统早已成为主流开发架构模式，当今中大型系统开发绕不开分布式.</p><p>相对于单点系统，分布式简单理解就是由多个节点一起组成的系统，由单点变成多点。节点之间的状态如何同步，成为了分布式系统首先要面对的问题，这也是分布式系统最大的难点。</p><p>CAP定理就是这方面的基本定理，自然而然的也是最基础最关键的理论。</p><blockquote><p>CAP原则又称CAP定理，指的是在一个分布式系统中，一致性（Consistency）、可用性（Availability）、分区容错性（Partition tolerance）。CAP 原则指的是，这三个要素最多只能同时实现两点，不可能三者兼顾。 ——百度百科</p></blockquote><ul><li>一致性（C）：在分布式系统中的所有数据备份，在同一时刻是否同样的值。（要做到一致性，节点间的通讯必须是正常的,且在节点没有同步好数据之前，需要锁定写操作和读操作。但是这不符合可用性）</li><li>可用性（A）：每次请求都能获得一个(非错误)响应，但不保证返回的是最新写入的数据。</li><li>分区容忍性（P）：尽管任意数量的消息被节点间的网络丢失（或延迟），系统仍继续运行。</li></ul><p>CAP原则的精髓就是要么AP，要么CP，要么AC，但是不存在CAP。要注意的是，CAP里的一致性与数据库ACID中的一致性，是截然不同的。</p><ul><li>CA (consistency + availability)，这样的系统关注一致性和可用性，它需要非常严格的全体一致的协议，比如“两阶段提交”（2PC）。</li><li>CP (consistency + partition tolerance)，这样的系统关注一致性和分区容忍性。它关注的是系统里大多数人的一致性协议，比如：Paxos 算法（Quorum 类的算法）。</li><li>AP (availability + partition tolerance)，这样的系统关心可用性和分区容忍性。</li></ul><h1 id="参考连接"><a href="#参考连接" class="headerlink" title="参考连接"></a>参考连接</h1><p><a href="http://www.ruanyifeng.com/blog/2018/07/cap.html" target="_blank" rel="noopener">CAP 定理的含义</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CAP定理&quot;&gt;&lt;a href=&quot;#CAP定理&quot; class=&quot;headerlink&quot; title=&quot;CAP定理&quot;&gt;&lt;/a&gt;CAP定理&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/CAP_theorem&quot; target
      
    
    </summary>
    
    
      <category term="基础理论" scheme="http://10000hours.top/categories/%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA/"/>
    
    
      <category term="CAP" scheme="http://10000hours.top/tags/CAP/"/>
    
  </entry>
  
</feed>

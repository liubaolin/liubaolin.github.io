<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Richey&#39;s Blog</title>
  
  <subtitle>吾生也有涯，而知也无涯。以有涯随无涯，殆已。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://10000hours.top/"/>
  <updated>2021-03-07T12:55:14.118Z</updated>
  <id>http://10000hours.top/</id>
  
  <author>
    <name>Richey Liu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mongoDB系列03-mongoDB聚合操作</title>
    <link href="http://10000hours.top/2021/03/07/mongoDB%E7%B3%BB%E5%88%9703-mongoDB%E8%81%9A%E5%90%88%E6%93%8D%E4%BD%9C/"/>
    <id>http://10000hours.top/2021/03/07/mongoDB%E7%B3%BB%E5%88%9703-mongoDB%E8%81%9A%E5%90%88%E6%93%8D%E4%BD%9C/</id>
    <published>2021-03-06T16:00:00.000Z</published>
    <updated>2021-03-07T12:55:14.118Z</updated>
    
    <content type="html"><![CDATA[<h1 id="聚合框架说明"><a href="#聚合框架说明" class="headerlink" title="聚合框架说明"></a>聚合框架说明</h1><p>MongoDB聚合框架（Aggregation Framework）是一个计算框架</p><p>可以作用在一个或几个集合上，对集合的数据进行一系列运算，将这些数据转化为期望的形式</p><p>MongoDB聚合框架相当于SQL查询中的:GROUPBY/LEFT OUTER JOIN /AS 等</p><p>MongoDB聚合中的管道（Pipline）和步骤（Stage）, 整个聚合运算的过程称为管道（Pipline），它是由多个步骤组成的,每个管道:</p><ul><li><p>接收一系列文档（数据）</p></li><li><p>每个步骤对这些文档进行一系列的运算</p></li><li><p>结果文档输出给下一个步骤</p></li></ul><h1 id="聚合运算的基本格式"><a href="#聚合运算的基本格式" class="headerlink" title="聚合运算的基本格式"></a>聚合运算的基本格式</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义pipeline（由一系列的步骤组成）</span></span><br><span class="line">pipeline = [$stage1,$stage2,...$stageN]</span><br><span class="line"></span><br><span class="line">db.&lt;集合&gt;.aggregate(pipeline,&#123;options&#125;)</span><br></pre></td></tr></table></figure><h1 id="常见步骤类型"><a href="#常见步骤类型" class="headerlink" title="常见步骤类型"></a>常见步骤类型</h1><ul><li><p>$match </p><p>过滤用，相当于sql中的where</p></li><li><p>$project </p><p>投影, 相当于sql中的as</p></li><li><p>$sort</p><p>排序， 相当于sql中的order by</p></li><li><p>$group </p><p>分组， 相当于sql中的group by</p></li><li><p>$skip/$limit</p><p>结果限制， 相当于sql中的skip/limit</p></li><li><p>$lookup </p><p>左外连接， 相当于sql中的left outer join </p></li></ul><p><img src="https://blog-pic-1254088127.picsh.myqcloud.com/mongo-aggregate-02.png" alt="常见步骤"></p><h1 id="常见步骤中的运算符"><a href="#常见步骤中的运算符" class="headerlink" title="常见步骤中的运算符"></a>常见步骤中的运算符</h1><p><img src="https://blog-pic-1254088127.picsh.myqcloud.com/mongo-aggregate-01.png" alt="group中常见运算符"></p><h1 id="聚合的使用场景"><a href="#聚合的使用场景" class="headerlink" title="聚合的使用场景"></a>聚合的使用场景</h1><ul><li><p>OLTP</p><p>计算</p></li><li><p>OLAP</p><p>分析总额、均值、数据分布等等</p></li></ul><h1 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h1><p>可以使用compass工具方便的生成聚合逻辑<br>//todo </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;聚合框架说明&quot;&gt;&lt;a href=&quot;#聚合框架说明&quot; class=&quot;headerlink&quot; title=&quot;聚合框架说明&quot;&gt;&lt;/a&gt;聚合框架说明&lt;/h1&gt;&lt;p&gt;MongoDB聚合框架（Aggregation Framework）是一个计算框架&lt;/p&gt;
&lt;p&gt;可以作用在
      
    
    </summary>
    
    
      <category term="DB" scheme="http://10000hours.top/categories/DB/"/>
    
    
      <category term="mongoDB" scheme="http://10000hours.top/tags/mongoDB/"/>
    
  </entry>
  
  <entry>
    <title>mongoDB系列02-mongoDB基本操作</title>
    <link href="http://10000hours.top/2021/03/06/mongoDB%E7%B3%BB%E5%88%9702-mongoDB%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://10000hours.top/2021/03/06/mongoDB%E7%B3%BB%E5%88%9702-mongoDB%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</id>
    <published>2021-03-05T16:00:00.000Z</published>
    <updated>2021-03-06T16:19:52.025Z</updated>
    
    <content type="html"><![CDATA[<h1 id="intert插入操作"><a href="#intert插入操作" class="headerlink" title="intert插入操作"></a>intert插入操作</h1><p>db.&lt;集合&gt;.insertOne(&lt;JSON对象&gt;)<br>db.&lt;集合&gt;.insertMany([&lt;JSON 1&gt;,…<JSON n>])</p><p>demo:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.staff.insertOne(&#123;name:&quot;Richey&quot;&#125;)</span><br><span class="line">&#123;</span><br><span class="line">&quot;acknowledged&quot; : true,</span><br><span class="line">&quot;insertedId&quot; : ObjectId(&quot;60434c93b562b8d1012436aa&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&gt; db.staff.insertMany([&#123;name:&quot;Kelly&quot;&#125;,&#123;name:&quot;Darwin&quot;&#125;,&#123;name:&quot;Freeman&quot;&#125;])</span><br><span class="line">&#123;</span><br><span class="line">&quot;acknowledged&quot; : true,</span><br><span class="line">&quot;insertedIds&quot; : [</span><br><span class="line">ObjectId(&quot;60434cffb562b8d1012436ab&quot;),</span><br><span class="line">ObjectId(&quot;60434cffb562b8d1012436ac&quot;),</span><br><span class="line">ObjectId(&quot;60434cffb562b8d1012436ad&quot;)</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&gt; db.staff.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60434c93b562b8d1012436aa&quot;), &quot;name&quot; : &quot;Richey&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60434cffb562b8d1012436ab&quot;), &quot;name&quot; : &quot;Kelly&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60434cffb562b8d1012436ac&quot;), &quot;name&quot; : &quot;Darwin&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60434cffb562b8d1012436ad&quot;), &quot;name&quot; : &quot;Freeman&quot; &#125;</span><br></pre></td></tr></table></figure><h1 id="find查找数据"><a href="#find查找数据" class="headerlink" title="find查找数据"></a>find查找数据</h1><p>查询所有数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.&lt;集合&gt;.find()</span><br></pre></td></tr></table></figure><h2 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.staff.insertMany([&#123;name:&quot;Jobs&quot;,age:18&#125;,&#123;name:&quot;Lili&quot;,gender:&quot;Female&quot;&#125;])</span><br><span class="line">&#123;</span><br><span class="line">&quot;acknowledged&quot; : true,</span><br><span class="line">&quot;insertedIds&quot; : [</span><br><span class="line">ObjectId(&quot;60434f08b562b8d1012436ae&quot;),</span><br><span class="line">ObjectId(&quot;60434f08b562b8d1012436af&quot;)</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">#单条件查询</span><br><span class="line"></span><br><span class="line">&gt; db.staff.find(&#123;&quot;age&quot;:18&#125;)</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60434f08b562b8d1012436ae&quot;), &quot;name&quot; : &quot;Jobs&quot;, &quot;age&quot; : 18 &#125;</span><br><span class="line">#多条件and查询</span><br><span class="line">&gt; db.staff.find(&#123;&quot;name&quot;:&quot;Jobs&quot;,&quot;age&quot;:18&#125;)</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60434f08b562b8d1012436ae&quot;), &quot;name&quot; : &quot;Jobs&quot;, &quot;age&quot; : 18 &#125;</span><br><span class="line">&gt; db.staff.find(&#123;$and:[&#123;&quot;name&quot;:&quot;Jobs&quot;&#125;,&#123;&quot;age&quot;:18&#125;]&#125;)</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60434f08b562b8d1012436ae&quot;), &quot;name&quot; : &quot;Jobs&quot;, &quot;age&quot; : 18 &#125;</span><br><span class="line">#多条件or查询</span><br><span class="line">&gt; db.staff.find(&#123;$or:[&#123;&quot;age&quot;:18&#125;,&#123;&quot;gender&quot;:&quot;Female&quot;&#125;]&#125;)</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60434f08b562b8d1012436ae&quot;), &quot;name&quot; : &quot;Jobs&quot;, &quot;age&quot; : 18 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60434f08b562b8d1012436af&quot;), &quot;name&quot; : &quot;Lili&quot;, &quot;gender&quot; : &quot;Female&quot; &#125;</span><br><span class="line">#按正则表达式查询</span><br><span class="line"></span><br><span class="line">&gt; db.staff.find(&#123;&quot;name&quot;:&#x2F;^\b&#x2F;&#125;)</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60434c93b562b8d1012436aa&quot;), &quot;name&quot; : &quot;Richey&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60434cffb562b8d1012436ab&quot;), &quot;name&quot; : &quot;Kelly&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60434cffb562b8d1012436ac&quot;), &quot;name&quot; : &quot;Darwin&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60434cffb562b8d1012436ad&quot;), &quot;name&quot; : &quot;Freeman&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60434f08b562b8d1012436ae&quot;), &quot;name&quot; : &quot;Jobs&quot;, &quot;age&quot; : 18 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60434f08b562b8d1012436af&quot;), &quot;name&quot; : &quot;Lili&quot;, &quot;gender&quot; : &quot;Female&quot; &#125;</span><br></pre></td></tr></table></figure><h2 id="find搜索子文档"><a href="#find搜索子文档" class="headerlink" title="find搜索子文档"></a>find搜索子文档</h2><p>find支持使用”field.sub_field”形式查询子文档</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">db.staff.insertOne(&#123;&quot;name&quot;:&quot;ZSan&quot;,&quot;age&quot;:28,&quot;addr&quot;:&#123;&quot;city&quot;:&quot;ShangHai&quot;,&quot;street&quot;:&quot;华夏西路188号&quot;&#125;&#125;)</span><br><span class="line">&#123;</span><br><span class="line">&quot;acknowledged&quot; : true,</span><br><span class="line">&quot;insertedId&quot; : ObjectId(&quot;60435997b562b8d1012436b0&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&gt; db.staff.find(&#123;&quot;addr.city&quot;:&quot;ShangHai&quot;&#125;)</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60435997b562b8d1012436b0&quot;), &quot;name&quot; : &quot;ZSan&quot;, &quot;age&quot; : 28, &quot;addr&quot; : &#123; &quot;city&quot; : &quot;ShangHai&quot;, &quot;street&quot; : &quot;华夏西路188号&quot; &#125; &#125;</span><br><span class="line"># 下面这种写法是错误的，子文档的查询应该用上面的写法</span><br><span class="line">&gt; db.staff.find(&#123;&quot;addr&quot;:&#123;&quot;city&quot;:&quot;ShangHai&quot;&#125;&#125;)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h2 id="find搜索数组"><a href="#find搜索数组" class="headerlink" title="find搜索数组"></a>find搜索数组</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.staff.insertOne(&#123;&quot;name&quot;:&quot;LSi&quot;,&quot;food&quot;:[&quot;egg&quot;,&quot;bread&quot;,&quot;milk&quot;]&#125;)</span><br><span class="line">&#123;</span><br><span class="line">&quot;acknowledged&quot; : true,</span><br><span class="line">&quot;insertedId&quot; : ObjectId(&quot;60435bbbb562b8d1012436b1&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&gt; db.staff.find(&#123;&quot;food&quot;:&quot;egg&quot;&#125;)</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60435bbbb562b8d1012436b1&quot;), &quot;name&quot; : &quot;LSi&quot;, &quot;food&quot; : [ &quot;egg&quot;, &quot;bread&quot;, &quot;milk&quot; ] &#125;</span><br><span class="line">&gt; db.staff.find(&#123;$or:[&#123;&quot;food&quot;:&quot;egg&quot;&#125;,&#123;&quot;food&quot;:&quot;milk&quot;&#125;]&#125;)</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60435bbbb562b8d1012436b1&quot;), &quot;name&quot; : &quot;LSi&quot;, &quot;food&quot; : [ &quot;egg&quot;, &quot;bread&quot;, &quot;milk&quot; ] &#125;</span><br></pre></td></tr></table></figure><p>数组中搜索子对象的多个字段时，用$elemMatch表示必须是同一个子对象满足多个条件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.staff.insertOne(&#123;&quot;name&quot;:&quot;WWu&quot;,&quot;favorite_books&quot;:[&#123;&quot;title&quot;:&quot;The Old Man and the Sea&quot;,&quot;author&quot;:&quot;Hemingway&quot;&#125;,&#123;&quot;title&quot;:&quot;围城&quot;,&quot;author&quot;:&quot;钱锺书&quot;&#125;]&#125;)</span><br><span class="line">&#123;</span><br><span class="line">&quot;acknowledged&quot; : true,</span><br><span class="line">&quot;insertedId&quot; : ObjectId(&quot;60435df1b562b8d1012436b2&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&gt; db.staff.find(&#123;&quot;favorite_books.title&quot;:&quot;The Old Man and the Sea&quot;,&quot;favorite_books.author&quot;:&quot;钱锺书&quot;&#125;)</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60435df1b562b8d1012436b2&quot;), &quot;name&quot; : &quot;WWu&quot;, &quot;favorite_books&quot; : [ &#123; &quot;title&quot; : &quot;The Old Man and the Sea&quot;, &quot;author&quot; : &quot;Hemingway&quot; &#125;, &#123; &quot;title&quot; : &quot;围城&quot;, &quot;author&quot; : &quot;钱锺书&quot; &#125; ] &#125;</span><br><span class="line">&gt; db.staff.find(&#123;&quot;favorite_books&quot;:&#123;$elemMatch:&#123;&quot;title&quot;:&quot;The Old Man and the Sea&quot;,&quot;author&quot;:&quot;钱锺书&quot;&#125;&#125;&#125;)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h2 id="控制find返回的字段-投影projection"><a href="#控制find返回的字段-投影projection" class="headerlink" title="控制find返回的字段(投影projection)"></a>控制find返回的字段(投影projection)</h2><p>find可以指定只返回指定的字段</p><p>_id字段必须明确指定不返回，否则默认返回</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.staff.find(&#123;$or:[&#123;&quot;food&quot;:&quot;egg&quot;&#125;,&#123;&quot;food&quot;:&quot;milk&quot;&#125;]&#125;,&#123;&quot;_id&quot;:0,&quot;name&quot;:1,&quot;food&quot;:1&#125;)</span><br><span class="line">&#123; &quot;name&quot; : &quot;LSi&quot;, &quot;food&quot; : [ &quot;egg&quot;, &quot;bread&quot;, &quot;milk&quot; ] &#125;</span><br><span class="line"></span><br><span class="line">&gt; db.staff.find(&#123;&#125;,&#123;&quot;_id&quot;:0,&quot;name&quot;:1,&quot;food&quot;:1&#125;)</span><br><span class="line">&#123; &quot;name&quot; : &quot;Richey&quot; &#125;</span><br><span class="line">&#123; &quot;name&quot; : &quot;Kelly&quot; &#125;</span><br><span class="line">&#123; &quot;name&quot; : &quot;Darwin&quot; &#125;</span><br><span class="line">&#123; &quot;name&quot; : &quot;Freeman&quot; &#125;</span><br><span class="line">&#123; &quot;name&quot; : &quot;Jobs&quot; &#125;</span><br><span class="line">&#123; &quot;name&quot; : &quot;Lili&quot; &#125;</span><br><span class="line">&#123; &quot;name&quot; : &quot;ZSan&quot; &#125;</span><br><span class="line">&#123; &quot;name&quot; : &quot;LSi&quot;, &quot;food&quot; : [ &quot;egg&quot;, &quot;bread&quot;, &quot;milk&quot; ] &#125;</span><br><span class="line">&#123; &quot;name&quot; : &quot;WWu&quot; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h1 id="使用remove删除文档"><a href="#使用remove删除文档" class="headerlink" title="使用remove删除文档"></a>使用remove删除文档</h1><p>remove 命令必须配合查询条件使用，否则mongo会报错，需要要删除全部可以使用空条件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.staff.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60434c93b562b8d1012436aa&quot;), &quot;name&quot; : &quot;Richey&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60434cffb562b8d1012436ab&quot;), &quot;name&quot; : &quot;Kelly&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60434cffb562b8d1012436ac&quot;), &quot;name&quot; : &quot;Darwin&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60434cffb562b8d1012436ad&quot;), &quot;name&quot; : &quot;Freeman&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60434f08b562b8d1012436ae&quot;), &quot;name&quot; : &quot;Jobs&quot;, &quot;age&quot; : 18 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60434f08b562b8d1012436af&quot;), &quot;name&quot; : &quot;Lili&quot;, &quot;gender&quot; : &quot;Female&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60435997b562b8d1012436b0&quot;), &quot;name&quot; : &quot;ZSan&quot;, &quot;age&quot; : 28, &quot;addr&quot; : &#123; &quot;city&quot; : &quot;ShangHai&quot;, &quot;street&quot; : &quot;华夏西路188号&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60435bbbb562b8d1012436b1&quot;), &quot;name&quot; : &quot;LSi&quot;, &quot;food&quot; : [ &quot;egg&quot;, &quot;bread&quot;, &quot;milk&quot; ] &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60435df1b562b8d1012436b2&quot;), &quot;name&quot; : &quot;WWu&quot;, &quot;favorite_books&quot; : [ &#123; &quot;title&quot; : &quot;The Old Man and the Sea&quot;, &quot;author&quot; : &quot;Hemingway&quot; &#125;, &#123; &quot;title&quot; : &quot;围城&quot;, &quot;author&quot; : &quot;钱锺书&quot; &#125; ] &#125;</span><br><span class="line">&gt; db.staff.remove(&#123;&quot;name&quot;:&quot;Jobs&quot;&#125;)</span><br><span class="line">WriteResult(&#123; &quot;nRemoved&quot; : 1 &#125;)</span><br><span class="line">&gt; db.staff.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60434c93b562b8d1012436aa&quot;), &quot;name&quot; : &quot;Richey&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60434cffb562b8d1012436ab&quot;), &quot;name&quot; : &quot;Kelly&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60434cffb562b8d1012436ac&quot;), &quot;name&quot; : &quot;Darwin&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60434cffb562b8d1012436ad&quot;), &quot;name&quot; : &quot;Freeman&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60434f08b562b8d1012436af&quot;), &quot;name&quot; : &quot;Lili&quot;, &quot;gender&quot; : &quot;Female&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60435997b562b8d1012436b0&quot;), &quot;name&quot; : &quot;ZSan&quot;, &quot;age&quot; : 28, &quot;addr&quot; : &#123; &quot;city&quot; : &quot;ShangHai&quot;, &quot;street&quot; : &quot;华夏西路188号&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60435bbbb562b8d1012436b1&quot;), &quot;name&quot; : &quot;LSi&quot;, &quot;food&quot; : [ &quot;egg&quot;, &quot;bread&quot;, &quot;milk&quot; ] &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60435df1b562b8d1012436b2&quot;), &quot;name&quot; : &quot;WWu&quot;, &quot;favorite_books&quot; : [ &#123; &quot;title&quot; : &quot;The Old Man and the Sea&quot;, &quot;author&quot; : &quot;Hemingway&quot; &#125;, &#123; &quot;title&quot; : &quot;围城&quot;, &quot;author&quot; : &quot;钱锺书&quot; &#125; ] &#125;</span><br><span class="line">&gt; db.staff.remove(&#123;&#125;)</span><br><span class="line">WriteResult(&#123; &quot;nRemoved&quot; : 8 &#125;)</span><br><span class="line">&gt; db.staff.find()</span><br></pre></td></tr></table></figure><h1 id="使用update更新文档"><a href="#使用update更新文档" class="headerlink" title="使用update更新文档"></a>使用update更新文档</h1><p>db.&lt;集合&gt;.updat(&lt;查询条件&gt;,&lt;更新字段&gt;)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.staff.insertMany([&#123;&quot;name&quot;:&quot;Richey&quot;,&quot;age&quot;:18&#125;,&#123;&quot;name&quot;:&quot;Kelly&quot;,&quot;age&quot;:20&#125;])</span><br><span class="line">&#123;</span><br><span class="line">&quot;acknowledged&quot; : true,</span><br><span class="line">&quot;insertedIds&quot; : [</span><br><span class="line">ObjectId(&quot;60439f09b562b8d1012436b3&quot;),</span><br><span class="line">ObjectId(&quot;60439f09b562b8d1012436b4&quot;)</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&gt; db.staff.updateOne(&#123;&quot;name&quot;:&quot;Richey&quot;&#125;,&#123;$set:&#123;&quot;age&quot;:24&#125;&#125;)</span><br><span class="line">WriteResult(&#123; &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 1 &#125;)</span><br><span class="line">&gt; db.staff.find(&#123;&quot;name&quot;:&quot;Richey&quot;&#125;)</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60439f09b562b8d1012436b3&quot;), &quot;name&quot; : &quot;Richey&quot;, &quot;age&quot; : 24 &#125;</span><br></pre></td></tr></table></figure><p>使用updateOne无论条件匹配多少条，都只会更新第一条</p><p>使用updateMany表示条件匹配多少条就更新多少条</p><p>使用updateOne/updateMany发方法要求更新条件部份（第二个参数）必须具有以下之一，否则报错：</p><ul><li>$set/$unset</li><li>$push/$pushAll/$pop</li><li>$pull/$pullAll</li><li>$addToSet</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$push :增加一个对象到数据底部</span><br><span class="line">$pushAll： 增加多个对象到数组底部</span><br><span class="line">$pop： 从数组底部删除一个对象</span><br><span class="line">$pull： 如果匹配指定的值，则从数组中删除相应的对象</span><br><span class="line">$pullAll： 如果匹配任意的值，则从数组中三处相应的对象</span><br><span class="line">$addToSet： 如果不存在则增加一个值到数组</span><br></pre></td></tr></table></figure><h1 id="使用drop删除集合"><a href="#使用drop删除集合" class="headerlink" title="使用drop删除集合"></a>使用drop删除集合</h1><p>db.&lt;集合&gt;.drop()</p><p>集合中的全部文档都会被删除</p><p>集合相关的索引也会被删除</p><p>一定要谨慎使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; use test</span><br><span class="line">switched to db test</span><br><span class="line">&gt; show collections</span><br><span class="line">staff</span><br><span class="line">&gt; db.staff.drop()</span><br><span class="line">true</span><br><span class="line">&gt; show collections</span><br></pre></td></tr></table></figure><h1 id="使用dropDatabase删除数据库"><a href="#使用dropDatabase删除数据库" class="headerlink" title="使用dropDatabase删除数据库"></a>使用dropDatabase删除数据库</h1><p>db.dropDatabase()</p><p>数据库相应的文件也会被删除，磁盘空间将被释放</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt; show dbs</span><br><span class="line">admin   0.000GB</span><br><span class="line">config  0.000GB</span><br><span class="line">local   0.000GB</span><br><span class="line">mock    0.047GB</span><br><span class="line">test    0.000GB</span><br><span class="line">&gt; use test</span><br><span class="line">switched to db test</span><br><span class="line">&gt; db.dropDatabase()</span><br><span class="line">&#123; &quot;dropped&quot; : &quot;test&quot;, &quot;ok&quot; : 1 &#125;</span><br><span class="line">&gt; show dbs</span><br><span class="line">admin   0.000GB</span><br><span class="line">config  0.000GB</span><br><span class="line">local   0.000GB</span><br><span class="line">mock    0.047GB</span><br><span class="line">&gt; show collections</span><br></pre></td></tr></table></figure><h1 id="SQL和MQL查询逻辑对照"><a href="#SQL和MQL查询逻辑对照" class="headerlink" title="SQL和MQL查询逻辑对照"></a>SQL和MQL查询逻辑对照</h1><p><a href="https://docs.mongodb.com/manual/reference/sql-comparison/" target="_blank" rel="noopener">官方文档</a></p><p><img src="https://blog-pic-1254088127.picsh.myqcloud.com/sql-mapping-mql.png" alt="SQL-MAPPING-MQL"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;intert插入操作&quot;&gt;&lt;a href=&quot;#intert插入操作&quot; class=&quot;headerlink&quot; title=&quot;intert插入操作&quot;&gt;&lt;/a&gt;intert插入操作&lt;/h1&gt;&lt;p&gt;db.&amp;lt;集合&amp;gt;.insertOne(&amp;lt;JSON对象&amp;gt;
      
    
    </summary>
    
    
      <category term="DB" scheme="http://10000hours.top/categories/DB/"/>
    
    
      <category term="mongoDB" scheme="http://10000hours.top/tags/mongoDB/"/>
    
  </entry>
  
  <entry>
    <title>mongoDB系列01-mongoDB基础</title>
    <link href="http://10000hours.top/2021/03/06/mongoDB%E7%B3%BB%E5%88%9701-mongoDB%E5%9F%BA%E7%A1%80/"/>
    <id>http://10000hours.top/2021/03/06/mongoDB%E7%B3%BB%E5%88%9701-mongoDB%E5%9F%BA%E7%A1%80/</id>
    <published>2021-03-05T16:00:00.000Z</published>
    <updated>2021-03-06T09:28:20.217Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>版本选择：</p><ul><li>企业版</li><li>社区版 所有环境免费使用</li><li>TGZ server mongos tools 和 shell</li></ul><p><a href="https://www.mongodb.com/try/download/community" target="_blank" rel="noopener">下载地址:https://www.mongodb.com/try/download/community</a></p><p>选择好版本后可以生成下载连接,以命令行操作为例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建目录,mongod 默认会使用/data/db目录进行数据存储</span></span><br><span class="line">sudo mkdir -p /data /data/db</span><br><span class="line"></span><br><span class="line">cd /data</span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载安装mongodb</span></span><br><span class="line">curl -O sudo curl -O https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel80-4.2.13-rc1.tgz </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压缩</span></span><br><span class="line"></span><br><span class="line">(base) [richey@localhost data]$ sudo tar -xvf mongodb-linux-x86_64-rhel80-4.2.13-rc1.tgz </span><br><span class="line">mongodb-linux-x86_64-rhel80-4.2.13-rc1/THIRD-PARTY-NOTICES.gotools</span><br><span class="line">mongodb-linux-x86_64-rhel80-4.2.13-rc1/README</span><br><span class="line">mongodb-linux-x86_64-rhel80-4.2.13-rc1/THIRD-PARTY-NOTICES</span><br><span class="line">mongodb-linux-x86_64-rhel80-4.2.13-rc1/MPL-2</span><br><span class="line">mongodb-linux-x86_64-rhel80-4.2.13-rc1/LICENSE-Community.txt</span><br><span class="line">mongodb-linux-x86_64-rhel80-4.2.13-rc1/bin/mongodump</span><br><span class="line">mongodb-linux-x86_64-rhel80-4.2.13-rc1/bin/mongorestore</span><br><span class="line">mongodb-linux-x86_64-rhel80-4.2.13-rc1/bin/mongoexport</span><br><span class="line">mongodb-linux-x86_64-rhel80-4.2.13-rc1/bin/mongoimport</span><br><span class="line">mongodb-linux-x86_64-rhel80-4.2.13-rc1/bin/mongostat</span><br><span class="line">mongodb-linux-x86_64-rhel80-4.2.13-rc1/bin/mongotop</span><br><span class="line">mongodb-linux-x86_64-rhel80-4.2.13-rc1/bin/bsondump</span><br><span class="line">mongodb-linux-x86_64-rhel80-4.2.13-rc1/bin/mongofiles</span><br><span class="line">mongodb-linux-x86_64-rhel80-4.2.13-rc1/bin/mongoreplay</span><br><span class="line">mongodb-linux-x86_64-rhel80-4.2.13-rc1/bin/mongod</span><br><span class="line">mongodb-linux-x86_64-rhel80-4.2.13-rc1/bin/mongos</span><br><span class="line">mongodb-linux-x86_64-rhel80-4.2.13-rc1/bin/mongo</span><br><span class="line">mongodb-linux-x86_64-rhel80-4.2.13-rc1/bin/install_compass</span><br><span class="line">(base) [richey@localhost data]$ ls</span><br><span class="line">db  mongodb-linux-x86_64-rhel80-4.2.13-rc1  mongodb-linux-x86_64-rhel80-4.2.13-rc1.tgz</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置环境变量</span></span><br><span class="line">export PATH=$PATH:/data/mongodb-linux-x86_64-rhel80-4.2.13-rc1/bin</span><br><span class="line"><span class="meta">#</span><span class="bash"> 永久配置</span></span><br><span class="line">sudo vim /etc/profile</span><br><span class="line">在文件最后添加：</span><br><span class="line">export PATH=$PATH:/data/mongodb-linux-x86_64-rhel80-4.2.13-rc1/bin</span><br><span class="line">使配置立马剩下</span><br><span class="line">source /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 此时mongodb就配置好了,可以输入mongod启动服务</span></span><br></pre></td></tr></table></figure><h1 id="直接使用mongodb云服务"><a href="#直接使用mongodb云服务" class="headerlink" title="直接使用mongodb云服务"></a>直接使用mongodb云服务</h1><p>也可以在mongodb官网直接注册，可以创建一个免费的mongodb云存储服务</p><p>创建好后可以配置连接方式，创建用户名密码<br><img src="https://blog-pic-1254088127.picsh.myqcloud.com/Clusters-Atlas-MongoDB-Atlas.png" alt="配置mongodb 云服务"></p><p>选择连接方式<br>![配置mongodb 云服务](<a href="https://blog-pic-1254088127.picsh.myqcloud.com/Clusters-Atlas-MongoDB-Atlas" target="_blank" rel="noopener">https://blog-pic-1254088127.picsh.myqcloud.com/Clusters-Atlas-MongoDB-Atlas</a> -2.png)</p><p>我们已经在本地安装了mongodb，可以选择在shell中连接，复制上面的地址在本地执行，输入密码即可连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MongoDB Enterprise atlas-zh2gha-shard-0:PRIMARY&gt; show dbs</span><br><span class="line">2021-03-06T16:11:21.925+0800 I  CONNPOOL [ReplicaSetMonitor-TaskExecutor] Connecting to cluster0-shard-00-02.leoli.mongodb.net:27017</span><br><span class="line">admin  0.000GB</span><br><span class="line">local  1.253GB</span><br></pre></td></tr></table></figure><h1 id="安装图形化管理工具Compass"><a href="#安装图形化管理工具Compass" class="headerlink" title="安装图形化管理工具Compass"></a>安装图形化管理工具Compass</h1><p>去官网下载合适的包,安装即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(base) [richey@localhost opt]$ sudo rpm -ivh mongodb-compass-1.26.0.x86_64.rpm </span><br><span class="line">警告：mongodb-compass-1.26.0.x86_64.rpm: 头V3 RSA&#x2F;SHA1 Signature, 密钥 ID ea312927: NOKEY</span><br><span class="line">Verifying...                          ################################# [100%]</span><br><span class="line">准备中...                          ################################# [100%]</span><br><span class="line">正在升级&#x2F;安装...</span><br><span class="line">   1:mongodb-compass-1.26.0-1.el7     ################################# [100%]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;p&gt;版本选择：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;企业版&lt;/li&gt;
&lt;li&gt;社区版 所有环境免费使用&lt;/li&gt;
&lt;li&gt;TGZ server mongo
      
    
    </summary>
    
    
      <category term="DB" scheme="http://10000hours.top/categories/DB/"/>
    
    
      <category term="mongoDB" scheme="http://10000hours.top/tags/mongoDB/"/>
    
  </entry>
  
  <entry>
    <title>python-操作mongodb</title>
    <link href="http://10000hours.top/2021/03/01/python-%E6%93%8D%E4%BD%9Cmongodb/"/>
    <id>http://10000hours.top/2021/03/01/python-%E6%93%8D%E4%BD%9Cmongodb/</id>
    <published>2021-02-28T16:00:00.000Z</published>
    <updated>2021-03-07T10:26:06.785Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装Python-MongoDB驱动"><a href="#安装Python-MongoDB驱动" class="headerlink" title="安装Python MongoDB驱动"></a>安装Python MongoDB驱动</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pip install pymongo</span><br><span class="line">``` </span><br><span class="line"><span class="comment"># 检查驱动安装</span></span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pymongo</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pymongo.version</span><br><span class="line"><span class="string">'3.11.3'</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h1 id="创建连接"><a href="#创建连接" class="headerlink" title="创建连接"></a>创建连接</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>uri = <span class="string">"mongodb://127.0.0.1:27017"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>client = MongoClient(uri)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(client)</span><br><span class="line">MongoClient(host=[<span class="string">'127.0.0.1:27017'</span>], document_class=dict, tz_aware=<span class="literal">False</span>, connect=<span class="literal">True</span>)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h1 id="操作数据库和集合"><a href="#操作数据库和集合" class="headerlink" title="操作数据库和集合"></a>操作数据库和集合</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>db = client[<span class="string">"salary"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>payslip_collection = db[<span class="string">"payslip"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>new_payslip = &#123;<span class="string">"basesalary"</span>:<span class="number">2800</span>,<span class="string">"bonus"</span>:<span class="number">8000</span>,<span class="string">"performances"</span>:<span class="number">1600</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>result = payslip_collection.insert_one(new_payslip)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(result)</span><br><span class="line">&lt;pymongo.results.InsertOneResult object at <span class="number">0x7fd8ee8cdf00</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; show dbs</span><br><span class="line">admin   <span class="number">0.000</span>GB</span><br><span class="line">config  <span class="number">0.000</span>GB</span><br><span class="line">local   <span class="number">0.000</span>GB</span><br><span class="line">mock    <span class="number">0.047</span>GB</span><br><span class="line">salary  <span class="number">0.000</span>GB</span><br><span class="line">test    <span class="number">0.000</span>GB</span><br><span class="line">&gt; use salary</span><br><span class="line">switched to db salary</span><br><span class="line">&gt; show collections</span><br><span class="line">payslip</span><br><span class="line">&gt; db.payslip.find()</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"6044a74ca6868ddcfa42c426"</span>), <span class="string">"basesalary"</span> : <span class="number">2800</span>, <span class="string">"bonus"</span> : <span class="number">8000</span>, <span class="string">"performances"</span> : <span class="number">1600</span> &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h1 id="更新操作"><a href="#更新操作" class="headerlink" title="更新操作"></a>更新操作</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>result = payslip_collection.update_one(&#123;<span class="string">"basesalary"</span>:<span class="number">2800</span>&#125;,&#123;<span class="string">"$set"</span>:&#123;<span class="string">"positionsalary"</span>:<span class="number">3000</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line">&gt; db.payslip.find()</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"6044a74ca6868ddcfa42c426"</span>), <span class="string">"basesalary"</span> : <span class="number">2800</span>, <span class="string">"bonus"</span> : <span class="number">8000</span>, <span class="string">"performances"</span> : <span class="number">1600</span>, <span class="string">"positionsalary"</span> : <span class="number">3000</span> &#125;</span><br><span class="line">&gt; </span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里不需要修改数据库表结构</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装Python-MongoDB驱动&quot;&gt;&lt;a href=&quot;#安装Python-MongoDB驱动&quot; class=&quot;headerlink&quot; title=&quot;安装Python MongoDB驱动&quot;&gt;&lt;/a&gt;安装Python MongoDB驱动&lt;/h1&gt;&lt;figure c
      
    
    </summary>
    
    
      <category term="Phthon" scheme="http://10000hours.top/categories/Phthon/"/>
    
    
      <category term="Python" scheme="http://10000hours.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>jupyter环境搭建</title>
    <link href="http://10000hours.top/2021/02/20/jupyter%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://10000hours.top/2021/02/20/jupyter%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2021-02-19T16:00:00.000Z</published>
    <updated>2021-02-19T15:27:26.928Z</updated>
    
    <content type="html"><![CDATA[<ol><li>安装anaconda</li><li>pycharm中新建项目配置环境变量为conda</li><li>安装必要的包</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip3 install -i https:&#x2F;&#x2F;pypi.doubanio.com&#x2F;simple pandas jupyter xlrd openpyxl pillow matplotlib seaborn</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;安装anaconda&lt;/li&gt;
&lt;li&gt;pycharm中新建项目配置环境变量为conda&lt;/li&gt;
&lt;li&gt;安装必要的包&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte
      
    
    </summary>
    
    
      <category term="Phthon" scheme="http://10000hours.top/categories/Phthon/"/>
    
    
      <category term="Python" scheme="http://10000hours.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Kafka重平衡（Rebalance）</title>
    <link href="http://10000hours.top/2021/02/20/Kafka%E9%87%8D%E5%B9%B3%E8%A1%A1%EF%BC%88Rebalance%EF%BC%89/"/>
    <id>http://10000hours.top/2021/02/20/Kafka%E9%87%8D%E5%B9%B3%E8%A1%A1%EF%BC%88Rebalance%EF%BC%89/</id>
    <published>2021-02-19T16:00:00.000Z</published>
    <updated>2021-02-21T10:08:06.350Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是Rebalance"><a href="#什么是Rebalance" class="headerlink" title="什么是Rebalance"></a>什么是Rebalance</h1><p>首先要搞清楚，为什么要Rebalance：由于消费者组订阅了topic，因topic partition数和消费者组成员个数不同而存在的分配机制。</p><p>Rebalance是让Consumer Group下所有的Consumer重新分配Topic的每个分区的过程。</p><p>Rebalance过程所有的consumer都会参与，在协调者组件（Coordinator）的帮助下，完成主题分区的分配。</p><p>整个Rebalance过程，所有Consumer都不能消费，而且这个过程比较慢。</p><h1 id="什么时候会Rebalance"><a href="#什么时候会Rebalance" class="headerlink" title="什么时候会Rebalance"></a>什么时候会Rebalance</h1><p>有三种情况会触发Rebalance：</p><ol><li><p>有新的Consumer加入Consumer Group</p></li><li><p>Consumer Group订阅的主题数量发生变化</p></li><li><p>Consumer Group订阅的主题的数量发生变化</p></li></ol><p>Rebalance时Consumer Group内所有的consumer都会参与。</p><h1 id="如何避免Rebalance"><a href="#如何避免Rebalance" class="headerlink" title="如何避免Rebalance"></a>如何避免Rebalance</h1><p>上面说了有三种情况会发生Rebalance，只要这三种情况的任一情况发生，都必然会产生Rebalance。这三种情况有些是计划内的，比如增加一个Consumer，调整分区数，添加或减少<br>某个主题的订阅。</p><p>我们只能尽量避免那些必不要的Rebalance，比如某些情况Consumer被Coordinator错误的认为已停止，从而被提出Consumer Group。</p><ul><li><p>Coordinator什么情况会认为Consumer已停止？</p><p>Consumer会定时往Coordinator发送心跳，证明它还活着。如果Consumer不能及时的发送这个心跳请求，就会被Coordinator认为已经死了，从而将其从Group中移除，然后进行Rebalance。<br>Consumer端的参数session.timeout.ms决定了Consumer存活性的时间间隔，默认10s，即Coordinator如果10s内没有收到Consuner的心跳请求，即认为Consumer死亡。</p><p>Consumer参数heartbeat.interval.ms 控制的是Consumer端发送心跳请求的间隔。这个值越小心跳频次发送的越高，占用带宽越多，但是可以更快的知道是否需要Rebalance，<br>因为Coordinator通知各个Consumer机型Rabalance的方式就是将 REBALANCE_NEEDED 标志封装进心跳请求的响应体中。</p><p>Consumer参数 max.poll.interval.ms 限定了Consumer端两次调用poll方法的最大时间间隔，默认5分钟。即如果在5分钟内无法完成poll方法返回的消息，则Consumer会主动发起离开组的请求，Coorditator也会开始新一轮的Rabalance.也可以修改max.poll.records参数，减少一次poll拉取的消息数，从而减少消费时间。</p><p>Consumer参数说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">session.timeout.ms 决定了 Consumer 存活性的时间间隔</span><br><span class="line">heartbeat.interval.ms 控制的是Consumer端发送心跳请求的间隔</span><br><span class="line">max.poll.interval.ms 限定了Consumer端两次调用poll方法的最大时间间隔（即是处理一次poll方法返回消息的最大允许时间）</span><br></pre></td></tr></table></figure></li><li><p>Consumer未及时发送心跳导致的Rebalance</p><p>上面我们说了Consumer发送的心跳频次的参数和Coordinator认为Consumer死亡时间的参数。所以为了避免Coordinator错误的判断Consumer死亡的发生，我们要在较短的时间内，较多的发送请求。推荐参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 在Coordinator认为Consumer死亡之前（6s内），发送三次心跳请求</span><br><span class="line">session.timeout.ms &#x3D; 6s</span><br><span class="line">heartbeat.interval.ms &#x3D; 2s</span><br></pre></td></tr></table></figure></li><li><p>Consumer消费时间过长导致的Rebalance</p><p>上面说了max.poll.interval.ms时间内Consumer没有消费完上次poll拉取的消息，则Consumber会主动请求离开组，然后Coordinator进行Rebalance。<br>所以需要了解业务处理时间，合理的设置max.poll.interval.ms</p></li></ul><ul><li><p>频繁Full GC引起的Rebalance</p><p>Full GC导致的长时间停顿，导致业务没有在正常时间内处理完，触发max.poll.interval.ms超时时间，产生Rebalance。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是Rebalance&quot;&gt;&lt;a href=&quot;#什么是Rebalance&quot; class=&quot;headerlink&quot; title=&quot;什么是Rebalance&quot;&gt;&lt;/a&gt;什么是Rebalance&lt;/h1&gt;&lt;p&gt;首先要搞清楚，为什么要Rebalance：由于消费者组订阅了
      
    
    </summary>
    
    
      <category term="MQ" scheme="http://10000hours.top/categories/MQ/"/>
    
    
      <category term="kafka" scheme="http://10000hours.top/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>Python库-Pandas说明</title>
    <link href="http://10000hours.top/2021/02/19/Python%E5%BA%93-Pandas%E8%AF%B4%E6%98%8E/"/>
    <id>http://10000hours.top/2021/02/19/Python%E5%BA%93-Pandas%E8%AF%B4%E6%98%8E/</id>
    <published>2021-02-18T16:00:00.000Z</published>
    <updated>2021-02-22T16:05:43.957Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><a href="https://pandas.pydata.org/docs/index.html" target="_blank" rel="noopener">pandas官网</a><br>pandas 是用来做数据分析的一个工具库，为Python编程语言提供高性能、易用的数据结构和数据分析工具</p><p>也可以简单的认为pandans是Python中的excel表</p><h1 id="对比列表-numpy-pandas"><a href="#对比列表-numpy-pandas" class="headerlink" title="对比列表/numpy/pandas"></a>对比列表/numpy/pandas</h1><ul><li><p>列表里的元素可以是python中的任意对象，使用方便，但是存在性能问题</p></li><li><p>numpy 是一个多维的数组结构，区别于列表，numpy只能保存同一类型的数据，通常为数值型，numpy大大提高了对于数据类型的计算效率</p></li><li><p>pandas 构建在numpy之上，继承了numpy的高效，同时又更易于使用</p><p><img src="https://blog-pic-1254088127.picsh.myqcloud.com/python-list-nunpy-pandas.png" alt="list-numpy-pandas"></p></li></ul><p>易用性示例：</p><p>  <img src="https://blog-pic-1254088127.picsh.myqcloud.com/pandas02.png" alt="pandas"></p><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><p>pandas 没有3维及以上数据结构</p><ol><li><p>Seris</p><p>一维数据</p></li><li><p>DataFrame</p><p>二维数据,DataFrame中的每一列都是Seris</p><p>read_excel</p><p>to_excel</p><p>append() 上下拼接多个表格</p><p>join（） 左右拼接两个表格</p><p>concat() 通过设置axis参数，上下或左右拼接多个表格</p><p>merge() 相当于excel中的vlookup，通过同一列相同的元素把两个表格合并在一起</p><p>pivot_table 相当于excel中的透视操作</p><p>rolling() 固定窗口滚动操作</p><p>expanding() 扩展窗口操作</p></li></ol><h1 id="创建Series"><a href="#创建Series" class="headerlink" title="创建Series"></a>创建Series</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">s</span><br></pre></td></tr></table></figure><pre><code>0    11    22    3dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">              index=list(<span class="string">'abc'</span>),</span><br><span class="line">              dtype=<span class="string">'int64'</span>,</span><br><span class="line">              name=<span class="string">'num'</span>)</span><br><span class="line">s</span><br></pre></td></tr></table></figure><pre><code>a    1b    2c    3Name: num, dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">'a'</span>:<span class="number">1</span>,<span class="string">'b'</span>:<span class="number">2</span>,<span class="string">'c'</span>:<span class="number">3</span>&#125;</span><br><span class="line">s = pd.Series(d)</span><br><span class="line">s</span><br></pre></td></tr></table></figure><pre><code>a    1b    2c    3dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = pd.Series(<span class="number">3.0</span>,index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>])</span><br><span class="line">s</span><br></pre></td></tr></table></figure><pre><code>a    3.0b    3.0c    3.0dtype: float64</code></pre><p>实际开发中，我们一般通过读取Excel创建</p><h1 id="创建DataFrame"><a href="#创建DataFrame" class="headerlink" title="创建DataFrame"></a>创建DataFrame</h1><ul><li>通过二维list-like创建</li><li>通过字典创建</li><li>通过读取Excel表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list_2d = [[<span class="number">1</span>,<span class="number">2</span>],</span><br><span class="line">           [<span class="number">3</span>,<span class="number">4</span>]]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(list_2d)</span><br><span class="line">df</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>0</th>      <th>1</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1</td>      <td>2</td>    </tr>    <tr>      <th>1</th>      <td>3</td>      <td>4</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(list_2d,</span><br><span class="line">                  columns=[<span class="string">'A'</span>,<span class="string">'B'</span>],</span><br><span class="line">                  index=[<span class="string">'x'</span>,<span class="string">'y'</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">'A'</span>:[<span class="number">1</span>,<span class="number">3</span>],<span class="string">'B'</span>:[<span class="number">2</span>,<span class="number">4</span>]&#125;</span><br><span class="line">df = pd.DataFrame(d,index=[<span class="string">'x'</span>,<span class="string">'y'</span>])</span><br><span class="line">df</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>A</th>      <th>B</th>    </tr>  </thead>  <tbody>    <tr>      <th>x</th>      <td>1</td>      <td>2</td>    </tr>    <tr>      <th>y</th>      <td>3</td>      <td>4</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_excel(<span class="string">'staffSalary.xlsx'</span>)</span><br><span class="line">df</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>姓名</th>      <th>部门</th>      <th>工号</th>      <th>纳税人身份</th>      <th>员工状态</th>      <th>入职日期</th>      <th>基本工资</th>      <th>岗位工资</th>      <th>合同类型改</th>      <th>员工类型</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>张三</td>      <td>销售部</td>      <td>GH00030</td>      <td>居民</td>      <td>在职</td>      <td>2019-01-03</td>      <td>10035</td>      <td>2000</td>      <td>劳动合同</td>      <td>全职</td>    </tr>    <tr>      <th>1</th>      <td>李四</td>      <td>销售部</td>      <td>GH00031</td>      <td>居民</td>      <td>在职</td>      <td>2019-05-08</td>      <td>10036</td>      <td>2000</td>      <td>劳动合同</td>      <td>全职</td>    </tr>    <tr>      <th>2</th>      <td>王五</td>      <td>销售部</td>      <td>GH00032</td>      <td>居民</td>      <td>在职</td>      <td>2019-01-01</td>      <td>10000</td>      <td>5000</td>      <td>劳动合同</td>      <td>全职</td>    </tr>    <tr>      <th>3</th>      <td>赵六</td>      <td>销售部</td>      <td>GH00033</td>      <td>居民</td>      <td>在职</td>      <td>2019-01-01</td>      <td>10000</td>      <td>5000</td>      <td>劳动合同</td>      <td>全职</td>    </tr>  </tbody></table></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://pandas.pydata.org/docs/index.html&quot; target=&quot;_blank&quot; re
      
    
    </summary>
    
    
      <category term="Phthon" scheme="http://10000hours.top/categories/Phthon/"/>
    
    
      <category term="Python" scheme="http://10000hours.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>python基础</title>
    <link href="http://10000hours.top/2021/01/30/python%E5%9F%BA%E7%A1%80/"/>
    <id>http://10000hours.top/2021/01/30/python%E5%9F%BA%E7%A1%80/</id>
    <published>2021-01-29T16:00:00.000Z</published>
    <updated>2021-01-30T17:01:36.004Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据类型和数据结构"><a href="#数据类型和数据结构" class="headerlink" title="数据类型和数据结构"></a>数据类型和数据结构</h1><h2 id="基础数据类型"><a href="#基础数据类型" class="headerlink" title="基础数据类型"></a>基础数据类型</h2><ol><li>整数 int 123</li><li>浮点数 float 1.234</li><li>字符串 str “Python”</li><li>布尔值 bool True False</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; type(123)</span><br><span class="line">&lt;class &#39;int&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; type(&quot;Phthon&quot;)</span><br><span class="line">&lt;class &#39;str&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; type(1.234)</span><br><span class="line">&lt;class &#39;float&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; type(True)</span><br><span class="line">&lt;class &#39;bool&#39;&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>类型转换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="string">'123'</span>)</span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str(<span class="number">123</span>)</span><br><span class="line"><span class="string">'123'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bool(<span class="number">123</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bool(<span class="number">0</span>)</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 计算薪资</span><br><span class="line"># 工作天数</span><br><span class="line">workday &#x3D; 21.75;</span><br><span class="line"># 日薪</span><br><span class="line">dailyPay &#x3D; 288;</span><br><span class="line"># 奖金</span><br><span class="line">bonus &#x3D; 566;</span><br><span class="line">total &#x3D; workday * dailyPay + bonus;</span><br><span class="line">print(total);</span><br></pre></td></tr></table></figure><h2 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h2><p>序列有两个特性</p><ol><li>成员是有序的</li><li>可以通过下标访问一个或几个成员</li></ol><ul><li>字符串、列表、元组都属于序列</li></ul><ol><li>字符串 “春夏秋冬”</li><li>列表 [1,”春”,2,”秋”]</li><li>元组 (“春”,”夏”,”秋”,”冬”)  元组中存放不可变更的内容,没有增加删除等功能</li></ol><ul><li>序列基本操作</li></ul><ol><li>[not] in 成员关系</li><li><ul><li>连接 </li></ul></li><li><ul><li>重复</li></ul></li><li>: 切片 </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># 数据结构相关</span><br><span class="line"># 四季</span><br><span class="line">seasons &#x3D; [&quot;春&quot;, &quot;夏&quot;, &quot;秋&quot;, &quot;冬&quot;];</span><br><span class="line"></span><br><span class="line"># ---------------------切片操作</span><br><span class="line"># 第一季</span><br><span class="line">print(seasons[0])</span><br><span class="line"># 第一季和第三季</span><br><span class="line">print(seasons[0:2])</span><br><span class="line"># 倒数第一季</span><br><span class="line">print(seasons[-1])</span><br><span class="line"></span><br><span class="line"># ---------------------连接操作</span><br><span class="line">print(seasons + seasons)</span><br><span class="line">print(seasons + [1,2,3])</span><br><span class="line"></span><br><span class="line"># ---------------------重复操作</span><br><span class="line">print(seasons * 2)</span><br><span class="line"># ---------------------关系操作</span><br><span class="line">print(&quot;春&quot; in seasons)</span><br><span class="line">print(&quot;春&quot; not in seasons)</span><br><span class="line"></span><br><span class="line"># 结果</span><br><span class="line">春</span><br><span class="line">[&#39;春&#39;, &#39;夏&#39;]</span><br><span class="line">冬</span><br><span class="line">[&#39;春&#39;, &#39;夏&#39;, &#39;秋&#39;, &#39;冬&#39;, &#39;春&#39;, &#39;夏&#39;, &#39;秋&#39;, &#39;冬&#39;]</span><br><span class="line">[&#39;春&#39;, &#39;夏&#39;, &#39;秋&#39;, &#39;冬&#39;, 1, 2, 3]</span><br><span class="line">[&#39;春&#39;, &#39;夏&#39;, &#39;秋&#39;, &#39;冬&#39;, &#39;春&#39;, &#39;夏&#39;, &#39;秋&#39;, &#39;冬&#39;]</span><br><span class="line">True</span><br><span class="line">False</span><br></pre></td></tr></table></figure><p>元组demo 计算某一天属于哪个季节</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 计算某一天属于哪个季节</span><br><span class="line"></span><br><span class="line"># 计算某一天属于哪个季节</span><br><span class="line"></span><br><span class="line">seasons &#x3D; (&quot;春&quot;,&quot;夏&quot;,&quot;秋&quot;,&quot;冬&quot;)</span><br><span class="line"></span><br><span class="line"># 季节的第一天</span><br><span class="line">seasonsFirstDays &#x3D; ((1,1),(4,1),(7,1),(10,1))</span><br><span class="line"></span><br><span class="line">(month,day) &#x3D; (2,11)</span><br><span class="line">#(month,day) &#x3D; list(map(int,input(&quot;请输入月和日，用空格隔开&quot;).split()))</span><br><span class="line">print((month,day))</span><br><span class="line">filterSeasonFirstDay &#x3D; filter(lambda x : x &lt;&#x3D; (month,day),seasonsFirstDays)</span><br><span class="line">filterSeasonFirstDayLen  &#x3D; len(list(filterSeasonFirstDay))</span><br><span class="line">seasonIndex &#x3D; filterSeasonFirstDayLen % 4 -1</span><br><span class="line">print(seasonIndex)</span><br><span class="line">print(seasons[seasonIndex])</span><br><span class="line"></span><br><span class="line">[(1, 1)]</span><br><span class="line">-1</span><br><span class="line">冬</span><br></pre></td></tr></table></figure><p>列表demo </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 列表的操作，区别于元组，列表可以添加和删除</span><br><span class="line"></span><br><span class="line">bonusItem &#x3D; [&quot;全勤奖&quot;,&quot;绩效奖&quot;]</span><br><span class="line"></span><br><span class="line">bonusItem.append(&quot;项目奖&quot;)</span><br><span class="line">print(bonusItem)</span><br><span class="line">bonusItem.remove(&quot;绩效奖&quot;)</span><br><span class="line">print(bonusItem)</span><br><span class="line"></span><br><span class="line">[&#39;全勤奖&#39;, &#39;绩效奖&#39;, &#39;项目奖&#39;]</span><br><span class="line">[&#39;全勤奖&#39;, &#39;项目奖&#39;]</span><br></pre></td></tr></table></figure><h2 id="字典-key-value"><a href="#字典-key-value" class="headerlink" title="字典(key-value)"></a>字典(key-value)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;basesalary&quot;:&quot;4000&quot;,&quot;bonux&quot;:&quot;1888&quot;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"># 字典类型的使用</span><br><span class="line"></span><br><span class="line">dic1 &#x3D; &#123;&#125;</span><br><span class="line">print(type(dic1))</span><br><span class="line"></span><br><span class="line">dic2 &#x3D; &#123;&#39;basesalary&#39;:4000,&#39;bonus&#39;:1888&#125;</span><br><span class="line">dic2[&#39;postwage&#39;] &#x3D; 800</span><br><span class="line">print(dic2)</span><br><span class="line"></span><br><span class="line">&lt;class &#39;dict&#39;&gt;</span><br><span class="line">&#123;&#39;basesalary&#39;: 4000, &#39;bonus&#39;: 1888, &#39;postwage&#39;: 800&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 计算1到10所有偶数的平方</span><br><span class="line">list1 &#x3D; []</span><br><span class="line">for i in range(1,11):</span><br><span class="line">    if(i % 2 &#x3D;&#x3D; 0):</span><br><span class="line">        list1.append(i * i)</span><br><span class="line"></span><br><span class="line">print(list1)</span><br><span class="line"></span><br><span class="line"># 列表推导式语法</span><br><span class="line">list2 &#x3D; [i * i for i in range(1,11) if i % 2 &#x3D;&#x3D; 0]</span><br><span class="line">print(list2)</span><br><span class="line"></span><br><span class="line">upNumber &#x3D; (&quot;壹&quot;,&quot;贰&quot;,&quot;叁&quot;,&quot;肆&quot;,&quot;伍&quot;,&quot;陆&quot;,&quot;柒&quot;,&quot;捌&quot;,&quot;玖&quot;,&quot;拾&quot;)</span><br><span class="line">dic1 &#x3D; &#123;&#125;</span><br><span class="line">for i in upNumber:</span><br><span class="line">    dic1[i] &#x3D; 0;</span><br><span class="line">print(dic1)</span><br><span class="line"># 字典推导式语法</span><br><span class="line">dic2 &#x3D; &#123;i:0 for i in upNumber&#125;</span><br><span class="line">print(dic2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[4, 16, 36, 64, 100]</span><br><span class="line">[4, 16, 36, 64, 100]</span><br><span class="line">&#123;&#39;壹&#39;: 0, &#39;贰&#39;: 0, &#39;叁&#39;: 0, &#39;肆&#39;: 0, &#39;伍&#39;: 0, &#39;陆&#39;: 0, &#39;柒&#39;: 0, &#39;捌&#39;: 0, &#39;玖&#39;: 0, &#39;拾&#39;: 0&#125;</span><br><span class="line">&#123;&#39;壹&#39;: 0, &#39;贰&#39;: 0, &#39;叁&#39;: 0, &#39;肆&#39;: 0, &#39;伍&#39;: 0, &#39;陆&#39;: 0, &#39;柒&#39;: 0, &#39;捌&#39;: 0, &#39;玖&#39;: 0, &#39;拾&#39;: 0&#125;</span><br></pre></td></tr></table></figure><h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if 表达式:</span><br><span class="line">   代码块</span><br><span class="line">elif 表达式:</span><br><span class="line">   代码块</span><br><span class="line">else :</span><br><span class="line">  代码块</span><br></pre></td></tr></table></figure><h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for 迭代变量 in 可迭代对象:</span><br><span class="line">    代码块</span><br></pre></td></tr></table></figure><h2 id="while"><a href="#while" class="headerlink" title="while"></a>while</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">while 表达式:</span><br><span class="line">      代码块</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">upNumber &#x3D; (&quot;壹&quot;,&quot;贰&quot;,&quot;叁&quot;,&quot;肆&quot;,&quot;伍&quot;,&quot;陆&quot;,&quot;柒&quot;,&quot;捌&quot;,&quot;玖&quot;,&quot;拾&quot;)</span><br><span class="line">for num in range(10):</span><br><span class="line">    print(&quot;%s 的大写方式是:%s&quot; %(num,upNumber[(num - 1) % 10]))</span><br><span class="line"></span><br><span class="line">for idx in upNumber:</span><br><span class="line">    print(idx)</span><br></pre></td></tr></table></figure><h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><p>基本操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 文件操作</span><br><span class="line"></span><br><span class="line"># w是覆盖写入模式</span><br><span class="line">salaryfieldFile &#x3D; open(&#39;salaryfield.txt&#39;,&#39;w&#39;)</span><br><span class="line">salaryfieldFile.write(&quot;基本工资&quot;)</span><br><span class="line">salaryfieldFile.close()</span><br><span class="line"></span><br><span class="line">fieldRead &#x3D; open(&#39;salaryfield.txt&#39;)</span><br><span class="line">print(fieldRead.read())</span><br><span class="line">fieldRead.close()</span><br><span class="line"></span><br><span class="line"># 追加写入模式 a</span><br><span class="line"></span><br><span class="line">fieldAppend &#x3D; open(&#39;salaryfield.txt&#39;,&#39;a&#39;)</span><br><span class="line">fieldAppend.write(&#39;岗位工资&#39;)</span><br><span class="line">fieldAppend.close()</span><br></pre></td></tr></table></figure><p>指针操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 文件指针操作</span><br><span class="line"></span><br><span class="line">file &#x3D; open(&quot;salaryfield.txt&quot;)</span><br><span class="line">print(&quot;当前文件指针位置%s：&quot;%file.tell())</span><br><span class="line">print(&quot;我们读取了一个字符：%s&quot;%file.read(1))</span><br><span class="line">print(&quot;当前文件指针位置%s：&quot;%file.tell())</span><br><span class="line">file.seek(0)</span><br><span class="line">print(&quot;进行指针移动操作&quot;)</span><br><span class="line">print(&quot;当前文件指针位置%s：&quot;%file.tell())</span><br><span class="line"># seek 函数第一个参数是偏移量，第二个参数是相对位置：0表示从文件开头 1表示从当前位置 2表示从文件结尾</span><br><span class="line">file.seek(5,0)</span><br><span class="line">file.close()</span><br><span class="line"></span><br><span class="line">当前文件指针位置0：</span><br><span class="line">我们读取了一个字符：基</span><br><span class="line">当前文件指针位置3：</span><br><span class="line">进行指针移动操作</span><br><span class="line">当前文件指针位置0：</span><br></pre></td></tr></table></figure><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><p>异常处理语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">  代码块</span><br><span class="line">except Exception[,reason]</span><br><span class="line">  异常处理</span><br><span class="line">final:</span><br><span class="line">  最终执行代码</span><br></pre></td></tr></table></figure><p>异常处理demo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"># 异常处理</span><br><span class="line">try:</span><br><span class="line"> i &#x3D; j</span><br><span class="line">except NameError:</span><br><span class="line">    print(&#39;变量未定义异常&#39;)</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line"> 1&#x2F;0</span><br><span class="line">except ZeroDivisionError:</span><br><span class="line">    print(&#39;除数不能为0&#39;)</span><br><span class="line"></span><br><span class="line"># 捕获多个异常</span><br><span class="line">try:</span><br><span class="line"> 1&#x2F;0</span><br><span class="line">except (NameError,ZeroDivisionError):</span><br><span class="line">    print(&#39;程序出现了异常&#39;)</span><br><span class="line"></span><br><span class="line"># 打印异常信息</span><br><span class="line">try:</span><br><span class="line"> 1&#x2F;0</span><br><span class="line">except ZeroDivisionError as e:</span><br><span class="line">    print(&#39;除数不能为0,%s&#39;%e)</span><br><span class="line"></span><br><span class="line"># 通用异常捕获</span><br><span class="line">try:</span><br><span class="line"> 1&#x2F;0</span><br><span class="line">except Exception as e:</span><br><span class="line">    print(&#39;程序异常,%s&#39;%e)</span><br><span class="line"></span><br><span class="line"># 自定义异常信息</span><br><span class="line">try:</span><br><span class="line"> raise NameError(&quot;这个一个自定义的异常信息&quot;)</span><br><span class="line">except Exception as e:</span><br><span class="line">    print(&#39;程序异常,%s&#39;%e)</span><br><span class="line"></span><br><span class="line"># final执行操作</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">  file &#x3D; open(&quot;salaryfield.txt&quot;)</span><br><span class="line">except Exception as e:</span><br><span class="line">    print(&#39;文件操作异常%s&#39;%e)</span><br><span class="line">finally:</span><br><span class="line">    file.close()</span><br><span class="line">    print(&quot;文件关闭&quot;)</span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def functionName(param1,param2,*other,**keywords):</span><br><span class="line">    代码</span><br><span class="line">    return 需要返回的内容</span><br><span class="line"></span><br><span class="line">参数分为3种</span><br><span class="line"></span><br><span class="line">param1,param2属属于必填的普通参数</span><br><span class="line">*other 是可变长参数，可以是0个或者一个</span><br><span class="line">**keywords 是关键字参数，可以通过调用的时候指定参数</span><br></pre></td></tr></table></figure><h2 id="函数变量作用域"><a href="#函数变量作用域" class="headerlink" title="函数变量作用域"></a>函数变量作用域</h2><p>默认函数内定义的变量，作用域只能在函数内</p><p>global关键字可以改变函数作用域为全局</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">## 函数作用域</span><br><span class="line"></span><br><span class="line">var &#x3D; 123</span><br><span class="line">def func1():</span><br><span class="line">    var &#x3D; 456</span><br><span class="line">    print(var)</span><br><span class="line"></span><br><span class="line">func1()</span><br><span class="line">print(var)</span><br><span class="line"></span><br><span class="line">global var2</span><br><span class="line">var2 &#x3D; 123</span><br><span class="line">def func2():</span><br><span class="line">    var2 &#x3D; 456</span><br><span class="line">    print(var2)</span><br><span class="line"></span><br><span class="line">func2()</span><br><span class="line">print(var2)</span><br><span class="line"></span><br><span class="line">var3 &#x3D; 123</span><br><span class="line">def func3():</span><br><span class="line">    global var3;</span><br><span class="line">    var3 &#x3D; 456</span><br><span class="line">    print(var3)</span><br><span class="line"></span><br><span class="line">func3()</span><br><span class="line">print(var3)</span><br><span class="line"></span><br><span class="line">456</span><br><span class="line">123</span><br><span class="line">456</span><br><span class="line">123</span><br><span class="line">456</span><br><span class="line">456</span><br></pre></td></tr></table></figure><h2 id="函数迭代器和生成器"><a href="#函数迭代器和生成器" class="headerlink" title="函数迭代器和生成器"></a>函数迭代器和生成器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 生成器（通过yield实现迭代器功能）</span><br><span class="line">def floatRange(start,stop,step):</span><br><span class="line">    x &#x3D; start</span><br><span class="line">    while x &lt; stop:</span><br><span class="line">        yield x #迭代x</span><br><span class="line">        x +&#x3D; step</span><br><span class="line"></span><br><span class="line">for i in floatRange(10,20,0.5):</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">10</span><br><span class="line">10.5</span><br><span class="line">11.0</span><br><span class="line">11.5</span><br><span class="line">12.0</span><br><span class="line">12.5</span><br><span class="line">13.0</span><br><span class="line">13.5</span><br><span class="line">14.0</span><br><span class="line">14.5</span><br><span class="line">15.0</span><br><span class="line">15.5</span><br><span class="line">16.0</span><br><span class="line">16.5</span><br><span class="line">17.0</span><br><span class="line">17.5</span><br><span class="line">18.0</span><br><span class="line">18.5</span><br><span class="line">19.0</span><br><span class="line">19.5</span><br></pre></td></tr></table></figure><h2 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># lambda表达式</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; def add(x,y):</span><br><span class="line">...     return x+y</span><br><span class="line">... </span><br><span class="line">&gt;&gt;&gt; add(3,5)</span><br><span class="line">8</span><br><span class="line">&gt;&gt;&gt; lambda x,y:x+y</span><br><span class="line">&lt;function &lt;lambda&gt; at 0x7f0b8d3fcb00&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h2 id="内建函数"><a href="#内建函数" class="headerlink" title="内建函数"></a>内建函数</h2><p>filter、map、reduce、zip</p><p>help 函数名可以产看帮助文档</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"># filter函数 过滤</span><br><span class="line"></span><br><span class="line">&gt;&gt; list2 &#x3D; [1,2,3,4,5,6,7]</span><br><span class="line">&gt;&gt;&gt; print(list(filter(lambda x:x&lt;4,list2)))</span><br><span class="line">[1, 2, 3]</span><br><span class="line"></span><br><span class="line"># map函数 对内容依次处理</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; a &#x3D; [1,2,3,4,5,6,7]</span><br><span class="line">&gt;&gt;&gt; print(list(map(lambda x:x+1,a)))</span><br><span class="line">[2, 3, 4, 5, 6, 7, 8]</span><br><span class="line">&gt;&gt;&gt; b &#x3D; [1,2,3,4,5,6,7]</span><br><span class="line">&gt;&gt;&gt; print(list(map(lambda x,y:x+y,a,b)))</span><br><span class="line">[2, 4, 6, 8, 10, 12, 14]</span><br><span class="line"></span><br><span class="line"># reduce函数 </span><br><span class="line">[2, 4, 6, 8, 10, 12, 14]</span><br><span class="line">&gt;&gt;&gt; from functools import reduce</span><br><span class="line">&gt;&gt;&gt; reduce(lambda x,y:x+y,[1,2,3],1)</span><br><span class="line">7</span><br><span class="line">等价于 ((1+1)+2)+3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># zip函数 常用于合并累加等</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; zip((1,2,3),(4,5,6))</span><br><span class="line">&lt;zip object at 0x7f0b8d3e3c30&gt;</span><br><span class="line">&gt;&gt;&gt; for i in zip((1,2,3),(4,5,6)):</span><br><span class="line">...    print(i)</span><br><span class="line">...</span><br><span class="line">(1, 4)</span><br><span class="line">(2, 5)</span><br><span class="line">(3, 6)</span><br><span class="line"></span><br><span class="line">#通过zip实现字段key-value对调</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; dicta &#x3D; &#123;&quot;a&quot;:&quot;aa&quot;,&quot;b&quot;:&quot;bb&quot;&#125;</span><br><span class="line">&gt;&gt;&gt; zip(dicta.values(),dicta.keys())</span><br><span class="line">&lt;zip object at 0x7f0b8d302780&gt;</span><br><span class="line">&gt;&gt;&gt; print(dict(zip(dicta.values(),dicta.keys())))</span><br><span class="line">&#123;&#39;aa&#39;: &#39;a&#39;, &#39;bb&#39;: &#39;b&#39;&#125;</span><br></pre></td></tr></table></figure><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>外部函数变量被内部函数引用，这种形式称之为闭包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># 闭包</span><br><span class="line"></span><br><span class="line"># 计数器</span><br><span class="line">def counter(FIRST&#x3D;0):</span><br><span class="line">    cnt &#x3D; [FIRST]</span><br><span class="line">    def addOne():</span><br><span class="line">        cnt[0] +&#x3D; 1</span><br><span class="line">        return cnt[0]</span><br><span class="line">    return addOne</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">num1 &#x3D; counter()</span><br><span class="line">num5 &#x3D; counter(5)</span><br><span class="line"></span><br><span class="line">print(num1())</span><br><span class="line">print(num1())</span><br><span class="line">print(num1())</span><br><span class="line">print(num5())</span><br><span class="line">print(num5())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td></tr></table></figure><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><p>装饰器用来装饰函数，通过闭包实现。有点java aop的意思</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"># 装饰器的使用</span><br><span class="line"></span><br><span class="line"># 通过闭包实现的装饰器</span><br><span class="line">def wash(func):</span><br><span class="line">    def wrapper(food):</span><br><span class="line">        print(&quot;吃饭前先洗手...&quot;)</span><br><span class="line">        print(&quot;函数调用名%s&quot;%func.__name__)</span><br><span class="line">        func(food)</span><br><span class="line">        print(&quot;吃完饭要漱口...&quot;)</span><br><span class="line"></span><br><span class="line">    return wrapper</span><br><span class="line"></span><br><span class="line">def newWash(args):</span><br><span class="line">    def wash(func):</span><br><span class="line">        def wrapper(food):</span><br><span class="line">            print(&quot;%s前先洗手...&quot;%args)</span><br><span class="line">            func(food)</span><br><span class="line">            print(&quot;吃完%s要漱口...&quot;%args)</span><br><span class="line"></span><br><span class="line">        return wrapper</span><br><span class="line">    return wash;</span><br><span class="line"></span><br><span class="line">def eat():</span><br><span class="line">    print(&quot;开始吃饭&quot;)</span><br><span class="line"></span><br><span class="line"># 没使用装饰器前</span><br><span class="line">print(&quot;吃饭前先洗手...&quot;)</span><br><span class="line">eat()</span><br><span class="line">print(&quot;吃完饭要漱口...&quot;)</span><br><span class="line"></span><br><span class="line">@wash</span><br><span class="line">def eat2(food):</span><br><span class="line">    print(&quot;开始吃%s&quot;%food)</span><br><span class="line"></span><br><span class="line">eat2(&quot;面包&quot;)</span><br><span class="line"></span><br><span class="line">@newWash(&quot;早饭&quot;)</span><br><span class="line">def eat3(food):</span><br><span class="line">    print(&quot;开始吃%s&quot;%food)</span><br><span class="line"></span><br><span class="line">eat3(&quot;烤肉&quot;)</span><br><span class="line"></span><br><span class="line">吃饭前先洗手...</span><br><span class="line">开始吃饭</span><br><span class="line">吃完饭要漱口...</span><br><span class="line">吃饭前先洗手...</span><br><span class="line">开始吃面包</span><br><span class="line">吃完饭要漱口...</span><br><span class="line">早饭前先洗手...</span><br><span class="line">开始吃烤肉</span><br><span class="line">吃完早饭要漱口...</span><br></pre></td></tr></table></figure><h2 id="上下文管理器with"><a href="#上下文管理器with" class="headerlink" title="上下文管理器with"></a>上下文管理器with</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 上下文管理器 with</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    file &#x3D; open(&quot;salaryfield.txt&quot;)</span><br><span class="line">    for line in file.readlines():</span><br><span class="line">        print(line)</span><br><span class="line">except Exception as e:</span><br><span class="line">    print(e)</span><br><span class="line">finally:</span><br><span class="line">    file.close()</span><br><span class="line"></span><br><span class="line"># 可使用with代替上面的写法,不需要自己管理资源</span><br><span class="line"></span><br><span class="line">with open(&quot;salaryfield.txt&quot;) as file:</span><br><span class="line">        for line in file.readlines():</span><br></pre></td></tr></table></figure><h1 id="编码规范包"><a href="#编码规范包" class="headerlink" title="编码规范包"></a>编码规范包</h1><p>python提供了一个编码规范的工具包，可以自行安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip3 install autopep8</span><br></pre></td></tr></table></figure><p>安装完后可以配置pycharm添加到其扩展工具里，就可以在代码中右键使用了。配置方式这里就不写了。</p><h1 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h1><p>class 关键字可以定义一个类,python中定义的类同样可以实现继承、封装、多态的特性</p><h2 id="类的使用示例"><a href="#类的使用示例" class="headerlink" title="类的使用示例"></a>类的使用示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"># 迭代类</span><br><span class="line"></span><br><span class="line">class ProjectIteration():  # 定义一个类</span><br><span class="line">    def __init__(self, name, code):</span><br><span class="line">        self.__name &#x3D; name  # 迭代名称 __开头表示私有属性，不可修改</span><br><span class="line">        self.code &#x3D; code  # 迭代编号</span><br><span class="line"></span><br><span class="line">    def printInfo(self):  # 定义一个方法</span><br><span class="line">        print(&#39;迭代名称：[%s] 迭代编号:[%s]&#39; % (self.__name, self.code))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Bug():</span><br><span class="line">    &#39;定义bug类&#39;</span><br><span class="line">    pass  # pass 暂不实现</span><br><span class="line"></span><br><span class="line">currentPj &#x3D; ProjectIteration(&quot;智能薪酬&quot;, &quot;znxc001&quot;)  # 类的实例化</span><br><span class="line">currentPj.printInfo()</span><br><span class="line"></span><br><span class="line"># 类的继承</span><br><span class="line"># 父类</span><br><span class="line">class Animal():</span><br><span class="line">    def __init__(self,name,age&#x3D;0):</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line">        self.age &#x3D; age</span><br><span class="line">    def run(self):</span><br><span class="line">        print(&quot;跑了一段距离&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 继承父类</span><br><span class="line">class Cat(Animal):</span><br><span class="line">    def __init__(self,name,age):</span><br><span class="line">        # self.name &#x3D; name</span><br><span class="line">        # self.age &#x3D; age</span><br><span class="line">        super().__init__(name,age)</span><br><span class="line">    def run(self):</span><br><span class="line">        print(&quot;小猫跑了一会&quot;) # 可以覆盖父类的方法</span><br><span class="line"></span><br><span class="line">tom &#x3D; Cat(&quot;tom&quot;,18)</span><br><span class="line">tom.run();</span><br><span class="line"></span><br><span class="line">print(&#39;tom 的类型是%s&#39;%type(tom))</span><br><span class="line">print(isinstance(tom,Animal))  # tom 是否是Animal的子类</span><br></pre></td></tr></table></figure><h2 id="自定义类支持with语法"><a href="#自定义类支持with语法" class="headerlink" title="自定义类支持with语法"></a>自定义类支持with语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class TestWith():</span><br><span class="line">    def __enter__(self):</span><br><span class="line">        print(&#39;初始化...&#39;)</span><br><span class="line"></span><br><span class="line">    def __exit__(self, exc_type, exc_val, exc_tb):</span><br><span class="line">        if exc_tb &#x3D;&#x3D; None:</span><br><span class="line">            print(&#39;没有异常&#39;)</span><br><span class="line">        else:</span><br><span class="line">            print(&#39;产生异常%s&#39; % exc_val)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">with TestWith():</span><br><span class="line">    print(&#39;Test is running&#39;)</span><br><span class="line">    raise NameError(&quot;test&quot;)</span><br><span class="line"></span><br><span class="line">输出信息</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&#x2F;home&#x2F;richey&#x2F;PycharmProjects&#x2F;pythonProject&#x2F;tutorial&#x2F;18TestWith.py&quot;, line 14, in &lt;module&gt;</span><br><span class="line">    raise NameError(&quot;test&quot;)</span><br><span class="line">NameError: test</span><br><span class="line">初始化...</span><br><span class="line">Test is running</span><br><span class="line">产生异常test</span><br></pre></td></tr></table></figure><h1 id="多线程编程"><a href="#多线程编程" class="headerlink" title="多线程编程"></a>多线程编程</h1><p>暂无</p><h1 id="标准库"><a href="#标准库" class="headerlink" title="标准库"></a>标准库</h1><p>python的一大优势就是各种库特别丰富</p><p>python官方提供的库称之为标准库,官方网站：<a href="https://docs.python.org/3/library/index.html" target="_blank" rel="noopener">https://docs.python.org/3/library/index.html</a></p><p>python标准库提供类丰富的内容，比如基础的文本操作、日期处理、网络、开发工具和调试工具等等</p><h2 id="正则库re"><a href="#正则库re" class="headerlink" title="正则库re"></a>正则库re</h2><p><a href="https://docs.python.org/3/library/re.html" target="_blank" rel="noopener">https://docs.python.org/3/library/re.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import  re</span><br></pre></td></tr></table></figure><h2 id="日期与时间函数"><a href="#日期与时间函数" class="headerlink" title="日期与时间函数"></a>日期与时间函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">import datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(time.time())</span><br><span class="line">print(time.localtime())</span><br><span class="line">print(time.strftime(&#39;%Y-%m-%d %H-%M-%S&#39;))</span><br><span class="line"></span><br><span class="line"># 1612010800.1010308</span><br><span class="line"># time.struct_time(tm_year&#x3D;2021, tm_mon&#x3D;1, tm_mday&#x3D;30, tm_hour&#x3D;20, tm_min&#x3D;46, tm_sec&#x3D;40, tm_wday&#x3D;5, tm_yday&#x3D;30, tm_isdst&#x3D;0)</span><br><span class="line"># 2021-01-30 20-46-40</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(datetime.datetime.now())</span><br><span class="line">newTime &#x3D; datetime.timedelta(minutes&#x3D;10) # 10分钟的偏移</span><br><span class="line">print(datetime.datetime.now() + newTime) # 10分钟后的时间</span><br><span class="line"></span><br><span class="line"># 2021-01-30 20:50:50.395245</span><br><span class="line"># 2021-01-30 21:00:50.395273</span><br><span class="line"></span><br><span class="line">newDay &#x3D; datetime.datetime(2021,1,30)</span><br><span class="line">print(newDay)</span><br><span class="line">datInterval &#x3D; datetime.timedelta(days&#x3D;10)</span><br><span class="line">print(newDay + datInterval)</span><br><span class="line"></span><br><span class="line"># 2021-01-30 00:00:00</span><br><span class="line"># 2021-02-09 00:00:00</span><br></pre></td></tr></table></figure><h2 id="数学相关"><a href="#数学相关" class="headerlink" title="数学相关"></a>数学相关</h2><h2 id="文本及目录操作"><a href="#文本及目录操作" class="headerlink" title="文本及目录操作"></a>文本及目录操作</h2><p><a href="https://docs.python.org/3/library/os.path.html" target="_blank" rel="noopener">https://docs.python.org/3/library/os.path.html</a></p><p><a href="https://docs.python.org/3/library/pathlib.html" target="_blank" rel="noopener">https://docs.python.org/3/library/pathlib.html</a></p><p>几个简单的demo，详细操作查询文档</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line"></span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">print(os.path.abspath(&quot;.&quot;)) # 根据当前路径获取绝对路径</span><br><span class="line">print(os.path.abspath(&quot;..&quot;))</span><br><span class="line">print(os.path.exists(&quot;&#x2F;home&quot;))</span><br><span class="line">print(os.path.isfile(&quot;&#x2F;home&quot;))</span><br><span class="line">os.path.join(&quot;&#x2F;home&#x2F;richey&#x2F;&quot;,&quot;&#x2F;Download&#x2F;&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from pathlib import Path</span><br><span class="line"></span><br><span class="line"># &gt;&gt;&gt; p &#x3D; Path(&#39;.&#39;)</span><br><span class="line"># &gt;&gt;&gt; [x for x in p.iterdir() if x.is_dir()]</span><br><span class="line"># [PosixPath(&#39;.hg&#39;), PosixPath(&#39;docs&#39;), PosixPath(&#39;dist&#39;),</span><br><span class="line">#  PosixPath(&#39;__pycache__&#39;), PosixPath(&#39;build&#39;)]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据类型和数据结构&quot;&gt;&lt;a href=&quot;#数据类型和数据结构&quot; class=&quot;headerlink&quot; title=&quot;数据类型和数据结构&quot;&gt;&lt;/a&gt;数据类型和数据结构&lt;/h1&gt;&lt;h2 id=&quot;基础数据类型&quot;&gt;&lt;a href=&quot;#基础数据类型&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="Phthon" scheme="http://10000hours.top/categories/Phthon/"/>
    
    
      <category term="Python" scheme="http://10000hours.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>CAP原理</title>
    <link href="http://10000hours.top/2021/01/01/CAP%E5%8E%9F%E7%90%86/"/>
    <id>http://10000hours.top/2021/01/01/CAP%E5%8E%9F%E7%90%86/</id>
    <published>2020-12-31T16:00:00.000Z</published>
    <updated>2021-01-01T07:50:39.373Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CAP定理"><a href="#CAP定理" class="headerlink" title="CAP定理"></a>CAP定理</h1><p><a href="https://en.wikipedia.org/wiki/CAP_theorem" target="_blank" rel="noopener">CAP定理</a></p><p><img src="http://assets.processon.com/chart_image/5c755040e4b0f9fba693aa8f.png" alt="cap定理"></p><p>分布式系统早已成为主流开发架构模式，当今中大型系统开发绕不开分布式.</p><p>相对于单点系统，分布式简单理解就是由多个节点一起组成的系统，由单点变成多点。节点之间的状态如何同步，成为了分布式系统首先要面对的问题，这也是分布式系统最大的难点。</p><p>CAP定理就是这方面的基本定理，自然而然的也是最基础最关键的理论。</p><blockquote><p>CAP原则又称CAP定理，指的是在一个分布式系统中，一致性（Consistency）、可用性（Availability）、分区容错性（Partition tolerance）。CAP 原则指的是，这三个要素最多只能同时实现两点，不可能三者兼顾。 ——百度百科</p></blockquote><ul><li>一致性（C）：在分布式系统中的所有数据备份，在同一时刻是否同样的值。（要做到一致性，节点间的通讯必须是正常的,且在节点没有同步好数据之前，需要锁定写操作和读操作。但是这不符合可用性）</li><li>可用性（A）：每次请求都能获得一个(非错误)响应，但不保证返回的是最新写入的数据。</li><li>分区容忍性（P）：尽管任意数量的消息被节点间的网络丢失（或延迟），系统仍继续运行。</li></ul><p>CAP原则的精髓就是要么AP，要么CP，要么AC，但是不存在CAP。要注意的是，CAP里的一致性与数据库ACID中的一致性，是截然不同的。</p><ul><li>CA (consistency + availability)，这样的系统关注一致性和可用性，它需要非常严格的全体一致的协议，比如“两阶段提交”（2PC）。</li><li>CP (consistency + partition tolerance)，这样的系统关注一致性和分区容忍性。它关注的是系统里大多数人的一致性协议，比如：Paxos 算法（Quorum 类的算法）。</li><li>AP (availability + partition tolerance)，这样的系统关心可用性和分区容忍性。</li></ul><h1 id="参考连接"><a href="#参考连接" class="headerlink" title="参考连接"></a>参考连接</h1><p><a href="http://www.ruanyifeng.com/blog/2018/07/cap.html" target="_blank" rel="noopener">CAP 定理的含义</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CAP定理&quot;&gt;&lt;a href=&quot;#CAP定理&quot; class=&quot;headerlink&quot; title=&quot;CAP定理&quot;&gt;&lt;/a&gt;CAP定理&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/CAP_theorem&quot; target
      
    
    </summary>
    
    
      <category term="基础理论" scheme="http://10000hours.top/categories/%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA/"/>
    
    
      <category term="CAP" scheme="http://10000hours.top/tags/CAP/"/>
    
  </entry>
  
  <entry>
    <title>Kafka高可用配置</title>
    <link href="http://10000hours.top/2020/12/13/Kafka%E9%AB%98%E5%8F%AF%E7%94%A8%E9%85%8D%E7%BD%AE/"/>
    <id>http://10000hours.top/2020/12/13/Kafka%E9%AB%98%E5%8F%AF%E7%94%A8%E9%85%8D%E7%BD%AE/</id>
    <published>2020-12-12T16:00:00.000Z</published>
    <updated>2020-12-13T13:32:06.588Z</updated>
    
    <content type="html"><![CDATA[<h1 id="producer端配置"><a href="#producer端配置" class="headerlink" title="producer端配置"></a>producer端配置</h1><h2 id="使用带有回调通知的-send-方法"><a href="#使用带有回调通知的-send-方法" class="headerlink" title="使用带有回调通知的 send 方法"></a>使用带有回调通知的 send 方法</h2><p>不要使用 producer.send(msg)，而要使用 producer.send(msg, callback)。</p><blockquote><p>设置 acks = all。设置成 all，表明所有副本 Broker 都要接收到消息，该消息才算是“已提交”。</p></blockquote><p> “所有副本”指的是ISR中的所有副本。ISR 中的副本都是与 Leader 同步的副本，相反，不在 ISR 中的追随者副本就被认为是与 Leader 不同步的。ISR列表里跟Leader保持同步的那些Follower都要把消息同步过去，才能认为这条消息是写入成功了。Leader副本天然在ISR中。</p><p> Producer端认为消息已经成功提交的条件是：ISR中所有副本都已经保存了该消息，但producer并没有指定ISR中需要几个副本。这就是min.insync.replicas参数的作用。</p><p> 只有acks=-1(同all)时，min.insync.replicas参宿才有意义。</p><blockquote><p>设置 retries 为一个较大的值。</p></blockquote><p>对应前面提到的 Producer 自动重试。当出现网络的瞬时抖动时，消息发送可能会失败，此时配置了 retries &gt; 0 的 Producer 能够自动重试消息发送，避免消息丢失。</p><h1 id="broker端参数"><a href="#broker端参数" class="headerlink" title="broker端参数"></a>broker端参数</h1><blockquote><p>设置 unclean.leader.election.enable = false。</p></blockquote><p>如果一个 Broker 落后原先的 Leader 太多，那么它一旦成为新的 Leader，必然会造成消息的丢失。故一般都要将该参数设置成 false，即不允许这种情况的发生。</p><blockquote><p>设置 replication.factor &gt;= 3。</p></blockquote><p>最好将消息多保存几份，毕竟目前防止消息丢失的主要机制就是冗余。</p><blockquote><p>设置 min.insync.replicas &gt; 1。</p></blockquote><p>控制的是消息至少要被写入到多少个副本才算是“已提交”。设置成大于 1 可以提升消息持久性。在实际环境中不要使用默认值 1。<br>只有当acks=all时该参数才有意义</p><p>确保 replication.factor &gt; min.insync.replicas。如果两者相等，那么只要有一个副本挂机，整个分区就无法正常工作了。我们不仅要改善消息的持久性，防止数据丢失，还要在不降低可用性的基础上完成。推荐设置成 replication.factor = min.insync.replicas + 1。</p><h1 id="Cosumer端参数"><a href="#Cosumer端参数" class="headerlink" title="Cosumer端参数"></a>Cosumer端参数</h1><blockquote><p>enable.auto.commit，最好把它设置成 false</p></blockquote><p>采用手动提交位移的方式。这对于单 Consumer 多线程处理的场景而言是至关重要的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;producer端配置&quot;&gt;&lt;a href=&quot;#producer端配置&quot; class=&quot;headerlink&quot; title=&quot;producer端配置&quot;&gt;&lt;/a&gt;producer端配置&lt;/h1&gt;&lt;h2 id=&quot;使用带有回调通知的-send-方法&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
    
      <category term="MQ" scheme="http://10000hours.top/categories/MQ/"/>
    
    
      <category term="kafka" scheme="http://10000hours.top/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>Kafka常用校本</title>
    <link href="http://10000hours.top/2020/11/17/Kafka%E5%B8%B8%E7%94%A8%E6%A0%A1%E6%9C%AC/"/>
    <id>http://10000hours.top/2020/11/17/Kafka%E5%B8%B8%E7%94%A8%E6%A0%A1%E6%9C%AC/</id>
    <published>2020-11-16T16:00:00.000Z</published>
    <updated>2020-12-13T09:38:01.402Z</updated>
    
    <content type="html"><![CDATA[<h1 id="kafka-consumer-groups-sh"><a href="#kafka-consumer-groups-sh" class="headerlink" title="kafka-consumer-groups.sh"></a>kafka-consumer-groups.sh</h1><h2 id="查询kafka消息是否被消费"><a href="#查询kafka消息是否被消费" class="headerlink" title="查询kafka消息是否被消费"></a>查询kafka消息是否被消费</h2><p>要知道某条消息是否被消息,首先得知道是查被哪个消费组在消费; 比如 项目配置的kafka的group.id是 my-consumer-group ;<br>那么我们去看看 这个消费者组的消费情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin&#x2F;kafka-consumer-groups.sh --bootstrap-server xxx1:9092,xxx2:9092,xxx3:9092 --describe --group my-consumer-group</span><br></pre></td></tr></table></figure><p>这样查询出来的结果就是 staff-consumer-group消费组消费了哪些Topic; 如果想过滤某个TOPIC;可以加上|grep TOPIC名称 过滤一下；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin&#x2F;kafka-consumer-groups.sh --bootstrap-server xxx1:9092,xxx2:9092,xxx3:9092 --describe --group staff-consumer-group |grep TOPIC名称</span><br></pre></td></tr></table></figure><h2 id="–members-此选项提供使用者组中所有活动成员的列表"><a href="#–members-此选项提供使用者组中所有活动成员的列表" class="headerlink" title="–members   此选项提供使用者组中所有活动成员的列表"></a>–members   此选项提供使用者组中所有活动成员的列表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin&#x2F;kafka-consumer-groups.sh --bootstrap-server xxx1:9092,xxx2:9092,xxx3:9092 --describe --group my-consumer-group  --members</span><br></pre></td></tr></table></figure><h2 id="–verbose-还展示分配给每个成员的分区"><a href="#–verbose-还展示分配给每个成员的分区" class="headerlink" title="–verbose  还展示分配给每个成员的分区"></a>–verbose  还展示分配给每个成员的分区</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin&#x2F;kafka-consumer-groups.sh --bootstrap-server xxx1:9092,xxx2:9092,xxx3:9092 --describe --group my-consumer-group  --members   --verbose</span><br></pre></td></tr></table></figure><h2 id="–state-提供有用的组级别信息"><a href="#–state-提供有用的组级别信息" class="headerlink" title="–state  提供有用的组级别信息"></a>–state  提供有用的组级别信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin&#x2F;kafka-consumer-groups.sh --bootstrap-server xxx1:9092,xxx2:9092,xxx3:9092 --describe --group my-consumer-group  --state</span><br></pre></td></tr></table></figure><h2 id="–delete-手动删除一个或多个消费者组"><a href="#–delete-手动删除一个或多个消费者组" class="headerlink" title="–delete   手动删除一个或多个消费者组"></a>–delete   手动删除一个或多个消费者组</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin&#x2F;kafka-consumer-groups.sh --bootstrap-server xxx1:9092,xxx2:9092,xxx3:9092  --delete  --group my-consumer-group1  --group my-consumer-group2</span><br></pre></td></tr></table></figure><h2 id="–reset-offsets-重置消费者组的offset"><a href="#–reset-offsets-重置消费者组的offset" class="headerlink" title="–reset-offsets  重置消费者组的offset"></a>–reset-offsets  重置消费者组的offset</h2><blockquote><p>如果使用是老的高级消费者并在zookeeper存储消费者组的元数据（即。offsets.storage=zookeeper），则通过–zookeeper，而不是bootstrap-server</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin&#x2F;kafka-consumer-groups.sh --zookeeper localhost:2181 --list</span><br></pre></td></tr></table></figure><h1 id="kafka-topics-sh"><a href="#kafka-topics-sh" class="headerlink" title="kafka-topics.sh"></a>kafka-topics.sh</h1><p>使用kafka-topics.sh工具 可以执行主题的大部分操作（配置变更部份被移动至kafka-config.sh工具中）</p><h2 id="创建主题"><a href="#创建主题" class="headerlink" title="创建主题"></a>创建主题</h2><p>在集群中创建一个主题需要3个必填参数：主题名字、复制系数、分区数量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-topics.sh --zookeeper &lt;zookeeper connect&gt; --create --topic &lt;string&gt; --replication-factor &lt;integer&gt; --partitions &lt;integer&gt; --if-not-exists</span><br></pre></td></tr></table></figure><h2 id="增加分区"><a href="#增加分区" class="headerlink" title="增加分区"></a>增加分区</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-topics.sh --zookeeper &lt;zookeeper connect&gt; --alter --topic &lt;string&gt; --partitions &lt;integer&gt;</span><br></pre></td></tr></table></figure><h2 id="减少分区数量"><a href="#减少分区数量" class="headerlink" title="减少分区数量"></a>减少分区数量</h2><p>无法减少分区数量。因为如果删除了分区，分区里的数据也会一并被删除。也无法将这些分区的数据分配给其它分区。<br>如果一定要减少分区数量，就只能删除整个主题，然后重新创建。</p><h2 id="删除主题"><a href="#删除主题" class="headerlink" title="删除主题"></a>删除主题</h2><ul><li>broker的delete.topic.enable参数必须被设置成true,否则删除主题的请求会被忽略。</li><li>删除主题会丢失主题里的所有数据，这是一个不可逆的操作。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-topics.sh --zookeeper  &lt;zookeeper connect&gt; --delete --topic &lt;string&gt;</span><br></pre></td></tr></table></figure><h2 id="列出集群里的所有主题"><a href="#列出集群里的所有主题" class="headerlink" title="列出集群里的所有主题"></a>列出集群里的所有主题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-topics.sh --zookeeper   &lt;zookeeper connect&gt; --list</span><br></pre></td></tr></table></figure><h2 id="列出主题的详细信息"><a href="#列出主题的详细信息" class="headerlink" title="列出主题的详细信息"></a>列出主题的详细信息</h2><p>薪资包含主题分区数量、主题的覆盖配置、以及每个分区的副本清单</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kafka-topics.sh --zookeeper   &lt;zookeeper connect&gt; --describe </span><br><span class="line"># 加上--topic就可以列出指定主题的详细信息</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;kafka-consumer-groups-sh&quot;&gt;&lt;a href=&quot;#kafka-consumer-groups-sh&quot; class=&quot;headerlink&quot; title=&quot;kafka-consumer-groups.sh&quot;&gt;&lt;/a&gt;kafka-consumer
      
    
    </summary>
    
    
      <category term="MQ" scheme="http://10000hours.top/categories/MQ/"/>
    
    
      <category term="kafka" scheme="http://10000hours.top/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>Linux expect spawn用法</title>
    <link href="http://10000hours.top/2020/10/31/Linux%20expect%20spawn%E7%94%A8%E6%B3%95/"/>
    <id>http://10000hours.top/2020/10/31/Linux%20expect%20spawn%E7%94%A8%E6%B3%95/</id>
    <published>2020-10-30T16:00:00.000Z</published>
    <updated>2020-10-31T07:42:24.808Z</updated>
    
    <content type="html"><![CDATA[<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>通过脚本简化人机交互过程，比如登录远程服务器。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>使用expect + 其内部命令 spawn 可以实现类似的自动化需求。</p><ul><li>安装expect</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dnf install expect</span><br></pre></td></tr></table></figure><ul><li>案例1</li></ul><p>登录到远程服务器，并暂时获取root权限（sudo su）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;expect</span><br><span class="line">set timeout 30</span><br><span class="line">spawn ssh ubuntu@192.168.1.131</span><br><span class="line">expect &quot;*password:&quot;</span><br><span class="line">send &quot;123456\r&quot;</span><br><span class="line">expect &quot;$*&quot;</span><br><span class="line">send &quot;sudo su\r&quot;</span><br><span class="line">expect &quot;*password*&quot;</span><br><span class="line">send &quot;123456\r&quot;</span><br><span class="line">expect &quot;*#&quot;</span><br><span class="line">interact</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h1&gt;&lt;p&gt;通过脚本简化人机交互过程，比如登录远程服务器。&lt;/p&gt;
&lt;h1 id=&quot;解决方案&quot;&gt;&lt;a href=&quot;#解决方案&quot; class=&quot;heade
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://10000hours.top/categories/Linux/"/>
    
    
      <category term="脚本" scheme="http://10000hours.top/tags/%E8%84%9A%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>K8s基本概念</title>
    <link href="http://10000hours.top/2020/10/17/K8s%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <id>http://10000hours.top/2020/10/17/K8s%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</id>
    <published>2020-10-16T16:00:00.000Z</published>
    <updated>2021-02-14T08:08:03.212Z</updated>
    
    <content type="html"><![CDATA[<h1 id="kubectl"><a href="#kubectl" class="headerlink" title="kubectl"></a>kubectl</h1><p><a href="https://kubernetes.io/zh/docs/reference/kubectl/overview/" target="_blank" rel="noopener">kubectl 是kubernetes命令行工具</a></p><p>如果我们打算在笔记本电脑（本地）上运行 Kubernetes 集群，则需要首先安装 minikube 等工具.</p><p><a href="https://kubernetes.io/zh/docs/tasks/" target="_blank" rel="noopener">文档</a></p><h1 id="k8s-命令"><a href="#k8s-命令" class="headerlink" title="k8s 命令"></a>k8s 命令</h1><ul><li>获取运行的默认集群名称空间的所有Pod的列表</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods</span><br></pre></td></tr></table></figure><ul><li>查看在pod内运行的容器的输出</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl logs [pod name]</span><br></pre></td></tr></table></figure><ul><li>查看服务详细信息</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl describe svc some-app</span><br></pre></td></tr></table></figure><ul><li>集群配置上下文</li></ul><blockquote><p>Kubernetes使用配置文件config来查找连接到集群所需的信息。该文件位于主机主文件夹的：~/.kube/config。上下文是该配置文件中的一个元素，它包含对集群，名称空间和用户的引用。如果要访问或运行单个群集，则配置文件中将只有一个上下文。我们可以定义多个指向不同集群的上下文。</p></blockquote><p>使用kubectl config命令可以查看这些上下文并在它们之间切换。</p><h1 id="k8s常用概念"><a href="#k8s常用概念" class="headerlink" title="k8s常用概念"></a>k8s常用概念</h1><ul><li>k8s集群</li></ul><p>K8S集群是运行容器化应用程序所需的一组物理或虚拟机以及其他基础结构资源。</p><ul><li>节点</li></ul><p>K8S集群中的每台机器都称为一个节点。每个K8S集群中有两种类型的节点：</p><p>主节点：承载Kubernetes控制平面并管理集群</p><p>工作节点：运行容器化应用程序</p><ul><li>Pods</li></ul><p>Pod是Kubernetes中最常见的资源之一。它们是一个或多个容器的集合。Pod中的容器共享网络和存储，同一Pod中的任何容器都可以通过localhost进行相互通信。</p><p>Pod创建后，会被分配一个唯一的IP地址。pod内的容器可以监听不同的端口。要访问容器，可以使用容器的IP地址。</p><p>但是，如果想在容器之间进行交互，可以使用localhost:port</p><p>如果Pod重启，就会分配另一个IP地址。因此，不能依赖于IP地址。通过IP直接与Pod进行通讯可能会有问题。</p><p>可以与Pod进行通信的抽象称为K8S服务。K8S服务为我们提供稳定的IP地址和DNS名称</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;kubectl&quot;&gt;&lt;a href=&quot;#kubectl&quot; class=&quot;headerlink&quot; title=&quot;kubectl&quot;&gt;&lt;/a&gt;kubectl&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/zh/docs/reference/k
      
    
    </summary>
    
    
      <category term="容器" scheme="http://10000hours.top/categories/%E5%AE%B9%E5%99%A8/"/>
    
    
      <category term="K8s" scheme="http://10000hours.top/tags/K8s/"/>
    
  </entry>
  
  <entry>
    <title>Linux开启ssh端口服务（22）</title>
    <link href="http://10000hours.top/2020/08/31/Linux%E5%BC%80%E5%90%AFssh%E7%AB%AF%E5%8F%A3%E6%9C%8D%E5%8A%A1%EF%BC%8822%EF%BC%89/"/>
    <id>http://10000hours.top/2020/08/31/Linux%E5%BC%80%E5%90%AFssh%E7%AB%AF%E5%8F%A3%E6%9C%8D%E5%8A%A1%EF%BC%8822%EF%BC%89/</id>
    <published>2020-08-30T16:00:00.000Z</published>
    <updated>2020-10-31T07:17:57.232Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OpenSSH"><a href="#OpenSSH" class="headerlink" title="OpenSSH"></a>OpenSSH</h1><p>OpenSSH是SSH(Secure SHell)协议的免费开源实现。SSH协议族可以用来进行远程控制。</p><p>OpenSSH服务默认端口是22，默认配置路径是/etc/ssh/sshd_config</p><h1 id="安装OpenSSH"><a href="#安装OpenSSH" class="headerlink" title="安装OpenSSH"></a>安装OpenSSH</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo dnf install ssh</span><br><span class="line">或</span><br><span class="line">apt-get install ssh</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;OpenSSH&quot;&gt;&lt;a href=&quot;#OpenSSH&quot; class=&quot;headerlink&quot; title=&quot;OpenSSH&quot;&gt;&lt;/a&gt;OpenSSH&lt;/h1&gt;&lt;p&gt;OpenSSH是SSH(Secure SHell)协议的免费开源实现。SSH协议族可以用来进行远程控
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://10000hours.top/categories/Linux/"/>
    
    
      <category term="ssh" scheme="http://10000hours.top/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>分布式锁</title>
    <link href="http://10000hours.top/2020/08/21/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    <id>http://10000hours.top/2020/08/21/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</id>
    <published>2020-08-20T16:00:00.000Z</published>
    <updated>2021-01-01T10:24:14.568Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="分布式系统" scheme="http://10000hours.top/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="分布式锁" scheme="http://10000hours.top/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>Mysql（15）-Mysql位（bit）数据类型实验</title>
    <link href="http://10000hours.top/2020/06/07/Mysql%EF%BC%8815%EF%BC%89-Mysql%E4%BD%8D%EF%BC%88bit%EF%BC%89%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%AE%9E%E9%AA%8C/"/>
    <id>http://10000hours.top/2020/06/07/Mysql%EF%BC%8815%EF%BC%89-Mysql%E4%BD%8D%EF%BC%88bit%EF%BC%89%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%AE%9E%E9%AA%8C/</id>
    <published>2020-06-06T16:00:00.000Z</published>
    <updated>2020-07-23T16:50:46.358Z</updated>
    
    <content type="html"><![CDATA[<h1 id="bit类型字段的查询展示和计算"><a href="#bit类型字段的查询展示和计算" class="headerlink" title="bit类型字段的查询展示和计算"></a>bit类型字段的查询展示和计算</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE DATABASE richey_test CHARACTER SET utf8mb4 DEFAULT COLLATE utf8mb4_general_ci;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; use richey_test;</span><br><span class="line"></span><br><span class="line">mysql&gt; CREATE TABLE bittest(a bit(8));</span><br><span class="line"></span><br><span class="line">mysql&gt; INSERT INTO bittest VALUES(b&#39;00111001&#39;);</span><br><span class="line"></span><br><span class="line">mysql&gt; select a,a + 0 from bittest;</span><br><span class="line">+------+-------+</span><br><span class="line">| a    | a + 0 |</span><br><span class="line">+------+-------+</span><br><span class="line">| 9    |    57 |</span><br><span class="line">+------+-------+</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT a+b&#39;1&#39; from bittest;</span><br><span class="line">+--------+</span><br><span class="line">| a+b&#39;1&#39; |</span><br><span class="line">+--------+</span><br><span class="line">|     58 |</span><br><span class="line">+--------+</span><br><span class="line">1 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select a &#x3D; 9 from bittest;</span><br><span class="line">+------+</span><br><span class="line">| a &#x3D;9 |</span><br><span class="line">+------+</span><br><span class="line">|    0 |</span><br><span class="line">+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select a&#x3D;&#39;9&#39; from bittest;</span><br><span class="line">+-------+</span><br><span class="line">| a&#x3D;&#39;9&#39; |</span><br><span class="line">+-------+</span><br><span class="line">|     0 |</span><br><span class="line">+-------+</span><br><span class="line">1 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; select a &#x3D;57 from bittest;</span><br><span class="line">+-------+</span><br><span class="line">| a &#x3D;57 |</span><br><span class="line">+-------+</span><br><span class="line">|     1 |</span><br><span class="line">+-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select a&#x3D;&#39;57&#39; from bittest;</span><br><span class="line">+--------+</span><br><span class="line">| a&#x3D;&#39;57&#39; |</span><br><span class="line">+--------+</span><br><span class="line">|      1 |</span><br><span class="line">+--------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT a&#x3D;b&#39;00111001&#39; from bittest;</span><br><span class="line">+---------------+</span><br><span class="line">| a&#x3D;b&#39;00111001&#39; |</span><br><span class="line">+---------------+</span><br><span class="line">|             1 |</span><br><span class="line">+---------------+</span><br><span class="line">1 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select min(a) from bittest;</span><br><span class="line">+--------+</span><br><span class="line">| min(a) |</span><br><span class="line">+--------+</span><br><span class="line">| 57     |</span><br><span class="line">+--------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><blockquote><p>00111001 二进制值是57</p></blockquote><blockquote><p>ASCII码表中二进制00111001（转换成十进制为57）对应的字符是9</p></blockquote><blockquote><p>ASCII 码使用指定的7 位或8 位二进制数组合来表示128 或256 种可能的字符。</p></blockquote><p>结论：</p><ul><li>当检索位类型的列时（例如BIT(8)），得到的结果是一个字符串，该字符串的值是数据库里存的二进制值对应的ASCII码字符（例：ASCII码00111001对应的字符是9）；</li><li>当BIT类型的值参与计算或比较时，使用的是二进制值对应的十进制数值进行计算或比较；</li></ul><blockquote><p>Comparison operations result in a value of 1 (TRUE), 0 (FALSE), or NULL. These operations work for both numbers and strings. Strings are automatically converted to numbers and numbers to strings as necessary.</p></blockquote><p>简言之，mysql中是将bit类型当字符串使用的，字符串参与计算或者比对的时候会先转换成数值，相应的bit类型参与计算或比较时会先转换成10进制的数值。</p><blockquote><p>InnoDB为每个bit列使用一个足够存储的最小整数类型来存放，所以并不能节省存储空间</p></blockquote><h1 id="根据bit类型字段查询（无索引）"><a href="#根据bit类型字段查询（无索引）" class="headerlink" title="根据bit类型字段查询（无索引）"></a>根据bit类型字段查询（无索引）</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; select * from bittest where a &#x3D; 9;</span><br><span class="line">Empty set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from bittest where a &#x3D; 57;</span><br><span class="line">+------+</span><br><span class="line">| a    |</span><br><span class="line">+------+</span><br><span class="line">| 9    |</span><br><span class="line">+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from bittest where a &#x3D; &#39;9&#39;;</span><br><span class="line">Empty set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from bittest where a &#x3D; &#39;57&#39;;</span><br><span class="line">+------+</span><br><span class="line">| a    |</span><br><span class="line">+------+</span><br><span class="line">| 9    |</span><br><span class="line">+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from bittest where a&#x3D;b&#39;00111001&#39;;</span><br><span class="line">+------+</span><br><span class="line">| a    |</span><br><span class="line">+------+</span><br><span class="line">| 9    |</span><br><span class="line">+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>结论：没有索引的情况下，bit类型参与比较时都是转换成二进制值对应的数值进行比较，而非二进制值对应的ASCII码所控制的字符串。</p><h1 id="根据bit类型字段查询（有索引）"><a href="#根据bit类型字段查询（有索引）" class="headerlink" title="根据bit类型字段查询（有索引）"></a>根据bit类型字段查询（有索引）</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">mysql&gt; alter table bittest add index idx_bit_a (a);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; INSERT INTO bittest VALUES(b&#39;01111000&#39;);</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; INSERT INTO bittest VALUES(b&#39;01111001&#39;);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; INSERT INTO bittest VALUES(b&#39;01111010&#39;);</span><br><span class="line">Query OK, 1 row affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; INSERT INTO bittest VALUES(b&#39;01111011&#39;);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; INSERT INTO bittest VALUES(b&#39;01111100&#39;);</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; select * from bittest;</span><br><span class="line">+------+</span><br><span class="line">| a    |</span><br><span class="line">+------+</span><br><span class="line">| 9    |</span><br><span class="line">| x    |</span><br><span class="line">| y    |</span><br><span class="line">| z    |</span><br><span class="line">| &#123;    |</span><br><span class="line">| |    |</span><br><span class="line">+------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; explain select * from bittest where a &#x3D; 9;</span><br><span class="line">+----+-------------+---------+------------+------+---------------+-----------+---------+-------+------+----------+-------------+</span><br><span class="line">| id | select_type | table   | partitions | type | possible_keys | key       | key_len | ref   | rows | filtered | Extra       |</span><br><span class="line">+----+-------------+---------+------------+------+---------------+-----------+---------+-------+------+----------+-------------+</span><br><span class="line">|  1 | SIMPLE      | bittest | NULL       | ref  | idx_bit_a     | idx_bit_a | 2       | const |    1 |   100.00 | Using index |</span><br><span class="line">+----+-------------+---------+------------+------+---------------+-----------+---------+-------+------+----------+-------------+</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from bittest where a &#x3D; 9;</span><br><span class="line">Empty set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; explain select * from bittest where a &#x3D; &#39;9&#39;;</span><br><span class="line">+----+-------------+---------+------------+------+---------------+-----------+---------+-------+------+----------+-------------+</span><br><span class="line">| id | select_type | table   | partitions | type | possible_keys | key       | key_len | ref   | rows | filtered | Extra       |</span><br><span class="line">+----+-------------+---------+------------+------+---------------+-----------+---------+-------+------+----------+-------------+</span><br><span class="line">|  1 | SIMPLE      | bittest | NULL       | ref  | idx_bit_a     | idx_bit_a | 2       | const |    1 |   100.00 | Using index |</span><br><span class="line">+----+-------------+---------+------------+------+---------------+-----------+---------+-------+------+----------+-------------+</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;  select * from bittest where a &#x3D; &#39;9&#39;;</span><br><span class="line">+------+</span><br><span class="line">| a    |</span><br><span class="line">+------+</span><br><span class="line">| 9    |</span><br><span class="line">+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;  select * from bittest where a &#x3D; &#39;57&#39;;</span><br><span class="line">Empty set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; explain  select * from bittest where a &#x3D; &#39;57&#39;;</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+--------------------------------+</span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra                          |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+--------------------------------+</span><br><span class="line">|  1 | SIMPLE      | NULL  | NULL       | NULL | NULL          | NULL | NULL    | NULL | NULL |     NULL | no matching row in const table |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+--------------------------------+</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;  select * from bittest where a &#x3D; 57;</span><br><span class="line">+------+</span><br><span class="line">| a    |</span><br><span class="line">+------+</span><br><span class="line">| 9    |</span><br><span class="line">+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; explain  select * from bittest where a &#x3D; 57;</span><br><span class="line">+----+-------------+---------+------------+------+---------------+-----------+---------+-------+------+----------+-------------+</span><br><span class="line">| id | select_type | table   | partitions | type | possible_keys | key       | key_len | ref   | rows | filtered | Extra       |</span><br><span class="line">+----+-------------+---------+------------+------+---------------+-----------+---------+-------+------+----------+-------------+</span><br><span class="line">|  1 | SIMPLE      | bittest | NULL       | ref  | idx_bit_a     | idx_bit_a | 2       | const |    1 |   100.00 | Using index |</span><br><span class="line">+----+-------------+---------+------------+------+---------------+-----------+---------+-------+------+----------+-------------+</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from bittest where a &#x3D; b&#39;00111001&#39;;</span><br><span class="line">+------+</span><br><span class="line">| a    |</span><br><span class="line">+------+</span><br><span class="line">| 9    |</span><br><span class="line">+------+</span><br><span class="line">1 row in set (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; explain select * from bittest where a &#x3D; b&#39;00111001&#39;;</span><br><span class="line">+----+-------------+---------+------------+------+---------------+-----------+---------+-------+------+----------+-------------+</span><br><span class="line">| id | select_type | table   | partitions | type | possible_keys | key       | key_len | ref   | rows | filtered | Extra       |</span><br><span class="line">+----+-------------+---------+------------+------+---------------+-----------+---------+-------+------+----------+-------------+</span><br><span class="line">|  1 | SIMPLE      | bittest | NULL       | ref  | idx_bit_a     | idx_bit_a | 2       | const |    1 |   100.00 | Using index |</span><br><span class="line">+----+-------------+---------+------------+------+---------------+-----------+---------+-------+------+----------+-------------+</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure><p>结论：<br>走bit列索引的情况下，索引值使用ASCII码对应的字符串值，或ASCII码对应的十进制数值进行比对，（这与不走索引的规则是不同的）。</p><h1 id="使用bit-1-标识boolean类型"><a href="#使用bit-1-标识boolean类型" class="headerlink" title="使用bit(1)标识boolean类型"></a>使用bit(1)标识boolean类型</h1><h2 id="无索引的情况"><a href="#无索引的情况" class="headerlink" title="无索引的情况"></a>无索引的情况</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; alter table bittest add column bit_boolean bit(1) ;</span><br><span class="line">Query OK, 0 rows affected (0.08 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; desc bittest;</span><br><span class="line">+-------------+--------+------+-----+---------+-------+</span><br><span class="line">| Field       | Type   | Null | Key | Default | Extra |</span><br><span class="line">+-------------+--------+------+-----+---------+-------+</span><br><span class="line">| a           | bit(8) | YES  | MUL | NULL    |       |</span><br><span class="line">| bit_boolean | bit(1) | YES  |     | NULL    |       |</span><br><span class="line">+-------------+--------+------+-----+---------+-------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into bittest(bit_boolean) values(b&#39;1&#39;);</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into bittest(bit_boolean) values(b&#39;0&#39;);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; select bin(bit_boolean) from bittest where bit_boolean &#x3D; &#39;1&#39;;</span><br><span class="line">+------------------+</span><br><span class="line">| bin(bit_boolean) |</span><br><span class="line">+------------------+</span><br><span class="line">| 1                |</span><br><span class="line">+------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select bin(bit_boolean) from bittest where bit_boolean &#x3D; 1;</span><br><span class="line">+------------------+</span><br><span class="line">| bin(bit_boolean) |</span><br><span class="line">+------------------+</span><br><span class="line">| 1                |</span><br><span class="line">+------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select bin(bit_boolean) from bittest where bit_boolean &#x3D; true;</span><br><span class="line">+------------------+</span><br><span class="line">| bin(bit_boolean) |</span><br><span class="line">+------------------+</span><br><span class="line">| 1                |</span><br><span class="line">+------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line">mysql&gt; select bin(bit_boolean) from bittest where bit_boolean &#x3D; b&#39;1&#39;;</span><br><span class="line">+------------------+</span><br><span class="line">| bin(bit_boolean) |</span><br><span class="line">+------------------+</span><br><span class="line">| 1                |</span><br><span class="line">+------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>没有索引的情况下使用1或者’1’或者true或者b’1’都可以检索出结果</p><h2 id="有索引的情况"><a href="#有索引的情况" class="headerlink" title="有索引的情况"></a>有索引的情况</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; alter table bittest add index idx_bit_bool (bit_boolean);</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; select bin(bit_boolean) from bittest where bit_boolean &#x3D; 1;</span><br><span class="line">+------------------+</span><br><span class="line">| bin(bit_boolean) |</span><br><span class="line">+------------------+</span><br><span class="line">| 1                |</span><br><span class="line">+------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; explain select bin(bit_boolean) from bittest where bit_boolean &#x3D; 1;</span><br><span class="line">+----+-------------+---------+------------+------+---------------+--------------+---------+-------+------+----------+-------------+</span><br><span class="line">| id | select_type | table   | partitions | type | possible_keys | key          | key_len | ref   | rows | filtered | Extra       |</span><br><span class="line">+----+-------------+---------+------------+------+---------------+--------------+---------+-------+------+----------+-------------+</span><br><span class="line">|  1 | SIMPLE      | bittest | NULL       | ref  | idx_bit_bool  | idx_bit_bool | 2       | const |    1 |   100.00 | Using index |</span><br><span class="line">+----+-------------+---------+------------+------+---------------+--------------+---------+-------+------+----------+-------------+</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; select bin(bit_boolean) from bittest where bit_boolean &#x3D; &#39;1&#39;;</span><br><span class="line">Empty set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; explain select bin(bit_boolean) from bittest where bit_boolean &#x3D; &#39;1&#39;;</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+--------------------------------+</span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra                          |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+--------------------------------+</span><br><span class="line">|  1 | SIMPLE      | NULL  | NULL       | NULL | NULL          | NULL | NULL    | NULL | NULL |     NULL | no matching row in const table |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+--------------------------------+</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select bin(bit_boolean) from bittest where bit_boolean &#x3D; true;</span><br><span class="line">+------------------+</span><br><span class="line">| bin(bit_boolean) |</span><br><span class="line">+------------------+</span><br><span class="line">| 1                |</span><br><span class="line">+------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; explain select bin(bit_boolean) from bittest where bit_boolean &#x3D; true;</span><br><span class="line">+----+-------------+---------+------------+------+---------------+--------------+---------+-------+------+----------+-------------+</span><br><span class="line">| id | select_type | table   | partitions | type | possible_keys | key          | key_len | ref   | rows | filtered | Extra       |</span><br><span class="line">+----+-------------+---------+------------+------+---------------+--------------+---------+-------+------+----------+-------------+</span><br><span class="line">|  1 | SIMPLE      | bittest | NULL       | ref  | idx_bit_bool  | idx_bit_bool | 2       | const |    1 |   100.00 | Using index |</span><br><span class="line">+----+-------------+---------+------------+------+---------------+--------------+---------+-------+------+----------+-------------+</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;  select bin(bit_boolean) from bittest where bit_boolean &#x3D; b&#39;1&#39;;</span><br><span class="line">+------------------+</span><br><span class="line">| bin(bit_boolean) |</span><br><span class="line">+------------------+</span><br><span class="line">| 1                |</span><br><span class="line">+------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; explain select bin(bit_boolean) from bittest where bit_boolean &#x3D; b&#39;1&#39;;</span><br><span class="line">+----+-------------+---------+------------+------+---------------+--------------+---------+-------+------+----------+-------------+</span><br><span class="line">| id | select_type | table   | partitions | type | possible_keys | key          | key_len | ref   | rows | filtered | Extra       |</span><br><span class="line">+----+-------------+---------+------------+------+---------------+--------------+---------+-------+------+----------+-------------+</span><br><span class="line">|  1 | SIMPLE      | bittest | NULL       | ref  | idx_bit_bool  | idx_bit_bool | 2       | const |    1 |   100.00 | Using index |</span><br><span class="line">+----+-------------+---------+------------+------+---------------+--------------+---------+-------+------+----------+-------------+</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure><p>有索引的情况下，只能根据=1（二进制对应的十进制数值）或=true(实际也会转换成10进制1)进行索引。</p><h1 id="Mysql本身没有boolean类型"><a href="#Mysql本身没有boolean类型" class="headerlink" title="Mysql本身没有boolean类型"></a>Mysql本身没有boolean类型</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">mysql&gt; create table boolean_test</span><br><span class="line">    -&gt; (</span><br><span class="line">    -&gt;    id int primary key,</span><br><span class="line">    -&gt;    bl boolean</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; desc boolean_test;</span><br><span class="line">+-------+------------+------+-----+---------+-------+</span><br><span class="line">| Field | Type       | Null | Key | Default | Extra |</span><br><span class="line">+-------+------------+------+-----+---------+-------+</span><br><span class="line">| id    | int(11)    | NO   | PRI | NULL    |       |</span><br><span class="line">| bl    | tinyint(1) | YES  |     | NULL    |       |</span><br><span class="line">+-------+------------+------+-----+---------+-------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>我们创建一个boolean类型的列是可以成功的，但是实际上这列的数据格式是tinyint(1)</p><blockquote><p>MySQL BOOLEAN数据类型简介MySQL没有内置的布尔类型。 但是它使用TINYINT(1)。 为了更方便，MySQL提供BOOLEAN或BOOL作为TINYINT(1)的同义词</p></blockquote><blockquote><p>0被认为是false，非零值被认为是true。 要使用布尔文本，可以使用常量TRUE和FALSE来分别计算为1和0。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">mysql&gt; SELECT true, false, TRUE, FALSE, True, False;</span><br><span class="line">+------+-------+------+-------+------+-------+</span><br><span class="line">| TRUE | FALSE | TRUE | FALSE | TRUE | FALSE |</span><br><span class="line">+------+-------+------+-------+------+-------+</span><br><span class="line">|    1 |     0 |    1 |     0 |    1 |     0 |</span><br><span class="line">+------+-------+------+-------+------+-------+</span><br><span class="line">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure><p>使用 = true 或者 = false时，跟使用 = 1 或者 = 0是一样的</p><h2 id="true"><a href="#true" class="headerlink" title="= true"></a>= true</h2><p>true在mysql中就是1，= true同 = 1是一样的</p><h2 id="false"><a href="#false" class="headerlink" title="= false"></a>= false</h2><p>false 在mysql中就是0，=false同 =0是一样的</p><h2 id="is-false"><a href="#is-false" class="headerlink" title="is false"></a>is false</h2><p>检索出 0，等同于 = 0</p><h2 id="is-true"><a href="#is-true" class="headerlink" title="is true"></a>is true</h2><p>检索非0，等同于 != 0</p><p>注意字符串同数值比较时会转换成数值，转换有特殊规则，如‘’123abc’ 在等于号比较时转换成的数值为123</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">mysql&gt; select 0 is false, &#39;0&#39; is false ,&#39;123&#39; is false;</span><br><span class="line">+------------+--------------+----------------+</span><br><span class="line">| 0 is false | &#39;0&#39; is false | &#39;123&#39; is false |</span><br><span class="line">+------------+--------------+----------------+</span><br><span class="line">|          1 |            1 |              0 |</span><br><span class="line">+------------+--------------+----------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; select 1 is true,2 is true ,&#39;1&#39; is true,&#39;123&#39; is true,-1 is true;</span><br><span class="line">+-----------+-----------+-------------+---------------+------------+</span><br><span class="line">| 1 is true | 2 is true | &#39;1&#39; is true | &#39;123&#39; is true | -1 is true |</span><br><span class="line">+-----------+-----------+-------------+---------------+------------+</span><br><span class="line">|         1 |         1 |           1 |             1 |          1 |</span><br><span class="line">+-----------+-----------+-------------+---------------+------------+</span><br><span class="line"></span><br><span class="line">mysql&gt; select 1 !&#x3D; 0,2 !&#x3D;0 ,&#39;1&#39; !&#x3D; 0,&#39;123&#39; !&#x3D; 0,-1 !&#x3D; 0;</span><br><span class="line">+--------+-------+----------+------------+---------+</span><br><span class="line">| 1 !&#x3D; 0 | 2 !&#x3D;0 | &#39;1&#39; !&#x3D; 0 | &#39;123&#39; !&#x3D; 0 | -1 !&#x3D; 0 |</span><br><span class="line">+--------+-------+----------+------------+---------+</span><br><span class="line">|      1 |     1 |        1 |          1 |       1 |</span><br><span class="line">+--------+-------+----------+------------+---------+</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>综上，在mysql中不要使用bit(1)表示boolean类型，实际上不建议在任何场景使用bit类型的字段。查询会造成不必要的困扰和麻烦，令人难以理解。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;bit类型字段的查询展示和计算&quot;&gt;&lt;a href=&quot;#bit类型字段的查询展示和计算&quot; class=&quot;headerlink&quot; title=&quot;bit类型字段的查询展示和计算&quot;&gt;&lt;/a&gt;bit类型字段的查询展示和计算&lt;/h1&gt;&lt;figure class=&quot;highli
      
    
    </summary>
    
    
      <category term="DB" scheme="http://10000hours.top/categories/DB/"/>
    
    
      <category term="Mysql" scheme="http://10000hours.top/tags/Mysql/"/>
    
      <category term="索引" scheme="http://10000hours.top/tags/%E7%B4%A2%E5%BC%95/"/>
    
  </entry>
  
  <entry>
    <title>Mysql（14）-Mysql位（bit）数据类型</title>
    <link href="http://10000hours.top/2020/06/07/Mysql%EF%BC%8814%EF%BC%89-Mysql%E4%BD%8D%EF%BC%88bit%EF%BC%89%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://10000hours.top/2020/06/07/Mysql%EF%BC%8814%EF%BC%89-Mysql%E4%BD%8D%EF%BC%88bit%EF%BC%89%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2020-06-06T16:00:00.000Z</published>
    <updated>2020-07-11T05:31:13.556Z</updated>
    
    <content type="html"><![CDATA[<p>最近在线上碰到了一个诡异的问题，线上有个业务模块突然查询不出数据。问题反馈的时候是上午，前一天晚上进行了上线操作，基本可以判断跟上线有关系。</p><h1 id="问题定位"><a href="#问题定位" class="headerlink" title="问题定位"></a>问题定位</h1><p>先看日志，没有任何报错，接口都能正常返回。并且此处没有降级机制，arthas跟踪到数据库查询确实没有返回。</p><p>拿到具体的生产查询sql，直接在生产数据库查询，没有结果。但是同样的sql放到beta可以查询出结果。</p><p>这里基本可以定位到是sql查询的问题了。</p><p>先分析了下sql，简单的单表查询，where里有四个查询条件，其中一个字段引起了注意，如下：</p><p>select * from table_staff where companyId = ‘demo-companyId’ and isDelete = ‘0’;</p><p>isDelte在业务中是一个boolean类型，对应数据库中用的是位数据类型：bit(1)，首先尝试将查询条件isDelete=’0’改为isDelete=0或者isDelete=false，<br>可以在生产数据库查出结果。</p><p>进一步比对生产和beta环境该表的DDL，发现isDelete字段的数据类型是一致的，但是生产比beta数据库多了一个索引 idx_companId_isDelete(companyId和isDelete的一个联合索引，而且不是唯一索引)，<br>基本确认索引问题导致。</p><p>此时运维确认这个索引是前天晚上上线，为了提高跑批效率手动在生产加上去的，删掉idx_companId_isDelete索引后问题解决。</p><h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><p>首先肯定是走了索引，导致数据查询不出来</p><p>数据库中isDelete数据类型是bit(1),查询该类型的知识点：</p><blockquote><p>MySQL有少数几种存储类型使用紧凑的位存储数据。所有这些位类型，不管底层存储格式和处理方式如何，从技术上来说都是字符串类型。<br>MySQL把bit类型当作字符串类型，而不是数字类型。当检索BIT(1)的值时，结果是一个包含二进制0或者1值的字符串，而不是ASCII码的“0”或者“1”。<br>–《高性能MySQL》 P123 4.1.5-位数据类型</p></blockquote><p>MySQL把bit类型当作字符串类型，所以上例中当我们加了一个字符串索引，并且查询条件也使用的字符串查询时（isDelete=’0’），命中索引。而当我们把引号去掉或者使用false时（isDelete=0或isDelete=false）索引失效，进行了全表扫描。</p><p>问题在于，正常字符串索引即便是查询中使用了数字，也无非就是索引失效走全表扫描，不会查不出数据，这里明显是bit(1)数据类型的问题。</p><h1 id="场景还原"><a href="#场景还原" class="headerlink" title="场景还原"></a>场景还原</h1><p>在uat库加了跟生产同样的索引，还原了数据查询不出来的场景。</p><p>Explain 看了下命中索引是的执行计划，Extra中看到这样的描述</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Impossible WHERE noticed after reading const tables</span><br></pre></td></tr></table></figure><p>走了常量表，查询mysql Manual，发现了对这段描述的解释：</p><p>![Mysql-extra-impossible](<a href="http://blog-pic-1254088127.picsh.myqcloud.com/mysql-impossible-const.png）" target="_blank" rel="noopener">http://blog-pic-1254088127.picsh.myqcloud.com/mysql-impossible-const.png）</a></p><p>但是，上例中的查询并不符合这段解释中的要求</p><p>![Mysql索引常量](<a href="http://blog-pic-1254088127.picsh.myqcloud.com/mysql-index-const.png）" target="_blank" rel="noopener">http://blog-pic-1254088127.picsh.myqcloud.com/mysql-index-const.png）</a></p><h1 id="实践和结论"><a href="#实践和结论" class="headerlink" title="实践和结论"></a>实践和结论</h1><p>MySQL官方文档及其它资料中找不到合理的解释，这里给个实践结论。</p><p>对bit类型的字段的查询：</p><ul><li>不使用索引<br>查询bit的参数值是无论是数值还是字符，mysql都会进行类型转化,将字符转换为数值，并比较数值对应的ascii码</li><li>使用索引<br>检索BIT(1)列的值, 索引存的结果是一个字符串且内容是二进制位0或1, 而不是ASCII值”0″或”1″. 这就导致了为什么我们使用ASCII值”0”没有查询出结果。</li></ul><p>简言之：bit类型索引里存的是二进制类型的值（位类型bit），我们查询参数给的是ASCII码值</p><p>结论：<br>1、定义为text和image和bit数据类型的列不应该增加索引<br>2、加完索引一定要explain看一下<br>3、使用unsigned tinyint代替bit(1) 来表示是否<br>   @Column(columnDefinition= “TINYINT”,length = 1)    暂未验证</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在线上碰到了一个诡异的问题，线上有个业务模块突然查询不出数据。问题反馈的时候是上午，前一天晚上进行了上线操作，基本可以判断跟上线有关系。&lt;/p&gt;
&lt;h1 id=&quot;问题定位&quot;&gt;&lt;a href=&quot;#问题定位&quot; class=&quot;headerlink&quot; title=&quot;问题定位&quot;&gt;
      
    
    </summary>
    
    
      <category term="DB" scheme="http://10000hours.top/categories/DB/"/>
    
    
      <category term="Mysql" scheme="http://10000hours.top/tags/Mysql/"/>
    
      <category term="索引" scheme="http://10000hours.top/tags/%E7%B4%A2%E5%BC%95/"/>
    
  </entry>
  
  <entry>
    <title>Mysql-监控工具-innotop</title>
    <link href="http://10000hours.top/2020/05/29/Mysql-%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7-innotop/"/>
    <id>http://10000hours.top/2020/05/29/Mysql-%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7-innotop/</id>
    <published>2020-05-28T16:00:00.000Z</published>
    <updated>2020-07-11T05:31:13.471Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="DB" scheme="http://10000hours.top/categories/DB/"/>
    
    
      <category term="Mysql" scheme="http://10000hours.top/tags/Mysql/"/>
    
      <category term="工具" scheme="http://10000hours.top/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="监控" scheme="http://10000hours.top/tags/%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>jvm工具-堆-jmap</title>
    <link href="http://10000hours.top/2020/03/01/jvm%E5%B7%A5%E5%85%B7-%E5%A0%86-jmap/"/>
    <id>http://10000hours.top/2020/03/01/jvm%E5%B7%A5%E5%85%B7-%E5%A0%86-jmap/</id>
    <published>2020-02-29T16:00:00.000Z</published>
    <updated>2020-07-11T14:13:49.528Z</updated>
    
    <content type="html"><![CDATA[<h1 id="将-JAVA-HOME-bin添加到当前环境变量"><a href="#将-JAVA-HOME-bin添加到当前环境变量" class="headerlink" title="将$JAVA_HOME/bin添加到当前环境变量"></a>将$JAVA_HOME/bin添加到当前环境变量</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span></span><br><span class="line"><span class="meta">#</span><span class="bash">env  查看环境变量</span></span><br></pre></td></tr></table></figure><h1 id="什么时候使用"><a href="#什么时候使用" class="headerlink" title="什么时候使用"></a>什么时候使用</h1><p>当服务发生GC问题时，一般会使用jmap工具进行分析.</p><h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><ul><li>查看堆各个对象的数量、大小</li><li>dump堆里的对象信息,然后可以使用MAT等工具分析</li><li>查看堆的配置情况和GC算法</li><li>查看堆永久代信息</li></ul><h1 id="jmap命令"><a href="#jmap命令" class="headerlink" title="jmap命令"></a>jmap命令</h1><h2 id="jmap-histo-live-less"><a href="#jmap-histo-live-less" class="headerlink" title="jmap -histo[:live]  |less"></a>jmap -histo[:live] <pid> |less</h2><p>-histo：打印当前java堆中各个对象的数量、大小，添加了live，只会打印活跃的对象。</p><p>这个命令执行，JVM会先触发gc，然后再统计信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">查看对象数最多的对象，并按降序排序输出：</span><br><span class="line">jmap -histo &lt;pid&gt;|grep alibaba|sort -k <span class="number">2</span> -g -r|less</span><br><span class="line"></span><br><span class="line">查看占用内存最多的最象，并按降序排序输出：</span><br><span class="line">jmap -histo &lt;pid&gt;|grep alibaba|sort -k <span class="number">3</span> -g -r|less</span><br></pre></td></tr></table></figure><h2 id="jmap-dump-live-format-b-file"><a href="#jmap-dump-live-format-b-file" class="headerlink" title="jmap -dump:[live,]format=b,file= "></a>jmap -dump:[live,]format=b,file=<filename> <pid></h2><p>-dump：把java堆中的对象dump到本地文件，然后使用MAT进行分析。如果添加了live，只会dump活跃的对象。</p><p>这个命令执行，JVM会将整个heap的信息dump写入到一个文件，heap如果比较大的话，就会导致这个过程比较耗时，并且执行的过程中为了保证dump的信息是可靠的，所以会暂停应用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用hprof二进制形式,输出jvm的heap内容到文件</span><br><span class="line">[richey<span class="meta">@localhost</span> ~]$ jmap -dump:live,format=b,file=jmap.hprof <span class="number">6274</span></span><br><span class="line">Dumping heap to /home/richey/jmap.hprof ...</span><br><span class="line">Heap dump file created</span><br></pre></td></tr></table></figure><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><h2 id="让JVM在遇到OOM-OutOfMemoryError-时生成Dump文件"><a href="#让JVM在遇到OOM-OutOfMemoryError-时生成Dump文件" class="headerlink" title="让JVM在遇到OOM(OutOfMemoryError)时生成Dump文件"></a>让JVM在遇到OOM(OutOfMemoryError)时生成Dump文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/path/to/heap/dump</span><br></pre></td></tr></table></figure><blockquote><p>Error attaching to process: sun.jvm.hotspot.debugger.DebuggerException: Can’t attach to the process<br>在ubuntu中第一次使用jmap会报错：Error attaching to process: sun.jvm.hotspot.debugger.DebuggerException: Can’t attach to the process，这是oracla文档中提到的一个bug:<a href="http://bugs.java.com/bugdatabase/view_bug.do?bug_id=7050524,解决方式如下：" target="_blank" rel="noopener">http://bugs.java.com/bugdatabase/view_bug.do?bug_id=7050524,解决方式如下：</a></p></blockquote><blockquote><p>echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope 该方法在下次重启前有效。</p></blockquote><blockquote><p>永久有效方法 sudo vi /etc/sysctl.d/10-ptrace.conf 编辑下面这行: kernel.yama.ptrace_scope = 1 修改为: kernel.yama.ptrace_scope = 0 重启系统，使修改生效。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;将-JAVA-HOME-bin添加到当前环境变量&quot;&gt;&lt;a href=&quot;#将-JAVA-HOME-bin添加到当前环境变量&quot; class=&quot;headerlink&quot; title=&quot;将$JAVA_HOME/bin添加到当前环境变量&quot;&gt;&lt;/a&gt;将$JAVA_HOME/bi
      
    
    </summary>
    
    
      <category term="JVM" scheme="http://10000hours.top/categories/JVM/"/>
    
    
      <category term="JVM" scheme="http://10000hours.top/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Java4种引用类型</title>
    <link href="http://10000hours.top/2020/02/01/Java4%E7%A7%8D%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/"/>
    <id>http://10000hours.top/2020/02/01/Java4%E7%A7%8D%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/</id>
    <published>2020-01-31T16:00:00.000Z</published>
    <updated>2020-07-11T15:11:25.016Z</updated>
    
    <content type="html"><![CDATA[<p>Java的“引用”决定了对象的存活.</p><p>JDK1.2之后，java提供了4中引用类型：</p><ul><li><p>强引用</p><p>创建对象时默认声明的就是强引用，只要强引用和还在，垃圾收集器不会回收掉被引用的对象。</p></li></ul><ul><li><p>软引用</p><p>用来描述一些有用，但非必须的对象。系统在内存溢出之前（内存不足的时候）会对软引用关联的对象进行回收。</p><p>主要应用于缓存实现，内存不足的时候释放缓存。</p></li></ul><ul><li><p>弱引用</p><p>被弱引用关联的对象只能存活到下一次GC之前。弱引用完全不会影响对象的生命周期。</p><p>索引想使用某些对象，又不想影响其本身的生命周期的时候可以使用。</p></li><li><p>虚引用（幽灵引用、幻影引用）</p><p>最弱的一种引用关系。无法通过虚引用来获取一个对象实例，没有单独使用的意义。</p><p>设置虚引用关联的唯一目的就是能在这个对象被GC会收到一个系统消息。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Java的“引用”决定了对象的存活.&lt;/p&gt;
&lt;p&gt;JDK1.2之后，java提供了4中引用类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;强引用&lt;/p&gt;
&lt;p&gt;创建对象时默认声明的就是强引用，只要强引用和还在，垃圾收集器不会回收掉被引用的对象。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;
      
    
    </summary>
    
    
      <category term="JVM" scheme="http://10000hours.top/categories/JVM/"/>
    
    
      <category term="JVM" scheme="http://10000hours.top/tags/JVM/"/>
    
  </entry>
  
</feed>
